{"pageProps":{"title":"Handling FontFaceSet.entries() result not being iterable in Firefox","description":"This post describes how to deal with a bug in Firefox where it fails to properly identify the result of <code>FontFaceSet.entries()</code> as an actual iterable object.","published":"2022-11-29T19:20:00Z","readTimeInMinutes":3,"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    h2: \"h2\",\n    a: \"a\",\n    em: \"em\",\n    strong: \"strong\",\n    pre: \"pre\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components), {Media} = _components;\n  if (!Media) _missingMdxReference(\"Media\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"Today at work I fixed a bug while working with \", _jsx(_components.code, {\n        children: \"FontFaceSet.entries()\"\n      }), \" which only\\nappears in Firefox. This might not seem so strange in browser land, until I give\\nyou the gist of the bug. So without further ado, let's get into it!\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Bug description\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You may at some point have used methods such as \", _jsx(_components.a, {\n        href: \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries\",\n        children: _jsx(_components.code, {\n          children: \"Object.entries()\"\n        })\n      }), \"\\nor \", _jsx(_components.a, {\n        href: \"https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/entries\",\n        children: _jsx(_components.code, {\n          children: \"URLSearchParams.entries()\"\n        })\n      }), \" to get an iterator of \", _jsx(_components.code, {\n        children: \"[key, value]\"\n      }), \" arrays.\\nThis iterator can then be used to \", _jsx(_components.em, {\n        children: \"loop\"\n      }), \" over collections of data using\\n\", _jsx(_components.a, {\n        href: \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of\",\n        children: _jsx(_components.code, {\n          children: \"for...of\"\n        })\n      }), \" loops, or can be spread into an array using \", _jsx(_components.a, {\n        href: \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\",\n        children: \"spread syntax\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This concept is pretty well known and has been widely implemented across browsers\\nfor quite some time so there should be no need to worry about implementation differences.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Unfortunately, this changed for me after encountering an issue \", _jsx(_components.em, {\n        children: \"only\"\n      }), \" in Firefox\\nwhere \", _jsx(_components.code, {\n        children: \"FontFaceSet.entries()\"\n      }), \" does not return an iterable object while\\nit does in fact look \", _jsx(_components.strong, {\n        children: \"quite iterable\"\n      }), \":\"]\n    }), \"\\n\", _jsx(Media, {\n      src: \"/media/posts/entries-not-iterable-firefox.png\",\n      alt: \"FontFaceSet.entries() is not iterable error\",\n      width: \"878\",\n      height: \"106\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Debugging the problem\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To look further into what is causing this, we must know what\\n\", _jsx(_components.code, {\n        children: \"document.fonts.entries()\"\n      }), \" returns. We can figure out by creating\\na minimal reproducible example which can be used for debugging.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Given the following HTML:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-html\",\n        children: \"<!DOCTYPE html>\\n<html>\\n    <head>\\n        <title>FontFaceSet.entries()</title>\\n        <link\\n            type=\\\"text/css\\\"\\n            rel=\\\"stylesheet\\\"\\n            href=\\\"https://fonts.googleapis.com/css2?family=Lato:wght@400&display=swap\\\"\\n        />\\n        <link\\n            type=\\\"text/css\\\"\\n            rel=\\\"stylesheet\\\"\\n            href=\\\"https://fonts.googleapis.com/css2?family=Roboto:wght@400&display=swap\\\"\\n        />\\n    </head>\\n    <body>\\n        <span style=\\\"font-family: Lato\\\">Hello</span>\\n        <span style=\\\"font-family: Roboto\\\">World</span>\\n        <script type=\\\"text/javascript\\\">\\n            console.log(document.fonts.entries());\\n        </script>\\n    </body>\\n</html>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Opening this page in Firefox yields the following result in the console:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-javascript\",\n        children: \"FontFaceSetIterator { }\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Whereas in Chrome the following result appears in the console:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-javascript\",\n        children: \"Iterator { }\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Interesting indeed but alas, \", _jsx(_components.strong, {\n        children: \"neither\"\n      }), \" of these is actually documented\\n(iterator \", _jsx(_components.em, {\n        children: _jsx(_components.a, {\n          href: \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\",\n          children: \"protocols\"\n        })\n      }), \" are, but not the objects themselves).\\nIn one case while checking \", _jsx(_components.a, {\n        href: \"https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/entries\",\n        children: _jsx(_components.code, {\n          children: \"URLSearchParams.entries()\"\n        })\n      }), \"\\ndocumentation the word \\\"iterator\\\" even links to the \\\"iterator \", _jsx(_components.em, {\n        children: \"protocols\"\n      }), \"\\\" page... ðŸ˜•\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Looking for answers\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"One of the first things I did after realizing there was no documentation\\nwas to see if a bug was open on Firefox's bug tracker. Indeed two issues mention\\nthis unholy Firefox construct:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://bugzilla.mozilla.org/show_bug.cgi?id=1729089\",\n          children: \"https://bugzilla.mozilla.org/show_bug.cgi?id=1729089\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://bugzilla.mozilla.org/show_bug.cgi?id=1780657\",\n          children: \"https://bugzilla.mozilla.org/show_bug.cgi?id=1780657\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Unfortunately one is already a year old at the time of writing this article\\nwhich means there is little hope for a \\\"hotfix\\\" and also means that this\\nbehavior has existed in Firefox for at least one year.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Since this isn't something Firefox seems to be fixing and the documentation\\nis lacking there isn't much to do aside from writing a workaround for\\na problem which shouldn't even exist in the first place.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Solving the problem\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The value returned by \", _jsx(_components.code, {\n        children: \"document.fonts.entries()\"\n      }), \" in Firefox may not be \\\"officially\\\"\\niterable from the browser's own perspective, but it \", _jsx(_components.strong, {\n        children: \"does\"\n      }), \" have a \", _jsx(_components.code, {\n        children: \".next()\"\n      }), \"\\nmethod as is required per \", _jsx(_components.a, {\n        href: \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterator_protocol\",\n        children: \"iterator protocol\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"So, instead of relying on browser magic, we can instead write a\\nwrapper function which exhausts this fake \\\"iterator\\\":\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-javascript\",\n        children: \"function fontFaceSetIteratorToArray(target) {\\n    const iterable = target.entries();\\n    const results = [];\\n    let iterator = iterable.next();\\n\\n    while (iterator.done === false) {\\n        results.push(iterator.value);\\n\\n        iterator = iterable.next();\\n    }\\n\\n    return results;\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Which means that in Firefox we can now finally loop over font faces ðŸŽ‰\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-javascript\",\n        children: \"console.log(fontFaceSetIteratorToArray(document.fonts));\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This piece of code works in all modern browsers so it can be used wherever\\nreferences to \", _jsx(_components.code, {\n        children: \"FontFaceSet.entries()\"\n      }), \" exist. It's not pretty, but it beats\\nwriting unreliable browser detection code.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Conclusion\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Considering this is still an active problem in Firefox roughly a month before 2023,\\nusing spread syntax, \", _jsx(_components.code, {\n        children: \"for...of\"\n      }), \", or \", _jsx(_components.code, {\n        children: \"Array.from\"\n      }), \" on \", _jsx(_components.code, {\n        children: \"FontFaceSet.entries()\"\n      }), \" results is\\n\", _jsx(_components.strong, {\n        children: \"not viable\"\n      }), \" and instead a polyfill such as the one found in this article must be\\nused instead to ensure proper functionality across browsers.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"It'll take some time before we can finally start using \", _jsx(_components.code, {\n        children: \"[...document.fonts.entries()]\"\n      }), \"\\nconsidering that even after closing the issue, we're still dependent on\\neveryone updating their browsers.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"While this post does not end on a high note I do hope Firefox developers fix this\\nissue at some point so we can all enjoy the syntactically sugarcoated patterns\\nwe know and love :)\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Until next time!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"ðŸ‘‹\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{"title":"Handling FontFaceSet.entries() result not being iterable in Firefox","description":"This post describes how to deal with a bug in Firefox where it fails to properly identify the result of <code>FontFaceSet.entries()</code> as an actual iterable object.","published":"2022-11-29T19:20:00Z"}},"slug":"fixing-font-face-set-entries-not-iterable-in-firefox"},"__N_SSG":true}