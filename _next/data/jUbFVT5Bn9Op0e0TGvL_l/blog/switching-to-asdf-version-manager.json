{"pageProps":{"title":"Switching to ASDF version manager","description":"Depending on how many languages you program in, getting all their version managers installed, added to <code>$PATH</code>, configured etc... becomes quite a pain when setting up a new system, or even figuring out how this one works because you've used something else for a while.","published":"2017-08-15T21:04:44Z","readTimeInMinutes":5,"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\",\n      h2: \"h2\",\n      ul: \"ul\",\n      li: \"li\",\n      code: \"code\",\n      blockquote: \"blockquote\",\n      em: \"em\"\n    }, _provideComponents(), props.components), {Media} = _components;\n    if (!Media) _missingMdxReference(\"Media\", true);\n    return _jsxs(_Fragment, {\n      children: [_jsx(Media, {\n        invertDark: true,\n        src: \"/media/posts/asdfmovie-banner.svg\",\n        alt: \"asdfmovie quote from youtube\",\n        width: \"356\",\n        height: \"200\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Version management tools for programming languages are a common thing in (web-)developer land.\\nI started to wonder if there was an all-in-one version management tool.\\nI want this because as I learn more and do more, I will need more version managers that all\\nslow down my shell. So lets prevent that shall we!\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"I've always used \", _jsx(_components.a, {\n          href: \"https://rvm.io\",\n          title: \"Visit rvm.io\",\n          children: \"RVM\"\n        }), \" in the past without problem, the shell took about half a\\nsecond to load and that was acceptable. I mean, you can't have it all right :)\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Aside from sourcing good old RVM, recently I also added \", _jsx(_components.a, {\n          href: \"https://github.com/creationix/nvm\",\n          title: \"Visit creationix/nvm on GitHub\",\n          children: \"NVM\"\n        }), \" to the stack.\\nNo problem I thought! Until I resourced my shell and had to wait for two seconds... Yeah,\\nthis goes beyond the \\\"you can't have it all\\\" criteria. I often open a shell for a quick ssh session,\\nrunning tests, git commands, etc... There has to be a better way!\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"A universal version manager\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Enter \", _jsx(_components.a, {\n          href: \"https://github.com/asdf-vm/asdf\",\n          title: \"Visit asdf-vm/asdf on GitHub\",\n          children: \"ASDF\"\n        }), \" and \", _jsx(_components.a, {\n          href: \"https://github.com/asdf-vm/asdf-plugins\",\n          title: \"Visit asdf-vm/asdf-plugins on github\",\n          children: \"friends\"\n        }), \".\\nASDF is a universal and extensible version management tool for many \", _jsx(_components.a, {\n          href: \"https://github.com/asdf-vm/asdf-plugins\",\n          title: \"Visit asdf-vm/asdf-plugins on GitHub\",\n          children: \"programming languages\"\n        }), \".\\nIt provides the version management tooling and allows you to choose which plugins you would like to install.\\nLike Node.js, Ruby or Python for instance.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"To get started, go to their \", _jsx(_components.a, {\n          href: \"https://github.com/asdf-vm/asdf\",\n          title: \"Visit asdf-vm/asdf on GitHub\",\n          children: \"github page\"\n        }), \" and install ASDF.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"After installing, you'll only have the core of ASDF.\\nWe'll need to extend it by adding plugins to it and using those to install versions\\nof the language we want to use.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The list of plugins you'll install will differ from what I use.\\nI am a front end developer that works with Ruby / Rails as well as React.\\nFrom time to time I also muck around in \", _jsx(_components.a, {\n          href: \"https://crystal-lang.org/\",\n          title: \"Visit crystal-lang.org\",\n          children: \"Crystal\"\n        }), \" or \", _jsx(_components.a, {\n          href: \"https://www.rust-lang.org/en-US/\",\n          title: \"Visit rust-lang.org\",\n          children: \"Rust\"\n        }), \"\\n(both of which are awesome â€” check them out!). So I would head to the \", _jsx(_components.a, {\n          href: \"https://github.com/asdf-vm/asdf-plugins\",\n          title: \"Visit asdf-vm plugins page\",\n          children: \"plugins page\"\n        }), \"\\nand look for plugins for those programming languages. The following is what I use:\"]\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsx(_components.p, {\n            children: _jsx(_components.a, {\n              href: \"https://github.com/asdf-vm/asdf-ruby\",\n              title: \"Visit asdf-vm-asdf-ruby\",\n              children: \"asdf-vm/asdf-ruby\"\n            })\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsx(_components.p, {\n            children: _jsx(_components.a, {\n              href: \"https://github.com/asdf-vm/asdf-nodejs\",\n              title: \"Visit asdf-vm/asdf-nodejs on GitHub\",\n              children: \"asdf-vm/asdf-nodejs\"\n            })\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsx(_components.p, {\n            children: _jsx(_components.a, {\n              href: \"https://github.com/code-lever/asdf-rust\",\n              title: \"Visit code-lever/asdf-rust on GitHub\",\n              children: \"code-lever/asdf-rust\"\n            })\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsx(_components.p, {\n            children: _jsx(_components.a, {\n              href: \"https://github.com/asdf-community/asdf-crystal\",\n              title: \"Visit asdf-community/asdf-crystal on GitHub\",\n              children: \"asdf-community/asdf-crystal\"\n            })\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"There are installation instructions on every plugin repo. Sometimes, steps\\nfor migrating from your old version manager are also included.\\nFor Ruby using RVM, the migration is as easy as moving \", _jsx(_components.code, {\n          children: \"~/.rvm/rubies\"\n        }), \" to \", _jsx(_components.code, {\n          children: \"~/.asdf/installs/ruby.\"\n        })]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Sounds smooth, any bumps along the way?\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"It could be that gems and even Ruby versions will not work. If you run into this issue,\\nrun \", _jsx(_components.code, {\n          children: \"asdf reshim [language]\"\n        }), \" and restart your shell to fix any broken paths.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"If the problem persists, you can run \", _jsx(_components.code, {\n          children: \"asdf current [language]\"\n        }), \" to find the current version.\\nIt will also print the path to the version file that defined it.\\nThis is much simpler than running a mixture of \", _jsx(_components.code, {\n          children: \"ls\"\n        }), \" and \", _jsx(_components.code, {\n          children: \"grep\"\n        }), \" to find out where that version comes from.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"If you see the following after running \", _jsx(_components.code, {\n          children: \"asdf current [language]\"\n        }), \":\"]\n      }), \"\\n\", _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"No version set for [language]\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"It means that you haven't set or installed any versions for that language.\\nIf you haven't installed a version, run \", _jsx(_components.code, {\n          children: \"asdf list-all [language]\"\n        }), \".\\nThis will list all the available versions that ASDF can install. Choose a version and run\\n\", _jsx(_components.code, {\n          children: \"asdf install [language] [version]\"\n        }), \" to install it.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"If the plugin still doesn't work, run \", _jsx(_components.code, {\n          children: \"asdf global [language] [version]\"\n        }), \" which will create a \", _jsx(_components.code, {\n          children: \"~/.tool-versions\"\n        }), \" file.\\nThe language and version info will be stored and ASDF will attempt to load that version.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"To set a specific version in a directory, \", _jsx(_components.code, {\n          children: \"cd\"\n        }), \" to it and run\\n\", _jsx(_components.code, {\n          children: \"asdf local [language] [version]\"\n        }), \". ASDF will use a local version over a global version.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"After migrating from RVM, I had to rename my rubies.\\nRVM stored them in the format of \", _jsx(_components.code, {\n          children: \"ruby-[major]-[minor]-[patch]-p[ruby-patch]\"\n        }), \".\\nThis caused ASDF not to switch after running \", _jsx(_components.code, {\n          children: \"asdf local ruby 2.4.1\"\n        }), \" because the folder\\nname differed from the version input. Which meant I had to run \", _jsx(_components.code, {\n          children: \"asdf local ruby ruby-2.4.1\"\n        }), \".\\nIf a language is already specified, I'd rather not bother typing it again.\\nRemoving the \", _jsx(_components.code, {\n          children: \"ruby-\"\n        }), \" prefix from the directory names in \", _jsx(_components.code, {\n          children: \"~/.asdf/installs/ruby\"\n        }), \" fixed it.\\nRunning \", _jsx(_components.code, {\n          children: \"asdf local ruby 2.4.1\"\n        }), \" switched perfect afterwards.\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Extra's\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"A feature of the \", _jsx(_components.code, {\n          children: \"asdf-ruby\"\n        }), \" plugin is that it can install a set of \", _jsx(_components.a, {\n          href: \"https://github.com/asdf-vm/asdf-ruby#default-gems\",\n          title: \"Visit asdf-vm/asdf-ruby section on default gems\",\n          children: \"default gems\"\n        }), \"\\nspecified in a \", _jsx(_components.code, {\n          children: \"~/.default-gems file\"\n        }), \". I love this one as I'll never have to run \", _jsx(_components.code, {\n          children: \"gem install pry\"\n        }), \" again!\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"What RVM additionally offers that I have not seen in ASDF is the option to create a gemset.\\nThis was and still is a useful feature if you're doing Ruby projects involving lots of different\\ngems or even testing with specific gems. I rarely felt the need to create a gemset myself.\\nThus not having this feature did not have a lot of impact on my workflow (yet).\\nI'm not sure if NVM adds any extra functionality, either way I think ASDF will fill the\\ngaps because of how it was designed and how it can be extended.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Finally, I added a \", _jsx(_components.code, {\n          children: \"~/.asdfrc\"\n        }), \" file containing: \", _jsx(_components.code, {\n          children: \"legacy_version_file = yes\"\n        }), \".\\nThis enables ASDF read all version files we know and love.\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Conclusion\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"As for my shell time, it's back where it was with only RVM. But nothing messes with my \", _jsx(_components.code, {\n          children: \"cd\"\n        }), \" command anymore.\\nI also don't have to keep adding these noisy \", _jsx(_components.code, {\n          children: \"source\"\n        }), \" lines to \", _jsx(_components.a, {\n          href: \"https://github.com/SidOfc/dotfiles\",\n          title: \"Visit SidOfc/dotfiles on GitHub\",\n          children: \"my dotfiles\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"ASDF is still quite new and at the time of writing, there are few integrations.\\nThis means that if you use \", _jsx(_components.code, {\n          children: \"capistrano\"\n        }), \" to deploy using RVM for example, you won't be able to do that using ASDF just yet.\\nBut as mentioned above, someone somewhere will fix that gap or you could give it a shot yourself!\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"I hope you've learned something from this post and also that you will choose to switch to ASDF.\\nNot because it's better per-se but because it's universal and extensible and you now no longer have\\nto worry about version managers! Install a plugin and you're done! A plugin system and a management system,\\nbundled in 3 simple commands with a common interface. ASDF and I will be friends for a long time :)\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Cheers!\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsxs(_components.em, {\n          children: [\"Many thanks to \", _jsx(_components.a, {\n            href: \"https://medium.com/@vvangemert\",\n            title: \"Visit Vincent van Gemert on Medium\",\n            children: \"@vvgemert\"\n          }), \" for proofreading!\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"ðŸ‘‹\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{"title":"Switching to ASDF version manager","description":"Depending on how many languages you program in, getting all their version managers installed, added to <code>$PATH</code>, configured etc... becomes quite a pain when setting up a new system, or even figuring out how this one works because you've used something else for a while.","published":"2017-08-15T21:04:44Z"}},"slug":"switching-to-asdf-version-manager"},"__N_SSG":true}