{"pageProps":{"title":"Welcome to my digital home!","description":"My name is Sidney Liebrand. I am a Dutch front-end developer working with React and Ruby on Rails at Floorplanner in Rotterdam. This is the place where I publish new blog posts and perhaps a tool or two in the future.","posts":[{"title":"Converting .gif to web-safe video formats using ffmpeg","description":"This post shows how to convert .gif images to web-safe video formats using ffmpeg cli. These formats produce smaller files which means less data to load!","published":"2021-02-14T18:30:00Z","readTimeInMinutes":3,"source":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"When recording animated content for my blog posts I use a gif recorder. However,\\nusing \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://caniuse.com/?search=webm\",\n    \"title\": \"View caniuse.com webm support\"\n  }, \".webm\"), \" or \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://caniuse.com/?search=mp4\",\n    \"title\": \"View caniuse.com mp4 support\"\n  }, \".mp4\"), \"\\nfiles is usually more efficient and works in pretty much every major browser today.\"), mdx(\"h2\", null, \"Convert .gif to .webm\"), mdx(\"p\", null, \"To convert a .gif file to .webm, use the following command:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"ffmpeg -i file.gif -c vp9 -b:v 0 -crf 40 file.webm\\n\")), mdx(\"p\", null, \"This will output a .webm file that works in most browsers, but what are these options\\ndoing exactly? Let's dive in:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"-i\"), \": Specifies the \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"input file\"), \", in this case \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"file.gif\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"-c\"), \": Specifies the \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"codec\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"vp9\"), \" works in most browsers.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"-b:v\"), \": Specifies the \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"video bitrate\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"0\"), \" allows us to specify the quality via the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"-crf\"), \" option.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"-crf\"), \": Specifies the \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"quality\"), \", ranges between 0-63, lower means better quality.\")), mdx(\"p\", null, \"More detailed explanations about the options can be found \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://trac.ffmpeg.org/wiki/Encode/VP9\",\n    \"title\": \"Visit ffmpeg VP9 encode page\"\n  }, \"here\"), \".\"), mdx(\"p\", null, \"These .webm files will suffer a little bit of quality loss, but if more quality is\\nneeded the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-crf\"), \" flag can be set to a lower value easily. With these settings\\nthe .webm file is (on average) \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"60%\"), \" smaller than the .gif file.\"), mdx(\"p\", null, \"When we check caniuse, \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://caniuse.com/?search=webm\",\n    \"title\": \"View caniuse.com webm support\"\n  }, \".webm support\"), \" looks good too, mostly.\\nIndeed the only real reason today to use .mp4 on the web is to support Internet Explorer.\"), mdx(\"h2\", null, \"Convert .gif to .mp4\"), mdx(\"p\", null, \"To convert a .gif file to a web-safe .mp4, use the following command:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"ffmpeg -i file.gif -movflags +faststart -pix_fmt yuv420p \\\\\\n       -vf \\\"scale=trunc(iw/2)*2:trunc(ih/2)*2\\\" file.mp4\\n\")), mdx(\"p\", null, \"This will output a .mp4 file that is \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://caniuse.com/?search=mp4\",\n    \"title\": \"View caniuse.com mp4 support\"\n  }, \"widely supported\"), \"\\nin all browsers except Opera Mini. Let's also cover the options for this one:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"-i\"), \": Specifies the \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"input file\"), \", in this case \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"file.gif\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"-movflags\"), \": For web video we can specify \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"+faststart\"), \" to allow the video to start playing before the download is complete.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"-pix_fmt\"), \": The default \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"yuv444p\"), \" can't be played by some mobile browsers so we set it to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"yuv420p\"), \" instead.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"-vf\"), \": This flag is allows us to set \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\\"scale=trunc(iw/2)*2:trunc(ih/2)*2\\\"\"), \" to ensure the video width and height are divisible by 2 which would otherwise cause an error when using \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"yuv420p\"), \".\")), mdx(\"p\", null, \"More detailed expoanations about the options can be found \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://trac.ffmpeg.org/wiki/Encode/H.264\",\n    \"title\": \"Visit ffmpeg H.264 encode page\"\n  }, \"here\"), \".\\nAdditionally, \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/manateelazycat/deepin-screen-recorder/commit/a49612faed28fc70a98aa117839cc67d96b99761\",\n    \"title\": \"Read details about pix_fmt and vf flags command line flags\"\n  }, \"this commit\"), \"\\nprovides some additional context about \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-pix_fmt\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-vf\"), \".\"), mdx(\"p\", null, \"The .mp4 file is (on average) \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"50%\"), \" smaller than the .gif file. While less efficient\\nthan .webm, it is still much better than using .gif.\"), mdx(\"h2\", null, \"Conclusion\"), mdx(\"p\", null, \"Hopefully this post made it a little bit easier to understand how to convert\\n.gif files to .webm or .mp4 using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ffmpeg\"), \". It a powerful tool that can help us\\noptimize our usage of animated media on the web. It is definitely worth looking\\ninto if you run a website that displays lots of gifs.\"), mdx(\"p\", null, \"Until next time :)\"), mdx(\"p\", null, \"\\uD83D\\uDC4B\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>When recording animated content for my blog posts I use a gif recorder. However,\nusing <a href=\"https://caniuse.com/?search=webm\" title=\"View caniuse.com webm support\">.webm</a> or <a href=\"https://caniuse.com/?search=mp4\" title=\"View caniuse.com mp4 support\">.mp4</a>\nfiles is usually more efficient and works in pretty much every major browser today.</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"convert-gif-to\"></a><a class=\"heading_link__1aoFY\" href=\"#convert-gif-to\">Convert .gif to .webm</a></h2><p>To convert a .gif file to .webm, use the following command:</p><pre class=\"prism-code language-shell\" style=\"background-color:#2a2734;color:#9a86fd\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">ffmpeg -i file.gif -c vp9 -b:v </span><span class=\"token number\" style=\"color:#e09142\">0</span><span class=\"token plain\"> -crf </span><span class=\"token number\" style=\"color:#e09142\">40</span><span class=\"token plain\"> file.webm</span></div></pre><p>This will output a .webm file that works in most browsers, but what are these options\ndoing exactly? Let&#x27;s dive in:</p><ul><li><code>-i</code>: Specifies the <em>input file</em>, in this case <code>file.gif</code>.</li><li><code>-c</code>: Specifies the <em>codec</em>, <code>vp9</code> works in most browsers.</li><li><code>-b:v</code>: Specifies the <em>video bitrate</em>, <code>0</code> allows us to specify the quality via the <code>-crf</code> option.</li><li><code>-crf</code>: Specifies the <em>quality</em>, ranges between 0-63, lower means better quality.</li></ul><p>More detailed explanations about the options can be found <a href=\"https://trac.ffmpeg.org/wiki/Encode/VP9\" title=\"Visit ffmpeg VP9 encode page\">here</a>.</p><p>These .webm files will suffer a little bit of quality loss, but if more quality is\nneeded the <code>-crf</code> flag can be set to a lower value easily. With these settings\nthe .webm file is (on average) <strong>60%</strong> smaller than the .gif file.</p><p>When we check caniuse, <a href=\"https://caniuse.com/?search=webm\" title=\"View caniuse.com webm support\">.webm support</a> looks good too, mostly.\nIndeed the only real reason today to use .mp4 on the web is to support Internet Explorer.</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"convert-gif-to\"></a><a class=\"heading_link__1aoFY\" href=\"#convert-gif-to\">Convert .gif to .mp4</a></h2><p>To convert a .gif file to a web-safe .mp4, use the following command:</p><pre class=\"prism-code language-shell\" style=\"background-color:#2a2734;color:#9a86fd\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">ffmpeg -i file.gif -movflags +faststart -pix_fmt yuv420p </span><span class=\"token punctuation\" style=\"color:#6c6783\">\\</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">       -vf </span><span class=\"token string\" style=\"color:#ffcc99\">&quot;scale=trunc(iw/2)*2:trunc(ih/2)*2&quot;</span><span class=\"token plain\"> file.mp4</span></div></pre><p>This will output a .mp4 file that is <a href=\"https://caniuse.com/?search=mp4\" title=\"View caniuse.com mp4 support\">widely supported</a>\nin all browsers except Opera Mini. Let&#x27;s also cover the options for this one:</p><ul><li><code>-i</code>: Specifies the <em>input file</em>, in this case <code>file.gif</code>.</li><li><code>-movflags</code>: For web video we can specify <code>+faststart</code> to allow the video to start playing before the download is complete.</li><li><code>-pix_fmt</code>: The default <code>yuv444p</code> can&#x27;t be played by some mobile browsers so we set it to <code>yuv420p</code> instead.</li><li><code>-vf</code>: This flag is allows us to set <code>&quot;scale=trunc(iw/2)*2:trunc(ih/2)*2&quot;</code> to ensure the video width and height are divisible by 2 which would otherwise cause an error when using <code>yuv420p</code>.</li></ul><p>More detailed expoanations about the options can be found <a href=\"https://trac.ffmpeg.org/wiki/Encode/H.264\" title=\"Visit ffmpeg H.264 encode page\">here</a>.\nAdditionally, <a href=\"https://github.com/manateelazycat/deepin-screen-recorder/commit/a49612faed28fc70a98aa117839cc67d96b99761\" title=\"Read details about pix_fmt and vf flags command line flags\">this commit</a>\nprovides some additional context about <code>-pix_fmt</code> and <code>-vf</code>.</p><p>The .mp4 file is (on average) <strong>50%</strong> smaller than the .gif file. While less efficient\nthan .webm, it is still much better than using .gif.</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"conclusion\"></a><a class=\"heading_link__1aoFY\" href=\"#conclusion\">Conclusion</a></h2><p>Hopefully this post made it a little bit easier to understand how to convert\n.gif files to .webm or .mp4 using <code>ffmpeg</code>. It a powerful tool that can help us\noptimize our usage of animated media on the web. It is definitely worth looking\ninto if you run a website that displays lots of gifs.</p><p>Until next time :)</p><p>👋</p>","scope":{"title":"Converting .gif to web-safe video formats using ffmpeg","description":"This post shows how to convert .gif images to web-safe video formats using ffmpeg cli. These formats produce smaller files which means less data to load!","published":"2021-02-14T18:30:00Z"}},"slug":"converting-gif-to-web-safe-video-formats-using-ffmpeg"},{"title":"Creating my own vim statusline","description":"Recently I decided to clean up my vim plugins once again, I do not think I use too many but I prefer to keep my setup simple. One of the things which bothered me was the configuration for lightline.vim in my vim config. It seemed needlessly complex and I wondered if I could recreate it without any plugins at all!","published":"2020-05-21T00:12:34Z","readTimeInMinutes":10,"source":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I love Vim (more specifically Neovim) and the great text editing powers it\\ncomes with out of the box. It gets even better when enhancing Vim with\\nplugins to make life a lot easier as well. Over time I've added, swapped,\\nand removed many. One of the plugins I have used for a long time is \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/itchyny/lightline.vim\",\n    \"title\": \"Visit itchyny/lightline.vim on github\"\n  }, \"lightline.vim\"), \".\"), mdx(\"p\", null, \"lightline is a plugin that takes control of Vim's statusline and allows the user\\nto customize it to look and function however they want. Before getting to my lightline\\nconfiguration (and after that, my own implementation) however,\\nI want to show (or remind) you how Vim's statusline looks out of the box:\"), mdx(Media, {\n    src: \"/media/posts/vim-default-statusline.png\",\n    alt: \"default vim statusline\",\n    width: \"1924\",\n    height: \"68\",\n    mdxType: \"Media\"\n  }), mdx(\"p\", null, \"It provides useful information such as the current filename and the line and\\ncolumn number the cursor is on (it also shows \\\"All\\\" to the right but to this\\nday I haven't really looked into what that means). Aside from that, the\\nstatusline shows when the file has been modified with a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[+]\"), \" marker\\nafter the filename:\"), mdx(Media, {\n    src: \"/media/posts/vim-default-statusline-modified.png\",\n    alt: \"default vim statusline with modified flag\",\n    width: \"1924\",\n    height: \"68\",\n    mdxType: \"Media\"\n  }), mdx(\"p\", null, \"And finally, it will also show when a file is readonly with a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[RO]\"), \" marker:\"), mdx(Media, {\n    src: \"/media/posts/vim-default-statusline-readonly.png\",\n    alt: \"default vim statusline with read-only flag\",\n    width: \"1924\",\n    height: \"68\",\n    mdxType: \"Media\"\n  }), mdx(\"p\", null, \"This is all nice and useful, but at the same time it isn't very... ehm\\nvisually pleasing... at least in my opinion. This is where lightline comes in.\"), mdx(\"h2\", null, \"Pimping the statusline\"), mdx(\"p\", null, \"lightline makes it possible to add some life to the statusline without having\\nto dive deep into how Vim works. This is great if you're starting out like\\nI was a few years ago. I wanted it to do things it did not do out of the box\\nsuch as showing a different color in each mode and replacing the bulky\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[+]\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[RO]\"), \" markers with something \\\"cleaner\\\". This is how I made mine look:\"), mdx(Media, {\n    src: \"/media/posts/vim-colored-statusline\",\n    alt: \"lightline.vim statusline colors\",\n    width: \"1922\",\n    height: \"82\",\n    mdxType: \"Media\"\n  }), mdx(\"p\", null, \"The blue color is used in normal mode, the yellow/green is used\\nin insert mode, and the purple is used for all the visual modes\\n(blockwise, linewise, regular visual).\"), mdx(\"p\", null, \"This was already a massive improvement and as you may have noticed,\\nthe line and column numbers are now shown on the right and \\\"All\\\" is gone.\\nI also mentioned that I wanted to replace the markers with something a bit\\ncleaner, this is what I came up with:\"), mdx(Media, {\n    src: \"/media/posts/vim-statusline-lightline-modified.png\",\n    alt: \"lightline.vim statusline with modified flag\",\n    width: \"1924\",\n    height: \"66\",\n    mdxType: \"Media\"\n  }), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"+\"), \" is spaced and placed on the left side of the statusline. This\\nis my personal preference, I think this is useful so that I can always see\\nif a file is modified by looking \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"all the way to the left\"), \" rather than\\nhaving to scan for it after the filename which can have a variable length.\"), mdx(\"p\", null, \"I also mentioned that by default, Vim will also show if a file is readonly.\\nTo be honest, I didn't care about this since it adds a new scenario and if I\\nwanted to keep the single-character marker for aesthetics I'd have to use a\\ndifferent character which I would then have to remember to mean \\\"this is readonly\\\".\"), mdx(\"p\", null, \"For this reason, I decided not to show readonly and live with the fact that\\ntrying to write certain files would give me an error. It doesn't come up\\noften enough for me to justify having it in my statusline.\"), mdx(\"p\", null, \"Now that we've explored all this, I'd like to jump into the downside\\nof lightline.vim. While it is a fantastic plugin for newcomers to Vim\\nand comes with great power, it comes at the cost of \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"configuration\"), \".\"), mdx(\"h2\", null, \"Configuring lightline\"), mdx(\"p\", null, \"I had some difficulties with configuring lightline the way I wanted.\\nThe primary reason being that I did not like the default configuration\\nand the themes lightline provides out of the box did not fit my colorscheme.\"), mdx(\"p\", null, \"As a visual person I tend to go a little crazy when everything is different.\\nI like consistency and will go to great lengths to achieve it, even for\\nsomething seemingly simple such as the statusline.\"), mdx(\"p\", null, \"I must add that when I initially wrote the config to solve above issues,\\nI was quite new to Vim myself and probably made some poor choices. These\\nchoices however, stuck with me for quite some time and as I spent less\\ntime configuring, I also forgot how to change things and had to always\\ngo back to the documentation to figure out how to do stuff.\\nAll that being said, I'd like to share the full \\\"block\\\" of configuration\\nthat made this possible:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-viml\"\n  }, \"let s:base1   = '#C8CACB'\\nlet s:base0   = '#AEB0B1'\\nlet s:base00  = '#949697'\\nlet s:base02  = '#626465'\\nlet s:base023 = '#484A4B'\\nlet s:base03  = '#2F3132'\\nlet s:red     = '#cd3f45'\\nlet s:orange  = '#db7b55'\\nlet s:yellow  = '#e6cd69'\\nlet s:green   = '#9fca56'\\nlet s:cyan    = '#55dbbe'\\nlet s:blue    = '#55b5db'\\nlet s:magenta = '#a074c4'\\n\\nlet s:p = {'normal': {}, 'inactive': {}, 'insert': {},\\n         \\\\ 'replace': {}, 'visual': {}, 'tabline': {}}\\n\\nlet s:p.normal.left    = [ [ s:blue,   s:base03  ], [ s:base03, s:blue   ] ]\\nlet s:p.normal.middle  = [ [ s:base1,  s:base03  ]  ]\\nlet s:p.normal.right   = [ [ s:base03, s:blue    ], [ s:base00, s:base03 ] ]\\nlet s:p.normal.error   = [ [ s:red,    s:base023 ]  ]\\nlet s:p.normal.warning = [ [ s:yellow, s:base02  ]  ]\\n\\nlet s:p.inactive.left   = [ [ s:base1,   s:base03  ], [ s:base03, s:base03  ] ]\\nlet s:p.inactive.middle = [ [ s:base03,  s:base03  ]  ]\\nlet s:p.inactive.right  = [ [ s:base03,  s:base03  ], [ s:base03, s:base03  ] ]\\n\\nlet s:p.insert.left     = [ [ s:green,   s:base03  ], [ s:base03, s:green   ] ]\\nlet s:p.insert.right    = [ [ s:base03,  s:green   ], [ s:base00, s:base03  ] ]\\nlet s:p.replace.left    = [ [ s:orange,  s:base03  ], [ s:base03, s:orange  ] ]\\nlet s:p.replace.right   = [ [ s:base03,  s:orange  ], [ s:base00, s:base03  ] ]\\nlet s:p.visual.left     = [ [ s:magenta, s:base03  ], [ s:base03, s:magenta ] ]\\nlet s:p.visual.right    = [ [ s:base03,  s:magenta ], [ s:base00, s:base03  ] ]\\n\\nlet g:lightline#colorscheme#base16_seti#palette = lightline#colorscheme#fill(s:p)\\nlet s:label = '%{substitute(expand(\\\"%\\\"), \\\"NetrwTreeListing \\\\\\\\d\\\\\\\\+\\\", \\\"netrw\\\", \\\"\\\")}'\\nlet g:lightline = {\\n      \\\\ 'colorscheme':      'base16_seti',\\n      \\\\ 'separator':        { 'left': \\\"\\\", 'right': \\\"\\\" },\\n      \\\\ 'subseparator':     { 'left': \\\"\\u2502\\\", 'right': \\\"\\u2502\\\" },\\n      \\\\ 'active': {\\n      \\\\   'left': [ [ 'paste' ],\\n      \\\\             [ 'modified', 'label' ] ],\\n      \\\\   'right': [ [ 'lineinfo' ] ]\\n      \\\\ },\\n      \\\\ 'component': {\\n      \\\\   'mode':     '%{lightline#mode()[0]}',\\n      \\\\   'readonly': '%{&filetype==\\\"help\\\"?\\\"\\\":&readonly?\\\"!\\\":\\\"\\\"}',\\n      \\\\   'modified': '%{&filetype==\\\"help\\\"?\\\"\\\":&modified?\\\"+\\\":&modifiable?\\\"\\\":\\\"-\\\"}',\\n      \\\\   'label':    s:label\\n      \\\\ },\\n      \\\\ 'component_visible_condition': {\\n      \\\\   'paste':    '(&paste!=\\\"nopaste\\\")',\\n      \\\\   'readonly': '(&filetype!=\\\"help\\\"&& &readonly)',\\n      \\\\   'modified': '(&filetype!=\\\"help\\\"&&(&modified||!&modifiable))',\\n      \\\\ }\\n    \\\\ }\\n\")), mdx(\"p\", null, \"At the start I was perfectly fine with dealing with this, I was in\\n\\\"the configuration zone\\\" at the time anyway so I did not care. Future me however,\\nwas no longer satisfied by the cryptic block of configuration.\"), mdx(\"p\", null, \"I also didn't want to sink more time into demystifying it either. What I wanted,\\nwas \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"simplicity\"), \". After having gained some experience with Vim and writing\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/sidofc/mkdx\",\n    \"title\": \"Visit SidOfc/mkdx on github\"\n  }, \"my own markdown plugin\"), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/sidofc/treevial\",\n    \"title\": \"Visit SidOfc/treevial on github\"\n  }, \"my own file explorer\"), \"\\nI figured it was time to write my own statusline.\"), mdx(\"h2\", null, \"Ditching lightline.vim\"), mdx(\"p\", null, \"First off, I'd like to emphasize that lightline.vim is a great plugin. I loved\\nit until the very end and it allowed me to do whatever I wanted without having\\nintricate knowledge of Vimscript.\"), mdx(\"p\", null, \"The thing that broke me was the way the colors had to be specified,\\nthe \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"let s:p\"), \" object with lots of nested lists which contained more lists\\ndrove me crazy every time I looked at my vim config. It was a black box that\\nI wanted to get rid of.\"), mdx(\"p\", null, \"So finally, I decided to \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"roll my own\"), \". It took me roughly two to three hours\\nto figure out how I could make the statusline work the way I wanted using\\nplain Vimscript in addition to stealing a small snippet from a statusline plugin\\nto make sure only one statusline was active and unfocussed windows would\\nshow a \\\"grayscale\\\" version. This is the pure-vimscript implementation I came up with:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-viml\"\n  }, \"let g:mode_colors = {\\n      \\\\ 'n':  'StatusLineSection',\\n      \\\\ 'v':  'StatusLineSectionV',\\n      \\\\ '^V': 'StatusLineSectionV',\\n      \\\\ 'i':  'StatusLineSectionI',\\n      \\\\ 'c':  'StatusLineSectionC',\\n      \\\\ 'r':  'StatusLineSectionR'\\n      \\\\ }\\n\\nfun! StatusLineRenderer()\\n  let hl = '%#' . get(g:mode_colors, tolower(mode()), g:mode_colors.n) . '#'\\n\\n  return hl\\n        \\\\ . (&modified ? ' + \\u2502' : '')\\n        \\\\ . ' %{StatusLineFilename()} %#StatusLine#%='\\n        \\\\ . hl\\n        \\\\ . ' %l:%c '\\nendfun\\n\\nfun! StatusLineFilename()\\n  if (&ft ==? 'netrw') | return '*' | endif\\n  return substitute(expand('%'), '^' . getcwd() . '/\\\\?', '', 'i')\\nendfun\\n\\nfun! <SID>StatusLineHighlights()\\n  hi StatusLine         ctermbg=8  guibg=#313131 ctermfg=15 guifg=#cccccc\\n  hi StatusLineNC       ctermbg=0  guibg=#313131 ctermfg=8  guifg=#999999\\n  hi StatusLineSection  ctermbg=8  guibg=#55b5db ctermfg=0  guifg=#333333\\n  hi StatusLineSectionV ctermbg=11 guibg=#a074c4 ctermfg=0  guifg=#000000\\n  hi StatusLineSectionI ctermbg=10 guibg=#9fca56 ctermfg=0  guifg=#000000\\n  hi StatusLineSectionC ctermbg=12 guibg=#db7b55 ctermfg=0  guifg=#000000\\n  hi StatusLineSectionR ctermbg=12 guibg=#ed3f45 ctermfg=0  guifg=#000000\\nendfun\\n\\ncall <SID>StatusLineHighlights()\\n\\n\\\" only set default statusline once on initial startup.\\n\\\" ignored on subsequent 'so $MYVIMRC' calls to prevent\\n\\\" active buffer statusline from being 'blurred'.\\nif has('vim_starting')\\n  let &statusline = ' %{StatusLineFilename()}%= %l:%c '\\nendif\\n\\naugroup vimrc\\n  au!\\n  \\\" show focussed buffer statusline\\n  au FocusGained,VimEnter,WinEnter,BufWinEnter *\\n    \\\\ setlocal statusline=%!StatusLineRenderer()\\n\\n  \\\" show blurred buffer statusline\\n  au FocusLost,VimLeave,WinLeave,BufWinLeave *\\n    \\\\ setlocal statusline&\\n\\n  \\\" restore statusline highlights on colorscheme update\\n  au Colorscheme * call <SID>StatusLineHighlights()\\naugroup END\\n\")), mdx(\"p\", null, \"To my surprise, the above snippet is \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"56 lines\"), \" for the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"entire implementation\"), \"\\nwhereas the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"lightline configuration\"), \" weighs in at \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"57 lines\"), \". Yes,\\nmy entire implementation in less code than \\\"just\\\" the config for lightline.\"), mdx(\"p\", null, \"This may actually not seem like much, but considering that lightline has to\\ntake into account all kinds of configuration while rendering, it is actually\\nquite a bit slower than this implementation as well. I felt a noticeable difference\\nwhen scrolling up and down a file like a mad man.\"), mdx(\"h2\", null, \"Conclusion\"), mdx(\"p\", null, \"For me, it was a nice challenge and good fun. I also really like the end\\nresult as well. Remember when I showed the colors on my statusline?\\nYeah I lied about that being lightline \\uD83D\\uDE03\"), mdx(\"p\", null, \"What you saw before is indeed my current implementation, and it actually\\ndoes more than I could care to figure out how to achieve with lightline.\\nI was able to get rid of netrw buffer names even though I don't actually\\nneed that anymore since I'm using my own file explorer :thinking:\"), mdx(\"p\", null, \"Aside from that it shows more colors than the three mentioned above, here's all\\nof them in a short gif:\"), mdx(Media, {\n    src: \"/media/posts/vim-colored-statusline-all\",\n    alt: \"custom statusline showing all colors\",\n    width: \"1922\",\n    height: \"82\",\n    mdxType: \"Media\"\n  }), mdx(\"p\", null, \"In addition to blue for normal mode, yellow/green for insert, and purple for\\nvisual modes, it also shows red when in replace mode and a nice orange\\nwhen in EX mode!\"), mdx(\"p\", null, \"The best part about this though, is that I can now do whatever I want\\nwith this statusline using the power of Vimscript. No more abstract configuration\\nand no more scary palette, just plain ol' Vimscript.\"), mdx(\"p\", null, \"Now freed from statusline plugins and being able to cruise over files at the\\nspeed of light, this concludes my story of creating my own statusline. I hope\\nyou enjoyed it!\"), mdx(\"p\", null, \"Until next time :)\"), mdx(\"p\", null, \"\\uD83D\\uDC4B\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>I love Vim (more specifically Neovim) and the great text editing powers it\ncomes with out of the box. It gets even better when enhancing Vim with\nplugins to make life a lot easier as well. Over time I&#x27;ve added, swapped,\nand removed many. One of the plugins I have used for a long time is <a href=\"https://github.com/itchyny/lightline.vim\" title=\"Visit itchyny/lightline.vim on github\">lightline.vim</a>.</p><p>lightline is a plugin that takes control of Vim&#x27;s statusline and allows the user\nto customize it to look and function however they want. Before getting to my lightline\nconfiguration (and after that, my own implementation) however,\nI want to show (or remind) you how Vim&#x27;s statusline looks out of the box:</p><figure class=\"media_figure__1BF98\"><div class=\"lazyload-wrapper \"><div style=\"padding-bottom:3.5343035343035343%\"></div></div><figcaption class=\"media_alt__xSx7S\">default vim statusline</figcaption></figure><p>It provides useful information such as the current filename and the line and\ncolumn number the cursor is on (it also shows &quot;All&quot; to the right but to this\nday I haven&#x27;t really looked into what that means). Aside from that, the\nstatusline shows when the file has been modified with a <code>[+]</code> marker\nafter the filename:</p><figure class=\"media_figure__1BF98\"><div class=\"lazyload-wrapper \"><div style=\"padding-bottom:3.5343035343035343%\"></div></div><figcaption class=\"media_alt__xSx7S\">default vim statusline with modified flag</figcaption></figure><p>And finally, it will also show when a file is readonly with a <code>[RO]</code> marker:</p><figure class=\"media_figure__1BF98\"><div class=\"lazyload-wrapper \"><div style=\"padding-bottom:3.5343035343035343%\"></div></div><figcaption class=\"media_alt__xSx7S\">default vim statusline with read-only flag</figcaption></figure><p>This is all nice and useful, but at the same time it isn&#x27;t very... ehm\nvisually pleasing... at least in my opinion. This is where lightline comes in.</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"pimping-the-statusline\"></a><a class=\"heading_link__1aoFY\" href=\"#pimping-the-statusline\">Pimping the statusline</a></h2><p>lightline makes it possible to add some life to the statusline without having\nto dive deep into how Vim works. This is great if you&#x27;re starting out like\nI was a few years ago. I wanted it to do things it did not do out of the box\nsuch as showing a different color in each mode and replacing the bulky\n<code>[+]</code> and <code>[RO]</code> markers with something &quot;cleaner&quot;. This is how I made mine look:</p><figure class=\"media_figure__1BF98\"><div class=\"lazyload-wrapper \"><div style=\"padding-bottom:4.266389177939646%\"></div></div><figcaption class=\"media_alt__xSx7S\">lightline.vim statusline colors</figcaption></figure><p>The blue color is used in normal mode, the yellow/green is used\nin insert mode, and the purple is used for all the visual modes\n(blockwise, linewise, regular visual).</p><p>This was already a massive improvement and as you may have noticed,\nthe line and column numbers are now shown on the right and &quot;All&quot; is gone.\nI also mentioned that I wanted to replace the markers with something a bit\ncleaner, this is what I came up with:</p><figure class=\"media_figure__1BF98\"><div class=\"lazyload-wrapper \"><div style=\"padding-bottom:3.4303534303534304%\"></div></div><figcaption class=\"media_alt__xSx7S\">lightline.vim statusline with modified flag</figcaption></figure><p>The <code>+</code> is spaced and placed on the left side of the statusline. This\nis my personal preference, I think this is useful so that I can always see\nif a file is modified by looking <strong>all the way to the left</strong> rather than\nhaving to scan for it after the filename which can have a variable length.</p><p>I also mentioned that by default, Vim will also show if a file is readonly.\nTo be honest, I didn&#x27;t care about this since it adds a new scenario and if I\nwanted to keep the single-character marker for aesthetics I&#x27;d have to use a\ndifferent character which I would then have to remember to mean &quot;this is readonly&quot;.</p><p>For this reason, I decided not to show readonly and live with the fact that\ntrying to write certain files would give me an error. It doesn&#x27;t come up\noften enough for me to justify having it in my statusline.</p><p>Now that we&#x27;ve explored all this, I&#x27;d like to jump into the downside\nof lightline.vim. While it is a fantastic plugin for newcomers to Vim\nand comes with great power, it comes at the cost of <strong>configuration</strong>.</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"configuring-lightline\"></a><a class=\"heading_link__1aoFY\" href=\"#configuring-lightline\">Configuring lightline</a></h2><p>I had some difficulties with configuring lightline the way I wanted.\nThe primary reason being that I did not like the default configuration\nand the themes lightline provides out of the box did not fit my colorscheme.</p><p>As a visual person I tend to go a little crazy when everything is different.\nI like consistency and will go to great lengths to achieve it, even for\nsomething seemingly simple such as the statusline.</p><p>I must add that when I initially wrote the config to solve above issues,\nI was quite new to Vim myself and probably made some poor choices. These\nchoices however, stuck with me for quite some time and as I spent less\ntime configuring, I also forgot how to change things and had to always\ngo back to the documentation to figure out how to do stuff.\nAll that being said, I&#x27;d like to share the full &quot;block&quot; of configuration\nthat made this possible:</p><pre class=\"prism-code language-viml\" style=\"background-color:#2a2734;color:#9a86fd\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token keyword\" style=\"color:#ffcc99\">let</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">base1   </span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;#C8CACB&#x27;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#ffcc99\">let</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">base0   </span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;#AEB0B1&#x27;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#ffcc99\">let</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">base00  </span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;#949697&#x27;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#ffcc99\">let</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">base02  </span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;#626465&#x27;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#ffcc99\">let</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">base023 </span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;#484A4B&#x27;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#ffcc99\">let</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">base03  </span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;#2F3132&#x27;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#ffcc99\">let</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">red     </span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;#cd3f45&#x27;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#ffcc99\">let</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">orange  </span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;#db7b55&#x27;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#ffcc99\">let</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">yellow  </span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;#e6cd69&#x27;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#ffcc99\">let</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">green   </span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;#9fca56&#x27;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#ffcc99\">let</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">cyan    </span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;#55dbbe&#x27;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#ffcc99\">let</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">blue    </span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;#55b5db&#x27;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#ffcc99\">let</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">magenta </span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;#a074c4&#x27;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\" style=\"display:inline-block\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#ffcc99\">let</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">p </span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">{</span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;normal&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">{</span><span class=\"token punctuation\" style=\"color:#6c6783\">}</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;inactive&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">{</span><span class=\"token punctuation\" style=\"color:#6c6783\">}</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;insert&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">{</span><span class=\"token punctuation\" style=\"color:#6c6783\">}</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">         </span><span class=\"token punctuation\" style=\"color:#6c6783\">\\</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;replace&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">{</span><span class=\"token punctuation\" style=\"color:#6c6783\">}</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;visual&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">{</span><span class=\"token punctuation\" style=\"color:#6c6783\">}</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;tabline&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">{</span><span class=\"token punctuation\" style=\"color:#6c6783\">}</span><span class=\"token punctuation\" style=\"color:#6c6783\">}</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\" style=\"display:inline-block\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#ffcc99\">let</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">p</span><span class=\"token operator\" style=\"color:#e09142\">.</span><span class=\"token plain\">normal</span><span class=\"token operator\" style=\"color:#e09142\">.</span><span class=\"token plain\">left    </span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">blue</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\">   s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">base03  </span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">base03</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">blue   </span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#ffcc99\">let</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">p</span><span class=\"token operator\" style=\"color:#e09142\">.</span><span class=\"token plain\">normal</span><span class=\"token operator\" style=\"color:#e09142\">.</span><span class=\"token plain\">middle  </span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">base1</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\">  s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">base03  </span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token plain\">  </span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#ffcc99\">let</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">p</span><span class=\"token operator\" style=\"color:#e09142\">.</span><span class=\"token plain\">normal</span><span class=\"token operator\" style=\"color:#e09142\">.</span><span class=\"token plain\">right   </span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">base03</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">blue    </span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">base00</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">base03 </span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#ffcc99\">let</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">p</span><span class=\"token operator\" style=\"color:#e09142\">.</span><span class=\"token plain\">normal</span><span class=\"token operator\" style=\"color:#e09142\">.</span><span class=\"token plain\">error   </span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">red</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\">    s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">base023 </span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token plain\">  </span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#ffcc99\">let</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">p</span><span class=\"token operator\" style=\"color:#e09142\">.</span><span class=\"token plain\">normal</span><span class=\"token operator\" style=\"color:#e09142\">.</span><span class=\"token plain\">warning </span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">yellow</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">base02  </span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token plain\">  </span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\" style=\"display:inline-block\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#ffcc99\">let</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">p</span><span class=\"token operator\" style=\"color:#e09142\">.</span><span class=\"token plain\">inactive</span><span class=\"token operator\" style=\"color:#e09142\">.</span><span class=\"token plain\">left   </span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">base1</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\">   s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">base03  </span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">base03</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">base03  </span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#ffcc99\">let</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">p</span><span class=\"token operator\" style=\"color:#e09142\">.</span><span class=\"token plain\">inactive</span><span class=\"token operator\" style=\"color:#e09142\">.</span><span class=\"token plain\">middle </span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">base03</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\">  s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">base03  </span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token plain\">  </span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#ffcc99\">let</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">p</span><span class=\"token operator\" style=\"color:#e09142\">.</span><span class=\"token plain\">inactive</span><span class=\"token operator\" style=\"color:#e09142\">.</span><span class=\"token plain\">right  </span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">base03</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\">  s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">base03  </span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">base03</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">base03  </span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\" style=\"display:inline-block\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#ffcc99\">let</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">p</span><span class=\"token operator\" style=\"color:#e09142\">.</span><span class=\"token plain\">insert</span><span class=\"token operator\" style=\"color:#e09142\">.</span><span class=\"token plain\">left     </span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">green</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\">   s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">base03  </span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">base03</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">green   </span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#ffcc99\">let</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">p</span><span class=\"token operator\" style=\"color:#e09142\">.</span><span class=\"token plain\">insert</span><span class=\"token operator\" style=\"color:#e09142\">.</span><span class=\"token plain\">right    </span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">base03</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\">  s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">green   </span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">base00</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">base03  </span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#ffcc99\">let</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">p</span><span class=\"token operator\" style=\"color:#e09142\">.</span><span class=\"token plain\">replace</span><span class=\"token operator\" style=\"color:#e09142\">.</span><span class=\"token plain\">left    </span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">orange</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\">  s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">base03  </span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">base03</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">orange  </span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#ffcc99\">let</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">p</span><span class=\"token operator\" style=\"color:#e09142\">.</span><span class=\"token plain\">replace</span><span class=\"token operator\" style=\"color:#e09142\">.</span><span class=\"token plain\">right   </span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">base03</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\">  s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">orange  </span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">base00</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">base03  </span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#ffcc99\">let</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">p</span><span class=\"token operator\" style=\"color:#e09142\">.</span><span class=\"token plain\">visual</span><span class=\"token operator\" style=\"color:#e09142\">.</span><span class=\"token plain\">left     </span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">magenta</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">base03  </span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">base03</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">magenta </span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#ffcc99\">let</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">p</span><span class=\"token operator\" style=\"color:#e09142\">.</span><span class=\"token plain\">visual</span><span class=\"token operator\" style=\"color:#e09142\">.</span><span class=\"token plain\">right    </span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">base03</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\">  s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">magenta </span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">base00</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">base03  </span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\" style=\"display:inline-block\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#ffcc99\">let</span><span class=\"token plain\"> g</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">lightline</span><span class=\"token punctuation\" style=\"color:#6c6783\">#</span><span class=\"token plain\">colorscheme</span><span class=\"token punctuation\" style=\"color:#6c6783\">#</span><span class=\"token plain\">base16_seti</span><span class=\"token punctuation\" style=\"color:#6c6783\">#</span><span class=\"token plain\">palette </span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token plain\"> lightline</span><span class=\"token punctuation\" style=\"color:#6c6783\">#</span><span class=\"token plain\">colorscheme</span><span class=\"token punctuation\" style=\"color:#6c6783\">#</span><span class=\"token function\" style=\"color:#fa60c3\">fill</span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token plain\">s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">p</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#ffcc99\">let</span><span class=\"token plain\"> s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">label </span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;%{substitute(expand(&quot;%&quot;), &quot;NetrwTreeListing \\\\d\\\\+&quot;, &quot;netrw&quot;, &quot;&quot;)}&#x27;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#ffcc99\">let</span><span class=\"token plain\"> g</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">lightline </span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">{</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">      </span><span class=\"token punctuation\" style=\"color:#6c6783\">\\</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;colorscheme&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">      </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;base16_seti&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">      </span><span class=\"token punctuation\" style=\"color:#6c6783\">\\</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;separator&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">        </span><span class=\"token punctuation\" style=\"color:#6c6783\">{</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;left&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&quot;&quot;</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;right&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&quot;&quot;</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">}</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">      </span><span class=\"token punctuation\" style=\"color:#6c6783\">\\</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;subseparator&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">     </span><span class=\"token punctuation\" style=\"color:#6c6783\">{</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;left&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&quot;│&quot;</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;right&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&quot;│&quot;</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">}</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">      </span><span class=\"token punctuation\" style=\"color:#6c6783\">\\</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;active&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">{</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">      </span><span class=\"token punctuation\" style=\"color:#6c6783\">\\</span><span class=\"token plain\">   </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;left&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;paste&#x27;</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">      </span><span class=\"token punctuation\" style=\"color:#6c6783\">\\</span><span class=\"token plain\">             </span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;modified&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;label&#x27;</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">      </span><span class=\"token punctuation\" style=\"color:#6c6783\">\\</span><span class=\"token plain\">   </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;right&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;lineinfo&#x27;</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">      </span><span class=\"token punctuation\" style=\"color:#6c6783\">\\</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">}</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">      </span><span class=\"token punctuation\" style=\"color:#6c6783\">\\</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;component&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">{</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">      </span><span class=\"token punctuation\" style=\"color:#6c6783\">\\</span><span class=\"token plain\">   </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;mode&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">     </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;%{lightline#mode()[0]}&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">      </span><span class=\"token punctuation\" style=\"color:#6c6783\">\\</span><span class=\"token plain\">   </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;readonly&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;%{&amp;filetype==&quot;help&quot;?&quot;&quot;:&amp;readonly?&quot;!&quot;:&quot;&quot;}&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">      </span><span class=\"token punctuation\" style=\"color:#6c6783\">\\</span><span class=\"token plain\">   </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;modified&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;%{&amp;filetype==&quot;help&quot;?&quot;&quot;:&amp;modified?&quot;+&quot;:&amp;modifiable?&quot;&quot;:&quot;-&quot;}&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">      </span><span class=\"token punctuation\" style=\"color:#6c6783\">\\</span><span class=\"token plain\">   </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;label&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">    s</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">label</span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">      </span><span class=\"token punctuation\" style=\"color:#6c6783\">\\</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">}</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">      </span><span class=\"token punctuation\" style=\"color:#6c6783\">\\</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;component_visible_condition&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">{</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">      </span><span class=\"token punctuation\" style=\"color:#6c6783\">\\</span><span class=\"token plain\">   </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;paste&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">    </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;(&amp;paste!=&quot;nopaste&quot;)&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">      </span><span class=\"token punctuation\" style=\"color:#6c6783\">\\</span><span class=\"token plain\">   </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;readonly&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;(&amp;filetype!=&quot;help&quot;&amp;&amp; &amp;readonly)&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">      </span><span class=\"token punctuation\" style=\"color:#6c6783\">\\</span><span class=\"token plain\">   </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;modified&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;(&amp;filetype!=&quot;help&quot;&amp;&amp;(&amp;modified||!&amp;modifiable))&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">      </span><span class=\"token punctuation\" style=\"color:#6c6783\">\\</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">}</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">    </span><span class=\"token punctuation\" style=\"color:#6c6783\">\\</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">}</span></div></pre><p>At the start I was perfectly fine with dealing with this, I was in\n&quot;the configuration zone&quot; at the time anyway so I did not care. Future me however,\nwas no longer satisfied by the cryptic block of configuration.</p><p>I also didn&#x27;t want to sink more time into demystifying it either. What I wanted,\nwas <strong>simplicity</strong>. After having gained some experience with Vim and writing\n<a href=\"https://github.com/sidofc/mkdx\" title=\"Visit SidOfc/mkdx on github\">my own markdown plugin</a> and <a href=\"https://github.com/sidofc/treevial\" title=\"Visit SidOfc/treevial on github\">my own file explorer</a>\nI figured it was time to write my own statusline.</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"ditching-lightline\"></a><a class=\"heading_link__1aoFY\" href=\"#ditching-lightline\">Ditching lightline.vim</a></h2><p>First off, I&#x27;d like to emphasize that lightline.vim is a great plugin. I loved\nit until the very end and it allowed me to do whatever I wanted without having\nintricate knowledge of Vimscript.</p><p>The thing that broke me was the way the colors had to be specified,\nthe <code>let s:p</code> object with lots of nested lists which contained more lists\ndrove me crazy every time I looked at my vim config. It was a black box that\nI wanted to get rid of.</p><p>So finally, I decided to <strong>roll my own</strong>. It took me roughly two to three hours\nto figure out how I could make the statusline work the way I wanted using\nplain Vimscript in addition to stealing a small snippet from a statusline plugin\nto make sure only one statusline was active and unfocussed windows would\nshow a &quot;grayscale&quot; version. This is the pure-vimscript implementation I came up with:</p><pre class=\"prism-code language-viml\" style=\"background-color:#2a2734;color:#9a86fd\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token keyword\" style=\"color:#ffcc99\">let</span><span class=\"token plain\"> g</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">mode_colors </span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">{</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">      </span><span class=\"token punctuation\" style=\"color:#6c6783\">\\</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;n&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">  </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;StatusLineSection&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">      </span><span class=\"token punctuation\" style=\"color:#6c6783\">\\</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;v&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">  </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;StatusLineSectionV&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">      </span><span class=\"token punctuation\" style=\"color:#6c6783\">\\</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;^V&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;StatusLineSectionV&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">      </span><span class=\"token punctuation\" style=\"color:#6c6783\">\\</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;i&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">  </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;StatusLineSectionI&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">      </span><span class=\"token punctuation\" style=\"color:#6c6783\">\\</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;c&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">  </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;StatusLineSectionC&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">      </span><span class=\"token punctuation\" style=\"color:#6c6783\">\\</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;r&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">  </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;StatusLineSectionR&#x27;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">      </span><span class=\"token punctuation\" style=\"color:#6c6783\">\\</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">}</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\" style=\"display:inline-block\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#ffcc99\">fun</span><span class=\"token operator\" style=\"color:#e09142\">!</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#fa60c3\">StatusLineRenderer</span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">  </span><span class=\"token keyword\" style=\"color:#ffcc99\">let</span><span class=\"token plain\"> </span><span class=\"token builtin\">hl</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;%#&#x27;</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#e09142\">.</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#fa60c3\">get</span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token plain\">g</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">mode_colors</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#fa60c3\">tolower</span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token function\" style=\"color:#fa60c3\">mode</span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> g</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">mode_colors</span><span class=\"token operator\" style=\"color:#e09142\">.</span><span class=\"token plain\">n</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#e09142\">.</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;#&#x27;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\" style=\"display:inline-block\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">  </span><span class=\"token keyword\" style=\"color:#ffcc99\">return</span><span class=\"token plain\"> </span><span class=\"token builtin\">hl</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">        </span><span class=\"token punctuation\" style=\"color:#6c6783\">\\</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#e09142\">.</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token plain\">&amp;</span><span class=\"token builtin\">modified</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#e09142\">?</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27; + │&#x27;</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">        </span><span class=\"token punctuation\" style=\"color:#6c6783\">\\</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#e09142\">.</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27; %{StatusLineFilename()} %#StatusLine#%=&#x27;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">        </span><span class=\"token punctuation\" style=\"color:#6c6783\">\\</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#e09142\">.</span><span class=\"token plain\"> </span><span class=\"token builtin\">hl</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">        </span><span class=\"token punctuation\" style=\"color:#6c6783\">\\</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#e09142\">.</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27; %l:%c &#x27;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#ffcc99\">endfun</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\" style=\"display:inline-block\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#ffcc99\">fun</span><span class=\"token operator\" style=\"color:#e09142\">!</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#fa60c3\">StatusLineFilename</span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">  </span><span class=\"token keyword\" style=\"color:#ffcc99\">if</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token plain\">&amp;</span><span class=\"token builtin\">ft</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#e09142\">==?</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;netrw&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token plain\"> | </span><span class=\"token keyword\" style=\"color:#ffcc99\">return</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;*&#x27;</span><span class=\"token plain\"> | </span><span class=\"token keyword\" style=\"color:#ffcc99\">endif</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">  </span><span class=\"token keyword\" style=\"color:#ffcc99\">return</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#fa60c3\">substitute</span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token function\" style=\"color:#fa60c3\">expand</span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;%&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;^&#x27;</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#e09142\">.</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#fa60c3\">getcwd</span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#e09142\">.</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;/\\?&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;i&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#ffcc99\">endfun</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\" style=\"display:inline-block\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#ffcc99\">fun</span><span class=\"token operator\" style=\"color:#e09142\">!</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">SID</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token function\" style=\"color:#fa60c3\">StatusLineHighlights</span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">  </span><span class=\"token builtin\">hi</span><span class=\"token plain\"> StatusLine         ctermbg</span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token number\" style=\"color:#e09142\">8</span><span class=\"token plain\">  guibg</span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token number\" style=\"color:#e09142\">#313131</span><span class=\"token plain\"> ctermfg</span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token number\" style=\"color:#e09142\">15</span><span class=\"token plain\"> guifg</span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token number\" style=\"color:#e09142\">#cccccc</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">  </span><span class=\"token builtin\">hi</span><span class=\"token plain\"> StatusLineNC       ctermbg</span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token number\" style=\"color:#e09142\">0</span><span class=\"token plain\">  guibg</span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token number\" style=\"color:#e09142\">#313131</span><span class=\"token plain\"> ctermfg</span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token number\" style=\"color:#e09142\">8</span><span class=\"token plain\">  guifg</span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token number\" style=\"color:#e09142\">#999999</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">  </span><span class=\"token builtin\">hi</span><span class=\"token plain\"> StatusLineSection  ctermbg</span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token number\" style=\"color:#e09142\">8</span><span class=\"token plain\">  guibg</span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token number\" style=\"color:#e09142\">#55b5db</span><span class=\"token plain\"> ctermfg</span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token number\" style=\"color:#e09142\">0</span><span class=\"token plain\">  guifg</span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token number\" style=\"color:#e09142\">#333333</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">  </span><span class=\"token builtin\">hi</span><span class=\"token plain\"> StatusLineSectionV ctermbg</span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token number\" style=\"color:#e09142\">11</span><span class=\"token plain\"> guibg</span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token number\" style=\"color:#e09142\">#a074c4</span><span class=\"token plain\"> ctermfg</span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token number\" style=\"color:#e09142\">0</span><span class=\"token plain\">  guifg</span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token number\" style=\"color:#e09142\">#000000</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">  </span><span class=\"token builtin\">hi</span><span class=\"token plain\"> StatusLineSectionI ctermbg</span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token number\" style=\"color:#e09142\">10</span><span class=\"token plain\"> guibg</span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token number\" style=\"color:#e09142\">#9fca56</span><span class=\"token plain\"> ctermfg</span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token number\" style=\"color:#e09142\">0</span><span class=\"token plain\">  guifg</span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token number\" style=\"color:#e09142\">#000000</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">  </span><span class=\"token builtin\">hi</span><span class=\"token plain\"> StatusLineSectionC ctermbg</span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token number\" style=\"color:#e09142\">12</span><span class=\"token plain\"> guibg</span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token number\" style=\"color:#e09142\">#db7b55</span><span class=\"token plain\"> ctermfg</span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token number\" style=\"color:#e09142\">0</span><span class=\"token plain\">  guifg</span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token number\" style=\"color:#e09142\">#000000</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">  </span><span class=\"token builtin\">hi</span><span class=\"token plain\"> StatusLineSectionR ctermbg</span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token number\" style=\"color:#e09142\">12</span><span class=\"token plain\"> guibg</span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token number\" style=\"color:#e09142\">#ed3f45</span><span class=\"token plain\"> ctermfg</span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token number\" style=\"color:#e09142\">0</span><span class=\"token plain\">  guifg</span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token number\" style=\"color:#e09142\">#000000</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#ffcc99\">endfun</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\" style=\"display:inline-block\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#ffcc99\">call</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">SID</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token function\" style=\"color:#fa60c3\">StatusLineHighlights</span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\" style=\"display:inline-block\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#9390a1\">&quot; only set default statusline once on initial startup.</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#9390a1\">&quot; ignored on subsequent &#x27;so $MYVIMRC&#x27; calls to prevent</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#9390a1\">&quot; active buffer statusline from being &#x27;blurred&#x27;.</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#ffcc99\">if</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#fa60c3\">has</span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;vim_starting&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">  </span><span class=\"token keyword\" style=\"color:#ffcc99\">let</span><span class=\"token plain\"> &amp;</span><span class=\"token builtin\">statusline</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27; %{StatusLineFilename()}%= %l:%c &#x27;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#ffcc99\">endif</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\" style=\"display:inline-block\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">augroup vimrc</span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">  au</span><span class=\"token operator\" style=\"color:#e09142\">!</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">  </span><span class=\"token comment\" style=\"color:#9390a1\">&quot; show focussed buffer statusline</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">  au FocusGained</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\">VimEnter</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\">WinEnter</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\">BufWinEnter </span><span class=\"token operator\" style=\"color:#e09142\">*</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">    </span><span class=\"token punctuation\" style=\"color:#6c6783\">\\</span><span class=\"token plain\"> </span><span class=\"token keyword\" style=\"color:#ffcc99\">setlocal</span><span class=\"token plain\"> </span><span class=\"token builtin\">statusline</span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token operator\" style=\"color:#e09142\">%</span><span class=\"token operator\" style=\"color:#e09142\">!</span><span class=\"token function\" style=\"color:#fa60c3\">StatusLineRenderer</span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\" style=\"display:inline-block\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">  </span><span class=\"token comment\" style=\"color:#9390a1\">&quot; show blurred buffer statusline</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">  au FocusLost</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\">VimLeave</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\">WinLeave</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\">BufWinLeave </span><span class=\"token operator\" style=\"color:#e09142\">*</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">    </span><span class=\"token punctuation\" style=\"color:#6c6783\">\\</span><span class=\"token plain\"> </span><span class=\"token keyword\" style=\"color:#ffcc99\">setlocal</span><span class=\"token plain\"> </span><span class=\"token builtin\">statusline</span><span class=\"token plain\">&amp;</span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\" style=\"display:inline-block\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">  </span><span class=\"token comment\" style=\"color:#9390a1\">&quot; restore statusline highlights on colorscheme update</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">  au Colorscheme </span><span class=\"token operator\" style=\"color:#e09142\">*</span><span class=\"token plain\"> </span><span class=\"token keyword\" style=\"color:#ffcc99\">call</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">SID</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token function\" style=\"color:#fa60c3\">StatusLineHighlights</span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">augroup END</span></div></pre><p>To my surprise, the above snippet is <strong>56 lines</strong> for the <strong>entire implementation</strong>\nwhereas the <strong>lightline configuration</strong> weighs in at <strong>57 lines</strong>. Yes,\nmy entire implementation in less code than &quot;just&quot; the config for lightline.</p><p>This may actually not seem like much, but considering that lightline has to\ntake into account all kinds of configuration while rendering, it is actually\nquite a bit slower than this implementation as well. I felt a noticeable difference\nwhen scrolling up and down a file like a mad man.</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"conclusion\"></a><a class=\"heading_link__1aoFY\" href=\"#conclusion\">Conclusion</a></h2><p>For me, it was a nice challenge and good fun. I also really like the end\nresult as well. Remember when I showed the colors on my statusline?\nYeah I lied about that being lightline 😃</p><p>What you saw before is indeed my current implementation, and it actually\ndoes more than I could care to figure out how to achieve with lightline.\nI was able to get rid of netrw buffer names even though I don&#x27;t actually\nneed that anymore since I&#x27;m using my own file explorer :thinking:</p><p>Aside from that it shows more colors than the three mentioned above, here&#x27;s all\nof them in a short gif:</p><figure class=\"media_figure__1BF98\"><div class=\"lazyload-wrapper \"><div style=\"padding-bottom:4.266389177939646%\"></div></div><figcaption class=\"media_alt__xSx7S\">custom statusline showing all colors</figcaption></figure><p>In addition to blue for normal mode, yellow/green for insert, and purple for\nvisual modes, it also shows red when in replace mode and a nice orange\nwhen in EX mode!</p><p>The best part about this though, is that I can now do whatever I want\nwith this statusline using the power of Vimscript. No more abstract configuration\nand no more scary palette, just plain ol&#x27; Vimscript.</p><p>Now freed from statusline plugins and being able to cruise over files at the\nspeed of light, this concludes my story of creating my own statusline. I hope\nyou enjoyed it!</p><p>Until next time :)</p><p>👋</p>","scope":{"title":"Creating my own vim statusline","description":"Recently I decided to clean up my vim plugins once again, I do not think I use too many but I prefer to keep my setup simple. One of the things which bothered me was the configuration for lightline.vim in my vim config. It seemed needlessly complex and I wondered if I could recreate it without any plugins at all!","published":"2020-05-21T00:12:34Z"}},"slug":"creating-my-own-vim-statusline"},{"title":"Fixing audio configuration after upgrading Ubuntu","description":"It is never fun when stuff breaks! This post is about me fixing some audio deficiencies after upgrading Ubuntu.","published":"2020-05-20T00:13:37Z","readTimeInMinutes":1,"source":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Every time I upgrade Ubuntu something fails. One of these things is audio.\\nFor some reason, upgrading breaks my audio setup in weird ways, I have speakers\\nconnected as \\\"Line Out\\\" and a wireless headset. After an upgrade Ubuntu\\nmay refuse to play audio through my headset entirely, this can be fixed\\nby removing pulse config:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"rm -rf ~/.config/pulse\\n\")), mdx(\"p\", null, \"On restart, Ubuntu will create a fresh config file which will work.\"), mdx(\"p\", null, \"Another thing that fails for me after upgrading Ubuntu is that my headset\\nlikes to \\\"take control\\\" over the audio even though it isn't switched on.\\nThe (likely) reason this happens is because the hub my headset connects to\\nis in fact, always on, and gets detected after \\\"Line Out\\\". Pulseaudio has\\na setting located in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/etc/pulse/default.pa\"), \" to automatically\\nswitch to \\\"newly connected\\\" audio devices.\"), mdx(\"p\", null, \"Since this is never what I want, I have to disable it by editing the file\\nand commenting out \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"load-module module-switch-on-connect\"), \" like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ini\"\n  }, \"# load-module module-switch-on-connect\\n\")), mdx(\"p\", null, \"Until next time :)\"), mdx(\"p\", null, \"\\uD83D\\uDC4B\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>Every time I upgrade Ubuntu something fails. One of these things is audio.\nFor some reason, upgrading breaks my audio setup in weird ways, I have speakers\nconnected as &quot;Line Out&quot; and a wireless headset. After an upgrade Ubuntu\nmay refuse to play audio through my headset entirely, this can be fixed\nby removing pulse config:</p><pre class=\"prism-code language-shell\" style=\"background-color:#2a2734;color:#9a86fd\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token function\" style=\"color:#fa60c3\">rm</span><span class=\"token plain\"> -rf ~/.config/pulse</span></div></pre><p>On restart, Ubuntu will create a fresh config file which will work.</p><p>Another thing that fails for me after upgrading Ubuntu is that my headset\nlikes to &quot;take control&quot; over the audio even though it isn&#x27;t switched on.\nThe (likely) reason this happens is because the hub my headset connects to\nis in fact, always on, and gets detected after &quot;Line Out&quot;. Pulseaudio has\na setting located in <code>/etc/pulse/default.pa</code> to automatically\nswitch to &quot;newly connected&quot; audio devices.</p><p>Since this is never what I want, I have to disable it by editing the file\nand commenting out <code>load-module module-switch-on-connect</code> like this:</p><pre class=\"prism-code language-ini\" style=\"background-color:#2a2734;color:#9a86fd\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"># load-module module-switch-on-connect</span></div></pre><p>Until next time :)</p><p>👋</p>","scope":{"title":"Fixing audio configuration after upgrading Ubuntu","description":"It is never fun when stuff breaks! This post is about me fixing some audio deficiencies after upgrading Ubuntu.","published":"2020-05-20T00:13:37Z"}},"slug":"fixing-audio-configuration-after-upgrading-ubuntu"},{"title":"And your metered paywall isn't part of my story, Medium","description":"I've been greeted by the same \"Your story isn't part of the metered paywall\" message for a while now, and figured it was time to make a change in the right direction.","published":"2019-06-10T04:36:22Z","readTimeInMinutes":3,"source":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Lately I've been getting more and more annoyed by the way Medium decides to do things.\\nSome time ago they decided to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://medium.com/membership\",\n    \"title\": \"Visit medium.com/membership\"\n  }, \"make everything premium\"), \", so after reading 5 stories you'd be greeted\\nwith something like:\"), mdx(Media, {\n    src: \"/media/posts/reader-paywall.jpg\",\n    alt: \"The reader paywall message on medium that appears after 5 posts\",\n    width: \"1448\",\n    height: \"864\",\n    mdxType: \"Media\"\n  }), mdx(\"p\", null, \"While this sucks, it's not uncommon for \\\"premium\\\" content to be paywalled. My problem\\nwith this setup is that I do not consider my content \\\"premium\\\" at all.\"), mdx(\"p\", null, \"I'm not saying that I think my posts are bad, but rather that I want \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"everyone\"), \" to be able to take\\nan unobstructed stroll through my list of posts and read whatever they like, any amount of times they\\nlike. All without asking for a single penny.\"), mdx(\"p\", null, \"Medium however, does not care about anything that is \\\"free\\\" or \\\"open\\\" at all. Seeing as every time I\\nopen one of my stories on Medium, the following message appears at the top:\"), mdx(Media, {\n    src: \"/media/posts/metered-paywall.png\",\n    alt: \"The metered paywall message on medium\",\n    width: \"872\",\n    height: \"112\",\n    mdxType: \"Media\"\n  }), mdx(\"h1\", null, \"\\\"Only you can see this message\\\"\"), mdx(\"p\", null, \"At first, I tried to close the popup. But of course, I should have known that it would not be that simple,\\nseeing as they are trying to get me to make my stories paid so they can benefit too.\"), mdx(Media, {\n    src: \"/media/posts/metered-paywall-never-closing\",\n    alt: \"Re-appearing message across page reloads\",\n    width: \"1531\",\n    height: \"482\",\n    mdxType: \"Media\"\n  }), mdx(\"p\", null, \"Medium really seems to want authors to read this message I guess. Since after reloading the page, the message re-appears,\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"every. single. time.\"), \" After trying to ignore it for a while, this popup started getting\\nunder my skin. I decided to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://help.medium.com/hc/en-us/articles/360018834334\",\n    \"title\": \"Visit Medium help section\"\n  }, \"learn some more\"), \" and found \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"one\"), \" barely\\ntwo-line paragraph of text that caught my eye:\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Stories that are not part of the paywall will only be distributed to your followers,\\nand are not eligible to earn money.\")), mdx(\"p\", null, \"So just because I do not want to make my stories part of a paywall, they aren't shared to anyone except my followers? Hmmn...\\n:man_facepalming:\"), mdx(\"h1\", null, \"Time for a change\"), mdx(\"p\", null, \"Being fed up with Medium tripping over its own ego, it is time for a change.\\nHaving my own website now means that I am no longer bound by some platform\\nthat forces or annoys me to do their bidding, refusing to share my stories otherwise.\"), mdx(\"p\", null, \"I enjoyed what Medium stood for in the past, but in the present it has become just another casual\\npay-2-view website.\"), mdx(\"p\", null, \"This is why I decided to unsub from Medium. The content that exists there will stay and\\nall new content that I post here will have a link shared on Medium for those who follow me.\"), mdx(\"p\", null, \"Enjoy reading ad-, tracker-, and subscription-free on my website, forever.\"), mdx(\"p\", null, \"Sidney Liebrand\"), mdx(\"p\", null, \"\\uD83D\\uDC4B\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>Lately I&#x27;ve been getting more and more annoyed by the way Medium decides to do things.\nSome time ago they decided to <a href=\"https://medium.com/membership\" title=\"Visit medium.com/membership\">make everything premium</a>, so after reading 5 stories you&#x27;d be greeted\nwith something like:</p><figure class=\"media_figure__1BF98\"><div class=\"lazyload-wrapper \"><div style=\"padding-bottom:59.66850828729282%\"></div></div><figcaption class=\"media_alt__xSx7S\">The reader paywall message on medium that appears after 5 posts</figcaption></figure><p>While this sucks, it&#x27;s not uncommon for &quot;premium&quot; content to be paywalled. My problem\nwith this setup is that I do not consider my content &quot;premium&quot; at all.</p><p>I&#x27;m not saying that I think my posts are bad, but rather that I want <em>everyone</em> to be able to take\nan unobstructed stroll through my list of posts and read whatever they like, any amount of times they\nlike. All without asking for a single penny.</p><p>Medium however, does not care about anything that is &quot;free&quot; or &quot;open&quot; at all. Seeing as every time I\nopen one of my stories on Medium, the following message appears at the top:</p><figure class=\"media_figure__1BF98\"><div class=\"lazyload-wrapper \"><div style=\"padding-bottom:12.844036697247708%\"></div></div><figcaption class=\"media_alt__xSx7S\">The metered paywall message on medium</figcaption></figure><h1 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"only-you-can-see-this-message\"></a><a class=\"heading_link__1aoFY\" href=\"#only-you-can-see-this-message\">&quot;Only you can see this message&quot;</a></h1><p>At first, I tried to close the popup. But of course, I should have known that it would not be that simple,\nseeing as they are trying to get me to make my stories paid so they can benefit too.</p><figure class=\"media_figure__1BF98\"><div class=\"lazyload-wrapper \"><div style=\"padding-bottom:31.48269105160026%\"></div></div><figcaption class=\"media_alt__xSx7S\">Re-appearing message across page reloads</figcaption></figure><p>Medium really seems to want authors to read this message I guess. Since after reloading the page, the message re-appears,\n<strong>every. single. time.</strong> After trying to ignore it for a while, this popup started getting\nunder my skin. I decided to <a href=\"https://help.medium.com/hc/en-us/articles/360018834334\" title=\"Visit Medium help section\">learn some more</a> and found <em>one</em> barely\ntwo-line paragraph of text that caught my eye:</p><blockquote><p>Stories that are not part of the paywall will only be distributed to your followers,\nand are not eligible to earn money.</p></blockquote><p>So just because I do not want to make my stories part of a paywall, they aren&#x27;t shared to anyone except my followers? Hmmn...\n:man_facepalming:</p><h1 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"time-for-a-change\"></a><a class=\"heading_link__1aoFY\" href=\"#time-for-a-change\">Time for a change</a></h1><p>Being fed up with Medium tripping over its own ego, it is time for a change.\nHaving my own website now means that I am no longer bound by some platform\nthat forces or annoys me to do their bidding, refusing to share my stories otherwise.</p><p>I enjoyed what Medium stood for in the past, but in the present it has become just another casual\npay-2-view website.</p><p>This is why I decided to unsub from Medium. The content that exists there will stay and\nall new content that I post here will have a link shared on Medium for those who follow me.</p><p>Enjoy reading ad-, tracker-, and subscription-free on my website, forever.</p><p>Sidney Liebrand</p><p>👋</p>","scope":{"title":"And your metered paywall isn't part of my story, Medium","description":"I've been greeted by the same \"Your story isn't part of the metered paywall\" message for a while now, and figured it was time to make a change in the right direction.","published":"2019-06-10T04:36:22Z"}},"slug":"and-your-metered-paywall-isnt-part-of-my-story-medium"},{"title":"Recruiters who call during working hours","description":"Any kind of cold-call from some random recruiter or sales rep is annoying enough as is. Imagine my frustration when I got a call from a recruiter who called on the <strong>company phone</strong> in the middle of a working day!","published":"2018-08-31T22:41:19Z","readTimeInMinutes":6,"source":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Media, {\n    src: \"/media/posts/recruiter-table-flip.svg\",\n    alt: \"person flipping a table\",\n    width: \"800\",\n    height: \"409\",\n    mdxType: \"Media\"\n  }), mdx(\"p\", null, \"So far I haven't been bothered too much by recruiters but every once in a while some moron decides to call me at work in the middle of the day.\\nThey probably don't even care about the fact that I'm already working happily and full-time at a company, they just call me up and say something like:\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Hi Sidney! My name is \", \"[insert random name]\", \" and I want to talk to you!\", mdx(\"br\", null), \"\\n\", \"\\u2014\", \" every recruiter ever\")), mdx(\"p\", null, \"The first time I got a call like this, it came from the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"company phone.\"), \"\\nSomeone had asked specifically for \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"my\"), \" help with a certain issue.\\nWhile uncommon to get a phone call like this, I thought it was probably something small and took the phone.\"), mdx(\"p\", null, \"I had a small conversation with this guy, he had all kinds of \\\"interests\\\" in all my \\\"skills\\\".\\nHe was unclear about what he wanted exactly.\\nI actually ended up giving him my phone number :man_facepalming: :man_facepalming: :man_facepalming: so that he would at least stop bothering me at that moment.\"), mdx(\"h2\", null, \"Big. Freaking. Mistake.\"), mdx(\"p\", null, \"He called me again some three to four months later.\\nI think I was awake for roughly ten minutes and just getting ready to eat my breakfast and have a cup of coffee before heading off to work.\"), mdx(\"p\", null, \"I can't recall what he said exactly but I do remember that he called to \\\"check up\\\" on me and see \\\"how I was doing\\\".\\nWhat a mug \", \"\\u2014\", \" I thought and I killed the conversation quickly because he just went on and on about stuff I didn't care about.\\nI was just trying to wake up and eat my breakfast...\"), mdx(\"p\", null, \"Then after another three to four months he started calling me during \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"working hours.\"), \"\\nI never answered simply because I see \\\"Amsterdam\\\" as location on my phone and already know it is a recruiter.\\nHe actually tried calling me multiple times a week at which point I \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"blocked his number\"), \".\"), mdx(\"p\", null, \"But this guy didn't actually stop there! Oh no, of course not... This was the moment when he thought it would be a fantastic idea to start calling \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"anonymously.\"), \"\\nAs in \\\"No Number\\\". Yeah...\"), mdx(\"h2\", null, \"Keep hanging up\"), mdx(\"p\", null, \"This was my tactic, I had \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"zero interest\"), \" in speaking with a guy like that again.\\nUp until now, all his efforts had been a tremendous waste of my time and focus.\\nHonestly, I thought he would get the hint after pressing \\\"Decline\\\" on about 6 more calls.\\nBoy was I wrong...\"), mdx(\"p\", null, \"First, let me tell you that I am not the type of guy to explode on someone.\\nUsually I am quite calm and controlled. I see no benefit in destructive arguments,\\nI much rather prefer a constructive discussion.\"), mdx(\"p\", null, \"This guy however... had pissed me off so much by now that when the next call hit,\\nI walked out of the office, answered the phone and just started shouting that\\nhe'd better piss off and never call again. Then I ended the call without even\\nlistening to what he had to say.\"), mdx(\"p\", null, \"To my surprise, he actually listened. After \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"cutting conversations,\\nblocking his number, ignoring him\"), \" and finally even \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"raging at him,\"), \"\\nhe too decided it was time to call it a loss. I am not proud of this behavior\\nbut when you treat me like a dog I'll treat you like a tree and piss all over you.\"), mdx(\"h2\", null, \"One down, infinite more to go\"), mdx(\"p\", null, \"Unfortunately, the battle did not end there. I did say \\\"first time\\\"\\nat the start of the post and as you have guessed correctly,\\nI received another call recently.\"), mdx(\"p\", null, \"This time, I was better prepared though.\\nI saw the location \\\"Amsterdam\\\" with a number that I hadn't blocked.\\nI don't have any friends in Amsterdam whose number I don't already\\nhave so I figured the only logical explanation was that this was another recruiter.\"), mdx(\"p\", null, \"See my first quote for what he opened with.\\nI told him \\\"Ahhh \", \"\\u2014\", \" you're a recruiter, aren't you?\\\".\\nHe stuttered while trying to come up with a tactical answer to this simple question.\"), mdx(\"p\", null, \"Failing miserably he replied: \\\"Well, you sure are direct...\\\" to which I replied:\\n\\\"I'll be even more direct. I have \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"zero\"), \" interest in what you have to offer so\\nI'm going to hang up now okay?\\\".\"), mdx(\"p\", null, \"He backed off instantly and I gave him his farewell without exploding in his face.\\nDespite the fact that we had a semi-normal ten second conversation,\\nwhy do recruiters call in the middle of the day? Why can't they just leave me\\n(or anyone for that matter) alone at work and call in the evening?\\nBetter yet, why don't they stop calling all together if you're\\nalready working somewhere?\"), mdx(\"h2\", null, \"I mean, what is wrong with you recruiters...\"), mdx(\"p\", null, \"I always think to myself that even if most recruiters are just leeches moving\\npeople from job A to job B, taking a grain of their monthly pay in the process,\\nthey would at least respect the fact that who they are calling may already have\\na full-time job and instead, call after working hours if at all?\"), mdx(\"p\", null, \"The worst offender here is still the first man-child who actually called on the\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"company phone\"), \". I mean \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"what the hell.\"), \" How does one even come up with the idea\\nto call on the number of the company that you're trying to rip a piece out of?\\nHe must have been pretty desperate and probably didn't have the resources to buy\\nmy number online. And then to continue with such stalker behavior as well, sigh... \\uD83D\\uDD95\"), mdx(\"h2\", null, \"Conclusion\"), mdx(\"p\", null, \"Despite all the cumbersome experiences I've had with them I do still have faith that there are recruiters out there that haven't gone mad.\\nThose that actually try to do what is best for both employer and employee.\"), mdx(\"p\", null, \"Most however, are just plain leeches that only move people for their own benefit.\\nThey usually don't know what you do or which technologies you are familiar with.\\nSometimes not even where to move you at the moment they decide to contact you.\\nAnd even if they do provide some level of detail, it's not their brilliant research.\\nIt's some algorithm which scrapes web pages for public information.\"), mdx(\"p\", null, \"I just ignore them and if that doesn't work, I pick up the phone,\\ndominate the conversation and end it in roughly ten seconds making sure to opt-out\\nof any call-list in the process.\"), mdx(\"p\", null, \"Until next time.\"), mdx(\"p\", null, \"Sidney Liebrand\", mdx(\"br\", null), \"\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Unrecruitable\")), mdx(\"p\", null, \"\\uD83D\\uDC4B\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<figure class=\"media_figure__1BF98\"><div class=\"lazyload-wrapper \"><div style=\"padding-bottom:51.125%\"></div></div><figcaption class=\"media_alt__xSx7S\">person flipping a table</figcaption></figure><p>So far I haven&#x27;t been bothered too much by recruiters but every once in a while some moron decides to call me at work in the middle of the day.\nThey probably don&#x27;t even care about the fact that I&#x27;m already working happily and full-time at a company, they just call me up and say something like:</p><blockquote><p>Hi Sidney! My name is <!-- -->[insert random name]<!-- --> and I want to talk to you!<br/>\n<!-- -->—<!-- --> every recruiter ever</p></blockquote><p>The first time I got a call like this, it came from the <em>company phone.</em>\nSomeone had asked specifically for <em>my</em> help with a certain issue.\nWhile uncommon to get a phone call like this, I thought it was probably something small and took the phone.</p><p>I had a small conversation with this guy, he had all kinds of &quot;interests&quot; in all my &quot;skills&quot;.\nHe was unclear about what he wanted exactly.\nI actually ended up giving him my phone number :man_facepalming: :man_facepalming: :man_facepalming: so that he would at least stop bothering me at that moment.</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"big-freaking-mistake\"></a><a class=\"heading_link__1aoFY\" href=\"#big-freaking-mistake\">Big. Freaking. Mistake.</a></h2><p>He called me again some three to four months later.\nI think I was awake for roughly ten minutes and just getting ready to eat my breakfast and have a cup of coffee before heading off to work.</p><p>I can&#x27;t recall what he said exactly but I do remember that he called to &quot;check up&quot; on me and see &quot;how I was doing&quot;.\nWhat a mug <!-- -->—<!-- --> I thought and I killed the conversation quickly because he just went on and on about stuff I didn&#x27;t care about.\nI was just trying to wake up and eat my breakfast...</p><p>Then after another three to four months he started calling me during <em>working hours.</em>\nI never answered simply because I see &quot;Amsterdam&quot; as location on my phone and already know it is a recruiter.\nHe actually tried calling me multiple times a week at which point I <em>blocked his number</em>.</p><p>But this guy didn&#x27;t actually stop there! Oh no, of course not... This was the moment when he thought it would be a fantastic idea to start calling <em>anonymously.</em>\nAs in &quot;No Number&quot;. Yeah...</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"keep-hanging-up\"></a><a class=\"heading_link__1aoFY\" href=\"#keep-hanging-up\">Keep hanging up</a></h2><p>This was my tactic, I had <em>zero interest</em> in speaking with a guy like that again.\nUp until now, all his efforts had been a tremendous waste of my time and focus.\nHonestly, I thought he would get the hint after pressing &quot;Decline&quot; on about 6 more calls.\nBoy was I wrong...</p><p>First, let me tell you that I am not the type of guy to explode on someone.\nUsually I am quite calm and controlled. I see no benefit in destructive arguments,\nI much rather prefer a constructive discussion.</p><p>This guy however... had pissed me off so much by now that when the next call hit,\nI walked out of the office, answered the phone and just started shouting that\nhe&#x27;d better piss off and never call again. Then I ended the call without even\nlistening to what he had to say.</p><p>To my surprise, he actually listened. After <em>cutting conversations,\nblocking his number, ignoring him</em> and finally even <em>raging at him,</em>\nhe too decided it was time to call it a loss. I am not proud of this behavior\nbut when you treat me like a dog I&#x27;ll treat you like a tree and piss all over you.</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"one-down-infinite-more-to-go\"></a><a class=\"heading_link__1aoFY\" href=\"#one-down-infinite-more-to-go\">One down, infinite more to go</a></h2><p>Unfortunately, the battle did not end there. I did say &quot;first time&quot;\nat the start of the post and as you have guessed correctly,\nI received another call recently.</p><p>This time, I was better prepared though.\nI saw the location &quot;Amsterdam&quot; with a number that I hadn&#x27;t blocked.\nI don&#x27;t have any friends in Amsterdam whose number I don&#x27;t already\nhave so I figured the only logical explanation was that this was another recruiter.</p><p>See my first quote for what he opened with.\nI told him &quot;Ahhh <!-- -->—<!-- --> you&#x27;re a recruiter, aren&#x27;t you?&quot;.\nHe stuttered while trying to come up with a tactical answer to this simple question.</p><p>Failing miserably he replied: &quot;Well, you sure are direct...&quot; to which I replied:\n&quot;I&#x27;ll be even more direct. I have <strong>zero</strong> interest in what you have to offer so\nI&#x27;m going to hang up now okay?&quot;.</p><p>He backed off instantly and I gave him his farewell without exploding in his face.\nDespite the fact that we had a semi-normal ten second conversation,\nwhy do recruiters call in the middle of the day? Why can&#x27;t they just leave me\n(or anyone for that matter) alone at work and call in the evening?\nBetter yet, why don&#x27;t they stop calling all together if you&#x27;re\nalready working somewhere?</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"i-mean-what-is-wrong-with-you-recruiters\"></a><a class=\"heading_link__1aoFY\" href=\"#i-mean-what-is-wrong-with-you-recruiters\">I mean, what is wrong with you recruiters...</a></h2><p>I always think to myself that even if most recruiters are just leeches moving\npeople from job A to job B, taking a grain of their monthly pay in the process,\nthey would at least respect the fact that who they are calling may already have\na full-time job and instead, call after working hours if at all?</p><p>The worst offender here is still the first man-child who actually called on the\n<em>company phone</em>. I mean <em>what the hell.</em> How does one even come up with the idea\nto call on the number of the company that you&#x27;re trying to rip a piece out of?\nHe must have been pretty desperate and probably didn&#x27;t have the resources to buy\nmy number online. And then to continue with such stalker behavior as well, sigh... 🖕</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"conclusion\"></a><a class=\"heading_link__1aoFY\" href=\"#conclusion\">Conclusion</a></h2><p>Despite all the cumbersome experiences I&#x27;ve had with them I do still have faith that there are recruiters out there that haven&#x27;t gone mad.\nThose that actually try to do what is best for both employer and employee.</p><p>Most however, are just plain leeches that only move people for their own benefit.\nThey usually don&#x27;t know what you do or which technologies you are familiar with.\nSometimes not even where to move you at the moment they decide to contact you.\nAnd even if they do provide some level of detail, it&#x27;s not their brilliant research.\nIt&#x27;s some algorithm which scrapes web pages for public information.</p><p>I just ignore them and if that doesn&#x27;t work, I pick up the phone,\ndominate the conversation and end it in roughly ten seconds making sure to opt-out\nof any call-list in the process.</p><p>Until next time.</p><p>Sidney Liebrand<br/>\n<strong>Unrecruitable</strong></p><p>👋</p>","scope":{"title":"Recruiters who call during working hours","description":"Any kind of cold-call from some random recruiter or sales rep is annoying enough as is. Imagine my frustration when I got a call from a recruiter who called on the <strong>company phone</strong> in the middle of a working day!","published":"2018-08-31T22:41:19Z"}},"slug":"recruiters-who-call-during-working-hours"},{"title":"Codi.vim + fullscreen buffer","description":"Learn how to set up Codi.vim to create a fullscreen scratch buffer that also works with Vim splits. We will take a look at wrapping the <code>Codi</code> command and improving the buffer name(s) as seen in <code>:ls</code>.","published":"2018-08-27T07:55:24Z","readTimeInMinutes":5,"source":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Media, {\n    src: \"/media/posts/codi-banner.png\",\n    alt: \"A Codi.vim fullscreen buffer\",\n    width: \"1672\",\n    height: \"972\",\n    \"class\": \"wide\",\n    mdxType: \"Media\"\n  }), mdx(\"p\", null, \"Recently I discovered \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/metakirby5/codi.vim\",\n    \"title\": \"Visit metakirby5/codi.vim on github\"\n  }, \"codi.vim\"), \" on \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://vimawesome.com/?q=cat%3Aother\",\n    \"title\": \"Visit vimawesome.com 'Other' category plugin\"\n  }, \"vimawesome.com\"), \".\\nIt sells itself as an \\\"interactive scratchpad for hackers\\\".\\nAfter playing around with it for 5 minutes I was completely sold.\"), mdx(\"p\", null, \"I pair program on a weekly basis using various different languages.\\nI used to turn to a REPL for help but this quickly becomes annoying when trying to write multi-line expressions.\\nMaking a typo in the middle of a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"do ... end\"), \" block in Ruby is quite costly:\"), mdx(Media, {\n    src: \"/media/posts/pry-multiline-typo\",\n    alt: \"Multiline expression typo in Pry\",\n    width: \"1033\",\n    height: \"250\",\n    mdxType: \"Media\"\n  }), mdx(\"p\", null, \"Another thing to note here is that code and results are printed sequentially.\\nThis means that any code you write goes off-screen at least twice as fast because the result is printed below it.\"), mdx(\"p\", null, \"In case of errors and stack traces it can become a lot worse as well.\\nCodi solves all of this by allowing you to type in one pane and it prints the results in a separate pane side-by-side:\"), mdx(Media, {\n    src: \"/media/posts/ruby-demo\",\n    alt: \"Demo of Ruby in Codi.vim\",\n    width: \"1033\",\n    height: \"141\",\n    mdxType: \"Media\"\n  }), mdx(\"p\", null, \"This feature, and the fact that I can toggle this buffer for \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"multiple programming languages\"), \" using a single mapping blew my mind but as with anything,\\nit requires some more battle testing to see if it works in common scenario's.\"), mdx(\"h2\", null, \"Battle testing\"), mdx(\"p\", null, \"This is where I found out that when used with a split, it will not be fullscreen but rather split the current buffer:\"), mdx(Media, {\n    src: \"/media/posts/split-behavior\",\n    alt: \"Default split behavior\",\n    width: \"1033\",\n    height: \"496\",\n    mdxType: \"Media\"\n  }), mdx(\"p\", null, \"At this point I started experimenting with a small \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://gist.github.com/SidOfc/5218a7a9f12ed2105a9b052ca8e6707e\",\n    \"title\": \"Visit codi.vim snippet github gist\"\n  }, \"vimscript snippet\"), \" in my .vimrc.\\nExcluding comments and blanks it is 10 LoC.\\nIt wraps the default \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Codi\"), \" command in a function which creates an empty buffer in a new tab with the right filetype set before finally running \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Codi\"), \" itself.\\nThis creates the fullscreen split that I wanted:\"), mdx(Media, {\n    src: \"/media/posts/wrapped-split-behavior\",\n    alt: \"Enhanced split behavior\",\n    width: \"1033\",\n    height: \"496\",\n    mdxType: \"Media\"\n  }), mdx(\"h2\", null, \"Problem solved, or maybe not?\"), mdx(\"p\", null, \"All good so far, but upon closing the buffer, the contents of the buffer are deleted.\\nWhile automatically clearing the scratchpad is nice, sometimes I want to go back and forth between the code and the scratchpad to add additional code or compare the existing code with the scratchpad code.\"), mdx(\"p\", null, \"This required a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://gist.github.com/SidOfc/3f94244a8b08406710b6669052f66d62\",\n    \"title\": \"Visit second codi.vim snippet github gist\"\n  }, \"second iteration\"), \" of the original vimscript snippet.\\nThis time I did not want to delete the buffer but hide it instead, keeping the code that was already written in it.\\nAfter hiding the buffer, its \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tabpagenr()\"), \" is stored in a dictionary keyed by the filetype of the buffer.\"), mdx(\"p\", null, \"Then, when toggling codi for a filetype that is stored, switch to that tab instead of opening a new one (there is even a check if that tab actually exists):\"), mdx(Media, {\n    src: \"/media/posts/wrapped-split-behavior-2\",\n    alt: \"Enhanced split behavior version 2\",\n    width: \"1033\",\n    height: \"496\",\n    mdxType: \"Media\"\n  }), mdx(\"p\", null, \"And there we go! Aside from the fact that the buffer now remains, the name is also \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"scratch::ruby\"), \".\\nThis is a bit more descriptive than having just \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[Scratch]\"), \" in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \":ls\"), \" output when multiple codi buffers of a different filetype are active.\"), mdx(\"h2\", null, \"Let's wrap it in an issue\"), mdx(\"p\", null, \"It was a fun experience tweaking this plugin to my liking.\\nI thought this feature would be so awesome that I even proposed it in an \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/metakirby5/codi.vim/issues/94\",\n    \"title\": \"View metakirby5/codi.vim issue #94\"\n  }, \"issue\"), \".\\nUnfortunately it didn't make it since it was too workflow specific.\"), mdx(\"p\", null, \"As you may have been able to see in the issue though, the code in that snippet is \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"slighty\"), \" different from the example gist linked in this post.\\nThe main difference is this line which resizes codi to 50% of the buffer width whenever a new instance is spawned:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-viml\"\n  }, \"\\\" since it is fullscreen, I'd like a 50/50 split\\nlet g:codi#width = winwidth(winnr()) / 2\\n\")), mdx(\"p\", null, \"The author thought it would be a nice addition to have percentage width support and for the snippets to live elsewhere for others to use in their .vimrc.\\nSo I went ahead and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/metakirby5/codi.vim/pull/95\",\n    \"title\": \"View metakirby5/codi.vim pull request #95\"\n  }, \"wrote a PR\"), \" for that instead, this is why you see\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"let g:codi#width = 50.0\"), \" in the gists :)\"), mdx(\"h2\", null, \"Conclusion\"), mdx(\"p\", null, \"All in all it was a great experience discovering this plugin.\\nIt is like one of those rare cases with a song where after a few seconds \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"you just know\"), \" \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"\\\"this song is awesome\\\"\"), \".\\nI believe I'll be using it for a long time to come for quickly testing and showing some code.\"), mdx(\"p\", null, \"This also gave me the chance to write my first non-organization bound PR for a project which I like and now also use.\\nSomething which I wanted to do for a long time but couldn't really find the right project to contribute to.\\nI want to thank \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://medium.com/@metakirby5\",\n    \"title\": \"View @metakirby5 on Medium\"\n  }, \"Ethan Chan\"), \" for his awesome plugin and for being a kind and friendly maintainer!\"), mdx(\"p\", null, \"That's it! If you want a fullscreen workflow with codi.vim, you have it.\\nIf you want to persist the code in the buffer, you have it.\\nIf you have a great idea, comment on this post!\"), mdx(\"p\", null, \"Until next time.\"), mdx(\"p\", null, \"\\uD83D\\uDC4B\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<figure class=\"media_figure__1BF98\"><div class=\"lazyload-wrapper \"><div style=\"padding-bottom:58.133971291866025%\"></div></div><figcaption class=\"media_alt__xSx7S\">A Codi.vim fullscreen buffer</figcaption></figure><p>Recently I discovered <a href=\"https://github.com/metakirby5/codi.vim\" title=\"Visit metakirby5/codi.vim on github\">codi.vim</a> on <a href=\"https://vimawesome.com/?q=cat%3Aother\" title=\"Visit vimawesome.com &#x27;Other&#x27; category plugin\">vimawesome.com</a>.\nIt sells itself as an &quot;interactive scratchpad for hackers&quot;.\nAfter playing around with it for 5 minutes I was completely sold.</p><p>I pair program on a weekly basis using various different languages.\nI used to turn to a REPL for help but this quickly becomes annoying when trying to write multi-line expressions.\nMaking a typo in the middle of a <code>do ... end</code> block in Ruby is quite costly:</p><figure class=\"media_figure__1BF98\"><div class=\"lazyload-wrapper \"><div style=\"padding-bottom:24.20135527589545%\"></div></div><figcaption class=\"media_alt__xSx7S\">Multiline expression typo in Pry</figcaption></figure><p>Another thing to note here is that code and results are printed sequentially.\nThis means that any code you write goes off-screen at least twice as fast because the result is printed below it.</p><p>In case of errors and stack traces it can become a lot worse as well.\nCodi solves all of this by allowing you to type in one pane and it prints the results in a separate pane side-by-side:</p><figure class=\"media_figure__1BF98\"><div class=\"lazyload-wrapper \"><div style=\"padding-bottom:13.649564375605033%\"></div></div><figcaption class=\"media_alt__xSx7S\">Demo of Ruby in Codi.vim</figcaption></figure><p>This feature, and the fact that I can toggle this buffer for <em>multiple programming languages</em> using a single mapping blew my mind but as with anything,\nit requires some more battle testing to see if it works in common scenario&#x27;s.</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"battle-testing\"></a><a class=\"heading_link__1aoFY\" href=\"#battle-testing\">Battle testing</a></h2><p>This is where I found out that when used with a split, it will not be fullscreen but rather split the current buffer:</p><figure class=\"media_figure__1BF98\"><div class=\"lazyload-wrapper \"><div style=\"padding-bottom:48.01548886737657%\"></div></div><figcaption class=\"media_alt__xSx7S\">Default split behavior</figcaption></figure><p>At this point I started experimenting with a small <a href=\"https://gist.github.com/SidOfc/5218a7a9f12ed2105a9b052ca8e6707e\" title=\"Visit codi.vim snippet github gist\">vimscript snippet</a> in my .vimrc.\nExcluding comments and blanks it is 10 LoC.\nIt wraps the default <code>Codi</code> command in a function which creates an empty buffer in a new tab with the right filetype set before finally running <code>Codi</code> itself.\nThis creates the fullscreen split that I wanted:</p><figure class=\"media_figure__1BF98\"><div class=\"lazyload-wrapper \"><div style=\"padding-bottom:48.01548886737657%\"></div></div><figcaption class=\"media_alt__xSx7S\">Enhanced split behavior</figcaption></figure><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"problem-solved-or-maybe-not\"></a><a class=\"heading_link__1aoFY\" href=\"#problem-solved-or-maybe-not\">Problem solved, or maybe not?</a></h2><p>All good so far, but upon closing the buffer, the contents of the buffer are deleted.\nWhile automatically clearing the scratchpad is nice, sometimes I want to go back and forth between the code and the scratchpad to add additional code or compare the existing code with the scratchpad code.</p><p>This required a <a href=\"https://gist.github.com/SidOfc/3f94244a8b08406710b6669052f66d62\" title=\"Visit second codi.vim snippet github gist\">second iteration</a> of the original vimscript snippet.\nThis time I did not want to delete the buffer but hide it instead, keeping the code that was already written in it.\nAfter hiding the buffer, its <code>tabpagenr()</code> is stored in a dictionary keyed by the filetype of the buffer.</p><p>Then, when toggling codi for a filetype that is stored, switch to that tab instead of opening a new one (there is even a check if that tab actually exists):</p><figure class=\"media_figure__1BF98\"><div class=\"lazyload-wrapper \"><div style=\"padding-bottom:48.01548886737657%\"></div></div><figcaption class=\"media_alt__xSx7S\">Enhanced split behavior version 2</figcaption></figure><p>And there we go! Aside from the fact that the buffer now remains, the name is also <code>scratch::ruby</code>.\nThis is a bit more descriptive than having just <code>[Scratch]</code> in <code>:ls</code> output when multiple codi buffers of a different filetype are active.</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"let-s-wrap-it-in-an-issue\"></a><a class=\"heading_link__1aoFY\" href=\"#let-s-wrap-it-in-an-issue\">Let&#x27;s wrap it in an issue</a></h2><p>It was a fun experience tweaking this plugin to my liking.\nI thought this feature would be so awesome that I even proposed it in an <a href=\"https://github.com/metakirby5/codi.vim/issues/94\" title=\"View metakirby5/codi.vim issue #94\">issue</a>.\nUnfortunately it didn&#x27;t make it since it was too workflow specific.</p><p>As you may have been able to see in the issue though, the code in that snippet is <em>slighty</em> different from the example gist linked in this post.\nThe main difference is this line which resizes codi to 50% of the buffer width whenever a new instance is spawned:</p><pre class=\"prism-code language-viml\" style=\"background-color:#2a2734;color:#9a86fd\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token comment\" style=\"color:#9390a1\">&quot; since it is fullscreen, I&#x27;d like a 50/50 split</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#ffcc99\">let</span><span class=\"token plain\"> g</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">codi</span><span class=\"token punctuation\" style=\"color:#6c6783\">#</span><span class=\"token plain\">width </span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#fa60c3\">winwidth</span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token function\" style=\"color:#fa60c3\">winnr</span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#e09142\">/</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#e09142\">2</span></div></pre><p>The author thought it would be a nice addition to have percentage width support and for the snippets to live elsewhere for others to use in their .vimrc.\nSo I went ahead and <a href=\"https://github.com/metakirby5/codi.vim/pull/95\" title=\"View metakirby5/codi.vim pull request #95\">wrote a PR</a> for that instead, this is why you see\n<code>let g:codi#width = 50.0</code> in the gists :)</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"conclusion\"></a><a class=\"heading_link__1aoFY\" href=\"#conclusion\">Conclusion</a></h2><p>All in all it was a great experience discovering this plugin.\nIt is like one of those rare cases with a song where after a few seconds <strong>you just know</strong> <em>&quot;this song is awesome&quot;</em>.\nI believe I&#x27;ll be using it for a long time to come for quickly testing and showing some code.</p><p>This also gave me the chance to write my first non-organization bound PR for a project which I like and now also use.\nSomething which I wanted to do for a long time but couldn&#x27;t really find the right project to contribute to.\nI want to thank <a href=\"https://medium.com/@metakirby5\" title=\"View @metakirby5 on Medium\">Ethan Chan</a> for his awesome plugin and for being a kind and friendly maintainer!</p><p>That&#x27;s it! If you want a fullscreen workflow with codi.vim, you have it.\nIf you want to persist the code in the buffer, you have it.\nIf you have a great idea, comment on this post!</p><p>Until next time.</p><p>👋</p>","scope":{"title":"Codi.vim + fullscreen buffer","description":"Learn how to set up Codi.vim to create a fullscreen scratch buffer that also works with Vim splits. We will take a look at wrapping the <code>Codi</code> command and improving the buffer name(s) as seen in <code>:ls</code>.","published":"2018-08-27T07:55:24Z"}},"slug":"codi-vim-fullscreen-buffer"},{"title":"Vim tip: persistent undo","description":"Usually, when you open a file in your editor, make some changes, save and close, you lose the ability to <kbd>ctrl</kbd>+<kbd>Z</kbd>. Vim has a built in mechanism to persist changes made to files on disk. This may not sound that exciting, but what if your editor crashes while you have a set of changes you may want to revert stored?","published":"2018-08-04T20:17:52Z","readTimeInMinutes":4,"source":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Sometimes I happen to close a buffer that I had open for a while and modified here and there.\\nThen I find out that the code from two or three edits ago in that file actually worked better and I want to revert but upon reopening the file, pressing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"u\"), \" shows an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Already at oldest change\"), \" message...\"), mdx(\"p\", null, \"The second thing I try is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git\"), \" to see the unchanged file but this usually takes me way to far back to be of any use.\\nThis is when I usually realize that I can't get back to that point by using any kind of \\\"undo\\\" functionality.\"), mdx(\"p\", null, \"Finally, the last wall of defense is my brain, small changes from the last edit are usually still lingering in my mind and I can revert them from memory.\\nAnything large or multi-line, though \", \"\\u2014\", \" forget about it.\"), mdx(\"p\", null, \"None of the above so far provide a good reliable solution out of the box, but one day while randomly reading through \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \":h undo\"), \" I found a particularly useful section: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \":h undo-persistence\"), \".\"), mdx(\"h2\", null, \"Persistent undo\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"undo-persistence\"), \" manual explains that Vim indeed destroys the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"undo tree \"), \"when a buffer is \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"unloaded.\"), \"\\nTo understand exactly what this means, I'll give a small explanation.\"), mdx(\"p\", null, \"In Vim, a buffer is basically a file \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"loaded\"), \" in memory.\\nWhenever a file is loaded in memory, Vim keeps track of its \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"undo tree\"), \" \", \"\\u2014\", \" this is the construct that keeps track of changes and enables one to undo and redo them.\\nAs long as the file remains in memory, the undo tree is kept with it.\"), mdx(\"p\", null, \"As soon as the buffer is \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"unloaded\"), \" using for example \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \":[bufnum]bd\"), \", it is cleared from memory and the undo tree is destroyed with it.\\nThis is the part that is problematic if you want to revert back to some edit before the last time you re-opened the file in Vim.\"), mdx(\"p\", null, \"Persistent undo solves this by storing the changes in a file instead of in-memory and linked to the loaded buffer, allowing undo to go back and forth beyond just the set of changes since the file was last opened.\\nYou could go back to yesterday's changes or those of two weeks ago for example.\"), mdx(\"h2\", null, \"Setup\"), mdx(\"p\", null, \"Fortunately, not much is needed to set this up.\\nVim needs a directory to store the persistent undo history and two settings need to be tweaked / enabled.\\nThis is the snippet I have in my Vim config that handles this automatically:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-viml\"\n  }, \"\\\" guard for distributions lacking the persistent_undo feature.\\nif has('persistent_undo')\\n    \\\" define a path to store persistent_undo files.\\n    let target_path = expand('~/.config/vim-persisted-undo/')\\n\\n    \\\" create the directory and any parent directories\\n    \\\" if the location does not exist.\\n    if !isdirectory(target_path)\\n        call system('mkdir -p ' . target_path)\\n    endif\\n\\n    \\\" point Vim to the defined undo directory.\\n    let &undodir = target_path\\n\\n    \\\" finally, enable undo persistence.\\n    set undofile\\nendif\\n\")), mdx(\"p\", null, \"The above VimL checks if the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"persistent_undo\"), \" feature is supported.\\nDefines a path \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"~/.config/vim-persisted-undo/\"), \" to store the files.\\nCreates the directory if it doesn't exist and sets the necessary undodir and undofile options.\"), mdx(\"h2\", null, \"A simple example\"), mdx(\"p\", null, \"Now let's go through a simple exercise to see if this works.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"After you've added the snippet or enabled this feature manually, exit Vim and run the following command in the terminal:vim sample.txt.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Write some text and save the file. Then make another change by adding, removing, or changing the content of the file and save it again.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The file now has some undo history we can use. Exit Vim and open the file again from the terminal: vim sample.txt.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Now, pressing u should work as expected and correctly undo the change you made before closing the file.\")), mdx(\"h2\", null, \"Profit\"), mdx(\"p\", null, \"That's it! You now have access to any edit you made at any point in time for any particular file.\\nIf you accidentally close a buffer, just re-open it and your undo tree will be like it was before closing it.\"), mdx(\"p\", null, \"I hope that you enjoyed this post and got something useful out of it.\\nIf there is anything I missed I'd love to hear about it in the comments.\\nLikewise if I'm wrong or anything is unclear, I'll happily stand corrected.\"), mdx(\"p\", null, \"Until next time :)\"), mdx(\"p\", null, \"\\uD83D\\uDC4B\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>Sometimes I happen to close a buffer that I had open for a while and modified here and there.\nThen I find out that the code from two or three edits ago in that file actually worked better and I want to revert but upon reopening the file, pressing <code>u</code> shows an <code>Already at oldest change</code> message...</p><p>The second thing I try is <code>git</code> to see the unchanged file but this usually takes me way to far back to be of any use.\nThis is when I usually realize that I can&#x27;t get back to that point by using any kind of &quot;undo&quot; functionality.</p><p>Finally, the last wall of defense is my brain, small changes from the last edit are usually still lingering in my mind and I can revert them from memory.\nAnything large or multi-line, though <!-- -->—<!-- --> forget about it.</p><p>None of the above so far provide a good reliable solution out of the box, but one day while randomly reading through <code>:h undo</code> I found a particularly useful section: <code>:h undo-persistence</code>.</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"persistent-undo\"></a><a class=\"heading_link__1aoFY\" href=\"#persistent-undo\">Persistent undo</a></h2><p>The <code>undo-persistence</code> manual explains that Vim indeed destroys the <em>undo tree </em>when a buffer is <em>unloaded.</em>\nTo understand exactly what this means, I&#x27;ll give a small explanation.</p><p>In Vim, a buffer is basically a file <em>loaded</em> in memory.\nWhenever a file is loaded in memory, Vim keeps track of its <em>undo tree</em> <!-- -->—<!-- --> this is the construct that keeps track of changes and enables one to undo and redo them.\nAs long as the file remains in memory, the undo tree is kept with it.</p><p>As soon as the buffer is <em>unloaded</em> using for example <code>:[bufnum]bd</code>, it is cleared from memory and the undo tree is destroyed with it.\nThis is the part that is problematic if you want to revert back to some edit before the last time you re-opened the file in Vim.</p><p>Persistent undo solves this by storing the changes in a file instead of in-memory and linked to the loaded buffer, allowing undo to go back and forth beyond just the set of changes since the file was last opened.\nYou could go back to yesterday&#x27;s changes or those of two weeks ago for example.</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"setup\"></a><a class=\"heading_link__1aoFY\" href=\"#setup\">Setup</a></h2><p>Fortunately, not much is needed to set this up.\nVim needs a directory to store the persistent undo history and two settings need to be tweaked / enabled.\nThis is the snippet I have in my Vim config that handles this automatically:</p><pre class=\"prism-code language-viml\" style=\"background-color:#2a2734;color:#9a86fd\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token comment\" style=\"color:#9390a1\">&quot; guard for distributions lacking the persistent_undo feature.</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#ffcc99\">if</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#fa60c3\">has</span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;persistent_undo&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">    </span><span class=\"token comment\" style=\"color:#9390a1\">&quot; define a path to store persistent_undo files.</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#ffcc99\">let</span><span class=\"token plain\"> target_path </span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#fa60c3\">expand</span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;~/.config/vim-persisted-undo/&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\" style=\"display:inline-block\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">    </span><span class=\"token comment\" style=\"color:#9390a1\">&quot; create the directory and any parent directories</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">    </span><span class=\"token comment\" style=\"color:#9390a1\">&quot; if the location does not exist.</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#ffcc99\">if</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#e09142\">!</span><span class=\"token function\" style=\"color:#fa60c3\">isdirectory</span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token plain\">target_path</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">        </span><span class=\"token keyword\" style=\"color:#ffcc99\">call</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#fa60c3\">system</span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;mkdir -p &#x27;</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#e09142\">.</span><span class=\"token plain\"> target_path</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#ffcc99\">endif</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\" style=\"display:inline-block\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">    </span><span class=\"token comment\" style=\"color:#9390a1\">&quot; point Vim to the defined undo directory.</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#ffcc99\">let</span><span class=\"token plain\"> &amp;undodir </span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token plain\"> target_path</span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\" style=\"display:inline-block\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">    </span><span class=\"token comment\" style=\"color:#9390a1\">&quot; finally, enable undo persistence.</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#ffcc99\">set</span><span class=\"token plain\"> undofile</span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#ffcc99\">endif</span></div></pre><p>The above VimL checks if the <code>persistent_undo</code> feature is supported.\nDefines a path <code>~/.config/vim-persisted-undo/</code> to store the files.\nCreates the directory if it doesn&#x27;t exist and sets the necessary undodir and undofile options.</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"a-simple-example\"></a><a class=\"heading_link__1aoFY\" href=\"#a-simple-example\">A simple example</a></h2><p>Now let&#x27;s go through a simple exercise to see if this works.</p><ol><li>After you&#x27;ve added the snippet or enabled this feature manually, exit Vim and run the following command in the terminal:vim sample.txt.</li><li>Write some text and save the file. Then make another change by adding, removing, or changing the content of the file and save it again.</li><li>The file now has some undo history we can use. Exit Vim and open the file again from the terminal: vim sample.txt.</li><li>Now, pressing u should work as expected and correctly undo the change you made before closing the file.</li></ol><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"profit\"></a><a class=\"heading_link__1aoFY\" href=\"#profit\">Profit</a></h2><p>That&#x27;s it! You now have access to any edit you made at any point in time for any particular file.\nIf you accidentally close a buffer, just re-open it and your undo tree will be like it was before closing it.</p><p>I hope that you enjoyed this post and got something useful out of it.\nIf there is anything I missed I&#x27;d love to hear about it in the comments.\nLikewise if I&#x27;m wrong or anything is unclear, I&#x27;ll happily stand corrected.</p><p>Until next time :)</p><p>👋</p>","scope":{"title":"Vim tip: persistent undo","description":"Usually, when you open a file in your editor, make some changes, save and close, you lose the ability to <kbd>ctrl</kbd>+<kbd>Z</kbd>. Vim has a built in mechanism to persist changes made to files on disk. This may not sound that exciting, but what if your editor crashes while you have a set of changes you may want to revert stored?","published":"2018-08-04T20:17:52Z"}},"slug":"vim-tip-persistent-undo"},{"title":"How FZF and ripgrep improved my workflow","description":"In my never ending quest for simplicity I recently discovered FZF and ripgrep. Two command-line tools that have the potential to make every dag programming tasks easier. In this post I will explain how I use these tools to do things in a matter of keystrokes rather than having to re-google that command you keep forgetting <strong>every. single. time.</strong>.","published":"2018-06-24T13:33:37Z","updated":"2019-07-10T21:10:00Z","readTimeInMinutes":11,"source":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Today I want to talk about \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/junegunn/fzf\",\n    \"title\": \"Visit junegunn/fzf on github\"\n  }, \"fzf\"), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/BurntSushi/ripgrep\",\n    \"title\": \"Visit BurntSushi/ripgrep on github\"\n  }, \"ripgrep\"), \",\\ntwo tools I use all the time when working in Vim and the terminal.\\nThey have become an absolutely \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"vital\"), \" part of my workflow.\\nEver since I started using them I can't imagine myself functioning\\nwithout them anymore.\"), mdx(\"h2\", null, \"What is FZF?\"), mdx(\"p\", null, \"FZF is a fuzzy finder for your terminal, it is a command line application that\\nfilters each line from given input with a query that the user types.\\nWhen the query changes, the results update in realtime.\"), mdx(Media, {\n    src: \"/media/posts/fzf-ls-example\",\n    alt: \"FZF + LS example\",\n    width: \"768\",\n    height: \"180\",\n    mdxType: \"Media\"\n  }), mdx(\"p\", null, \"After finding the file you're looking for, hitting \", mdx(\"kbd\", null, \"enter\"), \" prints the highlighted\\nentry. You can combine this with your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$EDITOR\"), \" variable to search for a file and then edit\\nit for example.\"), mdx(Media, {\n    src: \"/media/posts/open-changelog-neovim\",\n    alt: \"Open CHANGELOG.md in NeoVim\",\n    width: \"768\",\n    height: \"180\",\n    mdxType: \"Media\"\n  }), mdx(\"p\", null, \"Of course this is only a simple example. The possibilities with FZF are endless.\\nThere are countless ways in which you can use it to filter input and use that in\\nanother command. We'll dive more into that later.\"), mdx(\"h2\", null, \"What about ripgrep?\"), mdx(\"p\", null, \"As it already says in the name, it is another \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"grep\"), \" program. Ripgrep is written\\nin rust and one of its primary goals is to be the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"fastest\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"grep\"), \" of them all.\\nIt performs amazing even in a larger code base.\"), mdx(Media, {\n    src: \"/media/posts/rg-ls-fzf\",\n    alt: \"Ripgrep list files with FZF\",\n    width: \"768\",\n    height: \"180\",\n    mdxType: \"Media\"\n  }), mdx(\"p\", null, \"Ripgrep has many options to explore, there are way to many to list here.\\nSome of the options I use most often with ripgrep are:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"--files\"), \" \", \"\\u2014\", \" List files which ripgrep will search instead of searching them\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"--hidden\"), \" \", \"\\u2014\", \" Show hidden (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".file\"), \") files\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"--no-ignore-vcs\"), \" \", \"\\u2014\", \" Show files ignored by your VCS\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"--vimgrep\"), \" \", \"\\u2014\", \" Results are returned on a single line in vimgrep format\"))), mdx(\"h2\", null, \"The problems they solve\"), mdx(\"p\", null, \"Both these tools can be combined in various scenario's that would have otherwise\\ntaken multiple long commands to execute. This ranges from killing processes to\\nmanaging plugins to being able to find (in) files.\"), mdx(\"p\", null, \"These actions are usually involved when I try to do something more complex:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"googling the right command\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"look around for the right line in the output\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"refine \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"grep\"), \" pattern\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"retrying the command\"))), mdx(\"p\", null, \"At this point you'll realize that you're not actually searching for something\\nanymore. You find yourself looking for ways to perform your search instead :/\"), mdx(\"p\", null, \"My solution to \", mdx(\"strike\", null, \"not being able\"), \" being too lazy to memorize these commands is to create\\nsmall shell wrappers for them. I learn / read docs on a command to figure out how to\\napply it for my use case(s). Then I write the wrapper based on the ideas I have about\\nhow it should work.\"), mdx(\"p\", null, \"With that being said, let's dive right in with a common case:\"), mdx(\"h2\", null, \"Killing processes\"), mdx(\"p\", null, \"One example is stopping an out of control process. First you have to find the\\nprocess ID by issuing some command like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ps -ef | grep [PROCESS NAME]\"), \".\"), mdx(\"p\", null, \"Which is then followed by a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"kill\"), \" command with one of the process IDs you want\\nto kill. The downsides to this are that I have to use two commands. Filter the\\noutput before seeing it or knowing how it looks and issuing an extra command\\nto actually stop the process.\"), mdx(\"p\", null, \"To make this easier, I wrote a small wrapper (first in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/SidOfc/dotfiles/blob/d07fa3862ed065c2a5a7f1160ae98416bfe2e1ee/zsh/kp\",\n    \"title\": \"View kp zsh script\"\n  }, \"zsh\"), \",\\nlater migrated to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/SidOfc/dotfiles/blob/e94b96b908479950186e42a3709511a0afe300e4/.config/fish/functions/kp.fish\",\n    \"title\": \"View kp fish script\"\n  }, \"fish\"), \") called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"kp\"), \".\\nIt lists processes using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ps -ef\"), \" and pipes it to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fzf\"), \".\"), mdx(Media, {\n    src: \"/media/posts/kill-with-kp\",\n    alt: \"Killing processes using kp\",\n    width: \"768\",\n    height: \"180\",\n    mdxType: \"Media\"\n  }), mdx(\"p\", null, \"This command opens an FZF window with your processes. FZF has an option to allow\\nselecting multiple entries (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-m flag\"), \"). When \", mdx(\"kbd\", null, \"enter\"), \" is pressed, both marked\\n(light red \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \">\"), \" symbols) processes will be shut down. When changing your query,\\nselected entries will stay selected. This is convenient for killing different\\nprocesses in a single run.\"), mdx(\"p\", null, \"After killing some processes, the command will rerun itself. I can use \", mdx(\"kbd\", null, \"escape\"), \" to\\nexit from this specific window.\"), mdx(\"h2\", null, \"Installing brew plugins\"), mdx(\"p\", null, \"Another use case is to install, update or purge \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/Homebrew\",\n    \"title\": \"Visit Homebrew on github\"\n  }, \"brew\"), \"\\nplugins from your system. When you are looking for a brew package, a common pattern\\nis to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"brew search\"), \" together with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"grep\"), \" to find out if it exists.\"), mdx(\"p\", null, \"After that you'll most likely run a command like: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"brew install [PACKAGE]\"), \" to install it.\\nAnother pattern is to use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"brew leaves\"), \" command to list installed packages which can\\nbe updated or removed.\"), mdx(\"p\", null, \"I created a small wrapper for each of these actions. One for installing,\\nanother for updating and one for deleting brew packages:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bip\"), \" \", \"\\u2014\", \" \", mdx(\"strong\", null, \"B\"), mdx(\"em\", {\n    parentName: \"p\"\n  }, \"rew\"), \" \", mdx(\"strong\", null, \"I\"), mdx(\"em\", {\n    parentName: \"p\"\n  }, \"nstall\"), \" \", mdx(\"strong\", null, \"P\"), mdx(\"em\", {\n    parentName: \"p\"\n  }, \"lugin\"), \", install one or more plugins (\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/SidOfc/dotfiles/blob/d07fa3862ed065c2a5a7f1160ae98416bfe2e1ee/zsh/bip\",\n    \"title\": \"View bip zsh script\"\n  }, \"zsh\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/SidOfc/dotfiles/blob/e94b96b908479950186e42a3709511a0afe300e4/.config/fish/functions/bip.fish\",\n    \"title\": \"View bip fish script\"\n  }, \"fish\"), \")\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bup\"), \" \", \"\\u2014\", \" \", mdx(\"strong\", null, \"B\"), mdx(\"em\", {\n    parentName: \"p\"\n  }, \"rew\"), \" \", mdx(\"strong\", null, \"U\"), mdx(\"em\", {\n    parentName: \"p\"\n  }, \"pdate\"), \" \", mdx(\"strong\", null, \"P\"), mdx(\"em\", {\n    parentName: \"p\"\n  }, \"lugin\"), \", update multiple installed plugins (\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/SidOfc/dotfiles/blob/d07fa3862ed065c2a5a7f1160ae98416bfe2e1ee/zsh/bup\",\n    \"title\": \"View bup zsh script\"\n  }, \"zsh\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/SidOfc/dotfiles/blob/e94b96b908479950186e42a3709511a0afe300e4/.config/fish/functions/bup.fish\",\n    \"title\": \"View bup fish script\"\n  }, \"fish\"), \")\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bcp\"), \" \", \"\\u2014\", \" \", mdx(\"strong\", null, \"B\"), mdx(\"em\", {\n    parentName: \"p\"\n  }, \"rew\"), \" \", mdx(\"strong\", null, \"C\"), mdx(\"em\", {\n    parentName: \"p\"\n  }, \"lean\"), \" \", mdx(\"strong\", null, \"P\"), mdx(\"em\", {\n    parentName: \"p\"\n  }, \"lugin\"), \", delete multiple installed plugins (\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/SidOfc/dotfiles/blob/d07fa3862ed065c2a5a7f1160ae98416bfe2e1ee/zsh/bcp\",\n    \"title\": \"View bcp zsh script\"\n  }, \"zsh\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/SidOfc/dotfiles/blob/e94b96b908479950186e42a3709511a0afe300e4/.config/fish/functions/bcp.fish\",\n    \"title\": \"View bcp fish script\"\n  }, \"fish\"), \")\"))), mdx(\"p\", null, \"Whenever I have to do anything with brew, it is completely painless and it\\nworks quite well for package discovery too.\"), mdx(Media, {\n    src: \"/media/posts/bip-interface\",\n    alt: \"Brew Install Plugin interface\",\n    width: \"768\",\n    height: \"180\",\n    mdxType: \"Media\"\n  }), mdx(\"h2\", null, \"Finding binaries\"), mdx(\"p\", null, \"One mythical beast known to anyone who has ever worked in a terminal is the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$PATH\"), \"\\nvariable. Often, a shell script will tell you to \\\"Add me to your $PATH\\\" so that the\\nscript will become available in your shell. This makes sense but can leave you with\\na messed up shell path or duplicate entries. It could cause all kinds of weirdness\\nand slowness in your terminal.\"), mdx(\"p\", null, \"My solution to this is a simple path explorer called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fp\"), \" (\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/SidOfc/dotfiles/blob/d07fa3862ed065c2a5a7f1160ae98416bfe2e1ee/zsh/fp\",\n    \"title\": \"View fp zsh script\"\n  }, \"zsh\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/SidOfc/dotfiles/blob/e94b96b908479950186e42a3709511a0afe300e4/.config/fish/functions/fp.fish\",\n    \"title\": \"View fp fish script\"\n  }, \"fish\"), \").\\nIt invokes FZF with a list of folders populated using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$PATH\"), \".\"), mdx(Media, {\n    src: \"/media/posts/dirs-in-path\",\n    alt: \"Directories present in $PATH\",\n    width: \"768\",\n    height: \"180\",\n    mdxType: \"Media\"\n  }), mdx(\"p\", null, \"Of course there are more than 3 paths in my list but I cropped the gif for brevity here.\\nWhen I press \", mdx(\"kbd\", null, \"enter\"), \" on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/bin\"), \" entry, I see a list of executables inside that folder.\\nEither find what you're looking for or go back.\"), mdx(\"p\", null, \"Going back to the overview is as easy as pressing \", mdx(\"kbd\", null, \"escape\"), \". This will take you back to\\nthe directory listing. Pressing \", mdx(\"kbd\", null, \"escape\"), \" in the overview will exit the command completely.\"), mdx(\"h2\", null, \"Checking features on caniuse.com\"), mdx(\"p\", null, \"Additionally, I've written a post before on how to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/blog/combining-caniuse-with-fzf\",\n    \"title\": \"Read the 'combine Caniuse with FZF post'\"\n  }, \"combine Caniuse with FZF\"), \".\\nIt allows me to quickly find out wether I should stay away from some Web API or not.\\nthis small tool also allows me to query features that have been added or deprecated recently.\"), mdx(Media, {\n    src: \"/media/posts/checking-caniuse\",\n    alt: \"An example of looking for features using cani\",\n    width: \"768\",\n    height: \"180\",\n    mdxType: \"Media\"\n  }), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cani\"), \" command (\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/SidOfc/dotfiles/blob/d07fa3862ed065c2a5a7f1160ae98416bfe2e1ee/zsh/cani\",\n    \"title\": \"View cani zsh script\"\n  }, \"zsh\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/SidOfc/dotfiles/blob/1e07bc882e64cc22783ac8ec2a01651503ecc7b3/.config/fish/functions/cani.fish\",\n    \"title\": \"View cani fish script\"\n  }, \"fish\"), \") itself uses another \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/SidOfc/dotfiles/blob/653c0331b3bd8a3b6fb5fbff0531f038e7eb5b12/bin/ciu\",\n    \"title\": \"View ciu ruby script\"\n  }, \"ruby script\"), \"\\n(\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ciu\"), \") I wrote to actually provide the data and format it properly.\\nThe data is fetched once then cached for a day.\\nSo you'll have fresh data on a daily basis :)\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"This mixture of shell + ruby has since been \", mdx(\"a\", {\n    parentName: \"em\",\n    \"href\": \"https://github.com/SidOfc/cani\",\n    \"title\": \"View SidOfc/cani on github\"\n  }, \"ported\"), \" to a \", mdx(\"a\", {\n    parentName: \"em\",\n    \"href\": \"https://rubygems.org/gems/cani\",\n    \"title\": \"View cani gem on rubygems.org\"\n  }, \"Ruby Gem\"), \" :)\")), mdx(\"h2\", null, \"Vim\"), mdx(\"p\", null, \"Since I spend a lot of my time in Vim trying to find a file either by name,\\nor by some code \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"inside\"), \" a certain file. Streamlining that process is very important.\\nEvery context switch you have to make adds overhead and the possibility of losing\\nfocus of what you are trying to find. Therefore it should be as mindless as possible,\\ne.g: press a key, type query, press enter to go to matching file.\"), mdx(\"p\", null, \"Finding files wasn't too much of an issue here. There is a long list of Vim plugins\\nthat offer file searching using fuzzy matching or \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://en.wikipedia.org/wiki/Most_Recently_Used\",\n    \"title\": \"Visit Most Recently Used definition on wikipedia.org\"\n  }, \"MRU\"), \" algorithms. Two examples of this are \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/ctrlpvim/ctrlp.vim\",\n    \"title\": \"Visit ctrlpvim/ctrlp.vim on github\"\n  }, \"CtrlP\"), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/wincent/command-t\",\n    \"title\": \"Visit wincent/command-t on github\"\n  }, \"Command-T\"), \".\\nI used CtrlP which always managed to do the job. But after playing around with FZF\\nin the terminal I wondered if it could be applied to Vim as well.\"), mdx(\"h2\", null, \"FZF.vim\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/junegunn/fzf.vim\",\n    \"title\": \"Visit junegunn/fzf.vim on github\"\n  }, \"FZF\"), \" has a small builtin Vim interface that already works, but it comes without\\nany existing functionality. The author of FZF also wrote this plugin.\\nIt is a small wrapper that provides common functionality. This includes listing files,\\nbuffers, tags, git logs and much more!\"), mdx(\"h2\", null, \"Fuzzy searching in file paths\"), mdx(\"p\", null, \"Coming from CtrlP the first thing I needed was a replacement for fuzzy-finding files.\\nThe solution was to use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \":Files\"), \" command provided by FZF.vim. This lists files\\nusing your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$FZF_DEFAULT_COMMAND\"), \" environment variable. It opens the currently\\nhighlighted file on \", mdx(\"kbd\", null, \"enter\"), \".\"), mdx(Media, {\n    src: \"/media/posts/fzf-files-demo\",\n    alt: \"FZF :Files demo\",\n    width: \"1049\",\n    height: \"714\",\n    mdxType: \"Media\"\n  }), mdx(\"p\", null, \"Since I was already so used to the \", mdx(\"kbd\", null, \"ctrl\"), \"+\", mdx(\"kbd\", null, \"p\"), \" mapping from the CtrlP plugin,\\nI mapped the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \":Files\"), \" command to it: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nnoremap <C-p> :Files<Cr>\"), \".\"), mdx(\"p\", null, \"FZF will not use ripgrep by default so you'll have to modify \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$FZF_DEFAULT_COMMAND\"), \"\\nif you want FZF to use ripgrep. Of course this is exactly what I wanted!\\nAfter some tweaking I ended up with the following command:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Fish syntax:\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"set -gx FZF_DEFAULT_COMMAND 'rg --files --no-ignore-vcs --hidden'\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Bash / ZSH syntax:\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"export FZF_DEFAULT_COMMAND='rg --files --no-ignore-vcs --hidden'\")))), mdx(\"p\", null, \"In my case it happens that I do want to edit or search for something in a file\\nthat is ignored by my VCS or in a hidden file. The options ensure that all files\\ninside the directory are listed (except those ignored in a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"~/.rgignore\"), \" file).\"), mdx(\"h2\", null, \"Finding content in specific files\"), mdx(\"p\", null, \"Last but not least I wanted to find files based on what was inside of a file.\\nThis is useful to see where a class or function is used for example.\"), mdx(Media, {\n    src: \"/media/posts/fzf-rg-demo\",\n    alt: \"FZF :Rg demo\",\n    width: \"1049\",\n    height: \"714\",\n    mdxType: \"Media\"\n  }), mdx(\"p\", null, \"The name of this command is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \":Rg\"), \" which already uses \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ripgrep\"), \" in the background! Done right?\\nNope \", \"\\u2014\", \" after playing around I noticed that while \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \":Rg\"), \" indeed searches the file's\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"contents\"), \", it also matches the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"file name\"), \" shown in the list like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \":Files\"), \" does (exclusively).\"), mdx(\"p\", null, \"In my brain these concepts are completely isolated from each other:\"), mdx(\"p\", null, \"When I need to find a specific \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"file\"), \" I \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"know\"), \" that I'm looking for a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"filename\"), \" in\\nwhich case I do not want to search \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"inside\"), \" the file.\"), mdx(\"p\", null, \"On the other hand, when I need to find a specific area of known code or figure out\\nin which files a certain class is used, I am most certainly never interested in matches from filenames.\"), mdx(\"p\", null, \"To achieve what I wanted, I had to override the default behavior.\\nAn \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/junegunn/fzf.vim/issues/346\",\n    \"title\": \"Visit junegunn/fzf.vim issue #346\"\n  }, \"issue\"), \" was created for the\\nexact same reason for the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \":Ag\"), \" command. Based on \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/junegunn/fzf.vim/issues/346#issuecomment-288483704\",\n    \"title\": \"Visit junegunn/fzf.vim issue #346 issue comment\"\n  }, \"this comment\"), \"\\nI came up with the following setup to accomplish this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-viml\"\n  }, \"command! -bang -nargs=* Rg\\n  \\\\ call fzf#vim#grep(\\n  \\\\   'rg --column --line-number --hidden --ignore-case --no-heading --color=always '.shellescape(<q-args>), 1,\\n  \\\\   <bang>0 ? fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'up:60%')\\n  \\\\           : fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'right:50%:hidden', '?'),\\n  \\\\   <bang>0)\\n\")), mdx(\"p\", null, \"This one I mapped to \", mdx(\"kbd\", null, \"ctrl\"), \"+\", mdx(\"kbd\", null, \"g\"), \", right next to \", mdx(\"kbd\", null, \"ctrl\"), \"+\", mdx(\"kbd\", null, \"f\"), \"\\nfor the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \":Files\"), \" command: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nnoremap <C-g> :Rg<Cr>\")), mdx(\"p\", null, \"The nice thing about this command is that you can select multiple files.\\nWhen selecting multiple files, pressing \", mdx(\"kbd\", null, \"enter\"), \" will load the files in a\\nquickfix list for batch editing using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cdo\"), \" for example.\"), mdx(\"h2\", null, \"Conclusion\"), mdx(\"p\", null, \"As I mentioned at the start of my post, these tools have become a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"vital\"), \"\\npart of my workflow. I use them while barely noticing their presence and they\\ntake a lot of complexity away from the task at hand. This allows me to focus\\non what matters instead of finding out how to do something which should be trivial.\"), mdx(\"p\", null, \"Wether it be killing services / processes, installing brew packages,\\nfinding a glitch in my path or a feature set in caniuse, I can do it in fewer\\nkeystrokes with more fine-grained control. I even use FZF as a standalone\\nfilter sometimes when I have to find something in line-based command output,\\nskipping (rip)grep all together :)\"), mdx(\"p\", null, \"Hopefully you are also able to reduce some of the strain in your workflow with\\nFZF using some of the tips above. If you are using FZF in another way, leave a\\ncomment! I'd love to hear about it and learn what others are doing with these\\ntwo fantastic tools.\"), mdx(\"p\", null, \"Happy fuzzy finding :)\"), mdx(\"p\", null, \"\\uD83D\\uDC4B\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>Today I want to talk about <a href=\"https://github.com/junegunn/fzf\" title=\"Visit junegunn/fzf on github\">fzf</a> and <a href=\"https://github.com/BurntSushi/ripgrep\" title=\"Visit BurntSushi/ripgrep on github\">ripgrep</a>,\ntwo tools I use all the time when working in Vim and the terminal.\nThey have become an absolutely <strong>vital</strong> part of my workflow.\nEver since I started using them I can&#x27;t imagine myself functioning\nwithout them anymore.</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"what-is-fzf\"></a><a class=\"heading_link__1aoFY\" href=\"#what-is-fzf\">What is FZF?</a></h2><p>FZF is a fuzzy finder for your terminal, it is a command line application that\nfilters each line from given input with a query that the user types.\nWhen the query changes, the results update in realtime.</p><figure class=\"media_figure__1BF98\"><div class=\"lazyload-wrapper \"><div style=\"padding-bottom:23.4375%\"></div></div><figcaption class=\"media_alt__xSx7S\">FZF + LS example</figcaption></figure><p>After finding the file you&#x27;re looking for, hitting <kbd>enter</kbd> prints the highlighted\nentry. You can combine this with your <code>$EDITOR</code> variable to search for a file and then edit\nit for example.</p><figure class=\"media_figure__1BF98\"><div class=\"lazyload-wrapper \"><div style=\"padding-bottom:23.4375%\"></div></div><figcaption class=\"media_alt__xSx7S\">Open CHANGELOG.md in NeoVim</figcaption></figure><p>Of course this is only a simple example. The possibilities with FZF are endless.\nThere are countless ways in which you can use it to filter input and use that in\nanother command. We&#x27;ll dive more into that later.</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"what-about-ripgrep\"></a><a class=\"heading_link__1aoFY\" href=\"#what-about-ripgrep\">What about ripgrep?</a></h2><p>As it already says in the name, it is another <code>grep</code> program. Ripgrep is written\nin rust and one of its primary goals is to be the <em>fastest</em> <code>grep</code> of them all.\nIt performs amazing even in a larger code base.</p><figure class=\"media_figure__1BF98\"><div class=\"lazyload-wrapper \"><div style=\"padding-bottom:23.4375%\"></div></div><figcaption class=\"media_alt__xSx7S\">Ripgrep list files with FZF</figcaption></figure><p>Ripgrep has many options to explore, there are way to many to list here.\nSome of the options I use most often with ripgrep are:</p><ul><li><p><code>--files</code> <!-- -->—<!-- --> List files which ripgrep will search instead of searching them</p></li><li><p><code>--hidden</code> <!-- -->—<!-- --> Show hidden (<code>.file</code>) files</p></li><li><p><code>--no-ignore-vcs</code> <!-- -->—<!-- --> Show files ignored by your VCS</p></li><li><p><code>--vimgrep</code> <!-- -->—<!-- --> Results are returned on a single line in vimgrep format</p></li></ul><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"the-problems-they-solve\"></a><a class=\"heading_link__1aoFY\" href=\"#the-problems-they-solve\">The problems they solve</a></h2><p>Both these tools can be combined in various scenario&#x27;s that would have otherwise\ntaken multiple long commands to execute. This ranges from killing processes to\nmanaging plugins to being able to find (in) files.</p><p>These actions are usually involved when I try to do something more complex:</p><ul><li><p>googling the right command</p></li><li><p>look around for the right line in the output</p></li><li><p>refine <code>grep</code> pattern</p></li><li><p>retrying the command</p></li></ul><p>At this point you&#x27;ll realize that you&#x27;re not actually searching for something\nanymore. You find yourself looking for ways to perform your search instead :/</p><p>My solution to <strike>not being able</strike> being too lazy to memorize these commands is to create\nsmall shell wrappers for them. I learn / read docs on a command to figure out how to\napply it for my use case(s). Then I write the wrapper based on the ideas I have about\nhow it should work.</p><p>With that being said, let&#x27;s dive right in with a common case:</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"killing-processes\"></a><a class=\"heading_link__1aoFY\" href=\"#killing-processes\">Killing processes</a></h2><p>One example is stopping an out of control process. First you have to find the\nprocess ID by issuing some command like <code>ps -ef | grep [PROCESS NAME]</code>.</p><p>Which is then followed by a <code>kill</code> command with one of the process IDs you want\nto kill. The downsides to this are that I have to use two commands. Filter the\noutput before seeing it or knowing how it looks and issuing an extra command\nto actually stop the process.</p><p>To make this easier, I wrote a small wrapper (first in <a href=\"https://github.com/SidOfc/dotfiles/blob/d07fa3862ed065c2a5a7f1160ae98416bfe2e1ee/zsh/kp\" title=\"View kp zsh script\">zsh</a>,\nlater migrated to <a href=\"https://github.com/SidOfc/dotfiles/blob/e94b96b908479950186e42a3709511a0afe300e4/.config/fish/functions/kp.fish\" title=\"View kp fish script\">fish</a>) called <code>kp</code>.\nIt lists processes using <code>ps -ef</code> and pipes it to <code>fzf</code>.</p><figure class=\"media_figure__1BF98\"><div class=\"lazyload-wrapper \"><div style=\"padding-bottom:23.4375%\"></div></div><figcaption class=\"media_alt__xSx7S\">Killing processes using kp</figcaption></figure><p>This command opens an FZF window with your processes. FZF has an option to allow\nselecting multiple entries (<code>-m flag</code>). When <kbd>enter</kbd> is pressed, both marked\n(light red <code>&gt;</code> symbols) processes will be shut down. When changing your query,\nselected entries will stay selected. This is convenient for killing different\nprocesses in a single run.</p><p>After killing some processes, the command will rerun itself. I can use <kbd>escape</kbd> to\nexit from this specific window.</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"installing-brew-plugins\"></a><a class=\"heading_link__1aoFY\" href=\"#installing-brew-plugins\">Installing brew plugins</a></h2><p>Another use case is to install, update or purge <a href=\"https://github.com/Homebrew\" title=\"Visit Homebrew on github\">brew</a>\nplugins from your system. When you are looking for a brew package, a common pattern\nis to use <code>brew search</code> together with <code>grep</code> to find out if it exists.</p><p>After that you&#x27;ll most likely run a command like: <code>brew install [PACKAGE]</code> to install it.\nAnother pattern is to use the <code>brew leaves</code> command to list installed packages which can\nbe updated or removed.</p><p>I created a small wrapper for each of these actions. One for installing,\nanother for updating and one for deleting brew packages:</p><ul><li><p><code>bip</code> <!-- -->—<!-- --> <strong>B</strong><em>rew</em> <strong>I</strong><em>nstall</em> <strong>P</strong><em>lugin</em>, install one or more plugins (<a href=\"https://github.com/SidOfc/dotfiles/blob/d07fa3862ed065c2a5a7f1160ae98416bfe2e1ee/zsh/bip\" title=\"View bip zsh script\">zsh</a>, <a href=\"https://github.com/SidOfc/dotfiles/blob/e94b96b908479950186e42a3709511a0afe300e4/.config/fish/functions/bip.fish\" title=\"View bip fish script\">fish</a>)</p></li><li><p><code>bup</code> <!-- -->—<!-- --> <strong>B</strong><em>rew</em> <strong>U</strong><em>pdate</em> <strong>P</strong><em>lugin</em>, update multiple installed plugins (<a href=\"https://github.com/SidOfc/dotfiles/blob/d07fa3862ed065c2a5a7f1160ae98416bfe2e1ee/zsh/bup\" title=\"View bup zsh script\">zsh</a>, <a href=\"https://github.com/SidOfc/dotfiles/blob/e94b96b908479950186e42a3709511a0afe300e4/.config/fish/functions/bup.fish\" title=\"View bup fish script\">fish</a>)</p></li><li><p><code>bcp</code> <!-- -->—<!-- --> <strong>B</strong><em>rew</em> <strong>C</strong><em>lean</em> <strong>P</strong><em>lugin</em>, delete multiple installed plugins (<a href=\"https://github.com/SidOfc/dotfiles/blob/d07fa3862ed065c2a5a7f1160ae98416bfe2e1ee/zsh/bcp\" title=\"View bcp zsh script\">zsh</a>, <a href=\"https://github.com/SidOfc/dotfiles/blob/e94b96b908479950186e42a3709511a0afe300e4/.config/fish/functions/bcp.fish\" title=\"View bcp fish script\">fish</a>)</p></li></ul><p>Whenever I have to do anything with brew, it is completely painless and it\nworks quite well for package discovery too.</p><figure class=\"media_figure__1BF98\"><div class=\"lazyload-wrapper \"><div style=\"padding-bottom:23.4375%\"></div></div><figcaption class=\"media_alt__xSx7S\">Brew Install Plugin interface</figcaption></figure><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"finding-binaries\"></a><a class=\"heading_link__1aoFY\" href=\"#finding-binaries\">Finding binaries</a></h2><p>One mythical beast known to anyone who has ever worked in a terminal is the <code>$PATH</code>\nvariable. Often, a shell script will tell you to &quot;Add me to your $PATH&quot; so that the\nscript will become available in your shell. This makes sense but can leave you with\na messed up shell path or duplicate entries. It could cause all kinds of weirdness\nand slowness in your terminal.</p><p>My solution to this is a simple path explorer called <code>fp</code> (<a href=\"https://github.com/SidOfc/dotfiles/blob/d07fa3862ed065c2a5a7f1160ae98416bfe2e1ee/zsh/fp\" title=\"View fp zsh script\">zsh</a>, <a href=\"https://github.com/SidOfc/dotfiles/blob/e94b96b908479950186e42a3709511a0afe300e4/.config/fish/functions/fp.fish\" title=\"View fp fish script\">fish</a>).\nIt invokes FZF with a list of folders populated using <code>$PATH</code>.</p><figure class=\"media_figure__1BF98\"><div class=\"lazyload-wrapper \"><div style=\"padding-bottom:23.4375%\"></div></div><figcaption class=\"media_alt__xSx7S\">Directories present in $PATH</figcaption></figure><p>Of course there are more than 3 paths in my list but I cropped the gif for brevity here.\nWhen I press <kbd>enter</kbd> on the <code>/bin</code> entry, I see a list of executables inside that folder.\nEither find what you&#x27;re looking for or go back.</p><p>Going back to the overview is as easy as pressing <kbd>escape</kbd>. This will take you back to\nthe directory listing. Pressing <kbd>escape</kbd> in the overview will exit the command completely.</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"checking-features-on-caniuse\"></a><a class=\"heading_link__1aoFY\" href=\"#checking-features-on-caniuse\">Checking features on caniuse.com</a></h2><p>Additionally, I&#x27;ve written a post before on how to <a href=\"/blog/combining-caniuse-with-fzf\" title=\"Read the &#x27;combine Caniuse with FZF post&#x27;\">combine Caniuse with FZF</a>.\nIt allows me to quickly find out wether I should stay away from some Web API or not.\nthis small tool also allows me to query features that have been added or deprecated recently.</p><figure class=\"media_figure__1BF98\"><div class=\"lazyload-wrapper \"><div style=\"padding-bottom:23.4375%\"></div></div><figcaption class=\"media_alt__xSx7S\">An example of looking for features using cani</figcaption></figure><p>The <code>cani</code> command (<a href=\"https://github.com/SidOfc/dotfiles/blob/d07fa3862ed065c2a5a7f1160ae98416bfe2e1ee/zsh/cani\" title=\"View cani zsh script\">zsh</a>, <a href=\"https://github.com/SidOfc/dotfiles/blob/1e07bc882e64cc22783ac8ec2a01651503ecc7b3/.config/fish/functions/cani.fish\" title=\"View cani fish script\">fish</a>) itself uses another <a href=\"https://github.com/SidOfc/dotfiles/blob/653c0331b3bd8a3b6fb5fbff0531f038e7eb5b12/bin/ciu\" title=\"View ciu ruby script\">ruby script</a>\n(<code>ciu</code>) I wrote to actually provide the data and format it properly.\nThe data is fetched once then cached for a day.\nSo you&#x27;ll have fresh data on a daily basis :)</p><p><em>This mixture of shell + ruby has since been <a href=\"https://github.com/SidOfc/cani\" title=\"View SidOfc/cani on github\">ported</a> to a <a href=\"https://rubygems.org/gems/cani\" title=\"View cani gem on rubygems.org\">Ruby Gem</a> :)</em></p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"vim\"></a><a class=\"heading_link__1aoFY\" href=\"#vim\">Vim</a></h2><p>Since I spend a lot of my time in Vim trying to find a file either by name,\nor by some code <em>inside</em> a certain file. Streamlining that process is very important.\nEvery context switch you have to make adds overhead and the possibility of losing\nfocus of what you are trying to find. Therefore it should be as mindless as possible,\ne.g: press a key, type query, press enter to go to matching file.</p><p>Finding files wasn&#x27;t too much of an issue here. There is a long list of Vim plugins\nthat offer file searching using fuzzy matching or <a href=\"https://en.wikipedia.org/wiki/Most_Recently_Used\" title=\"Visit Most Recently Used definition on wikipedia.org\">MRU</a> algorithms. Two examples of this are <a href=\"https://github.com/ctrlpvim/ctrlp.vim\" title=\"Visit ctrlpvim/ctrlp.vim on github\">CtrlP</a> and <a href=\"https://github.com/wincent/command-t\" title=\"Visit wincent/command-t on github\">Command-T</a>.\nI used CtrlP which always managed to do the job. But after playing around with FZF\nin the terminal I wondered if it could be applied to Vim as well.</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"fzf\"></a><a class=\"heading_link__1aoFY\" href=\"#fzf\">FZF.vim</a></h2><p><a href=\"https://github.com/junegunn/fzf.vim\" title=\"Visit junegunn/fzf.vim on github\">FZF</a> has a small builtin Vim interface that already works, but it comes without\nany existing functionality. The author of FZF also wrote this plugin.\nIt is a small wrapper that provides common functionality. This includes listing files,\nbuffers, tags, git logs and much more!</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"fuzzy-searching-in-file-paths\"></a><a class=\"heading_link__1aoFY\" href=\"#fuzzy-searching-in-file-paths\">Fuzzy searching in file paths</a></h2><p>Coming from CtrlP the first thing I needed was a replacement for fuzzy-finding files.\nThe solution was to use the <code>:Files</code> command provided by FZF.vim. This lists files\nusing your <code>$FZF_DEFAULT_COMMAND</code> environment variable. It opens the currently\nhighlighted file on <kbd>enter</kbd>.</p><figure class=\"media_figure__1BF98\"><div class=\"lazyload-wrapper \"><div style=\"padding-bottom:68.0648236415634%\"></div></div><figcaption class=\"media_alt__xSx7S\">FZF :Files demo</figcaption></figure><p>Since I was already so used to the <kbd>ctrl</kbd>+<kbd>p</kbd> mapping from the CtrlP plugin,\nI mapped the <code>:Files</code> command to it: <code>nnoremap &lt;C-p&gt; :Files&lt;Cr&gt;</code>.</p><p>FZF will not use ripgrep by default so you&#x27;ll have to modify <code>$FZF_DEFAULT_COMMAND</code>\nif you want FZF to use ripgrep. Of course this is exactly what I wanted!\nAfter some tweaking I ended up with the following command:</p><ul><li><p><strong>Fish syntax:</strong> <code>set -gx FZF_DEFAULT_COMMAND &#x27;rg --files --no-ignore-vcs --hidden&#x27;</code></p></li><li><p><strong>Bash / ZSH syntax:</strong> <code>export FZF_DEFAULT_COMMAND=&#x27;rg --files --no-ignore-vcs --hidden&#x27;</code></p></li></ul><p>In my case it happens that I do want to edit or search for something in a file\nthat is ignored by my VCS or in a hidden file. The options ensure that all files\ninside the directory are listed (except those ignored in a <code>~/.rgignore</code> file).</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"finding-content-in-specific-files\"></a><a class=\"heading_link__1aoFY\" href=\"#finding-content-in-specific-files\">Finding content in specific files</a></h2><p>Last but not least I wanted to find files based on what was inside of a file.\nThis is useful to see where a class or function is used for example.</p><figure class=\"media_figure__1BF98\"><div class=\"lazyload-wrapper \"><div style=\"padding-bottom:68.0648236415634%\"></div></div><figcaption class=\"media_alt__xSx7S\">FZF :Rg demo</figcaption></figure><p>The name of this command is <code>:Rg</code> which already uses <code>ripgrep</code> in the background! Done right?\nNope <!-- -->—<!-- --> after playing around I noticed that while <code>:Rg</code> indeed searches the file&#x27;s\n<em>contents</em>, it also matches the <em>file name</em> shown in the list like <code>:Files</code> does (exclusively).</p><p>In my brain these concepts are completely isolated from each other:</p><p>When I need to find a specific <em>file</em> I <em>know</em> that I&#x27;m looking for a <em>filename</em> in\nwhich case I do not want to search <em>inside</em> the file.</p><p>On the other hand, when I need to find a specific area of known code or figure out\nin which files a certain class is used, I am most certainly never interested in matches from filenames.</p><p>To achieve what I wanted, I had to override the default behavior.\nAn <a href=\"https://github.com/junegunn/fzf.vim/issues/346\" title=\"Visit junegunn/fzf.vim issue #346\">issue</a> was created for the\nexact same reason for the <code>:Ag</code> command. Based on <a href=\"https://github.com/junegunn/fzf.vim/issues/346#issuecomment-288483704\" title=\"Visit junegunn/fzf.vim issue #346 issue comment\">this comment</a>\nI came up with the following setup to accomplish this:</p><pre class=\"prism-code language-viml\" style=\"background-color:#2a2734;color:#9a86fd\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">command</span><span class=\"token operator\" style=\"color:#e09142\">!</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#e09142\">-</span><span class=\"token plain\">bang </span><span class=\"token operator\" style=\"color:#e09142\">-</span><span class=\"token plain\">nargs</span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token operator\" style=\"color:#e09142\">*</span><span class=\"token plain\"> Rg</span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">  </span><span class=\"token punctuation\" style=\"color:#6c6783\">\\</span><span class=\"token plain\"> </span><span class=\"token keyword\" style=\"color:#ffcc99\">call</span><span class=\"token plain\"> fzf</span><span class=\"token punctuation\" style=\"color:#6c6783\">#</span><span class=\"token plain\">vim</span><span class=\"token punctuation\" style=\"color:#6c6783\">#</span><span class=\"token function\" style=\"color:#fa60c3\">grep</span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">  </span><span class=\"token punctuation\" style=\"color:#6c6783\">\\</span><span class=\"token plain\">   </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;rg --column --line-number --hidden --ignore-case --no-heading --color=always &#x27;</span><span class=\"token operator\" style=\"color:#e09142\">.</span><span class=\"token function\" style=\"color:#fa60c3\">shellescape</span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token keyword\" style=\"color:#ffcc99\">q</span><span class=\"token operator\" style=\"color:#e09142\">-</span><span class=\"token keyword\" style=\"color:#ffcc99\">args</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#e09142\">1</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">  </span><span class=\"token punctuation\" style=\"color:#6c6783\">\\</span><span class=\"token plain\">   </span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">bang</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token number\" style=\"color:#e09142\">0</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#e09142\">?</span><span class=\"token plain\"> fzf</span><span class=\"token punctuation\" style=\"color:#6c6783\">#</span><span class=\"token plain\">vim</span><span class=\"token punctuation\" style=\"color:#6c6783\">#</span><span class=\"token function\" style=\"color:#fa60c3\">with_preview</span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token punctuation\" style=\"color:#6c6783\">{</span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;options&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;--delimiter : --nth 4..&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">}</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;up:60%&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">  </span><span class=\"token punctuation\" style=\"color:#6c6783\">\\</span><span class=\"token plain\">           </span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> fzf</span><span class=\"token punctuation\" style=\"color:#6c6783\">#</span><span class=\"token plain\">vim</span><span class=\"token punctuation\" style=\"color:#6c6783\">#</span><span class=\"token function\" style=\"color:#fa60c3\">with_preview</span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token punctuation\" style=\"color:#6c6783\">{</span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;options&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;--delimiter : --nth 4..&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">}</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;right:50%:hidden&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;?&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">  </span><span class=\"token punctuation\" style=\"color:#6c6783\">\\</span><span class=\"token plain\">   </span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">bang</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token number\" style=\"color:#e09142\">0</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span></div></pre><p>This one I mapped to <kbd>ctrl</kbd>+<kbd>g</kbd>, right next to <kbd>ctrl</kbd>+<kbd>f</kbd>\nfor the <code>:Files</code> command: <code>nnoremap &lt;C-g&gt; :Rg&lt;Cr&gt;</code></p><p>The nice thing about this command is that you can select multiple files.\nWhen selecting multiple files, pressing <kbd>enter</kbd> will load the files in a\nquickfix list for batch editing using <code>cdo</code> for example.</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"conclusion\"></a><a class=\"heading_link__1aoFY\" href=\"#conclusion\">Conclusion</a></h2><p>As I mentioned at the start of my post, these tools have become a <strong>vital</strong>\npart of my workflow. I use them while barely noticing their presence and they\ntake a lot of complexity away from the task at hand. This allows me to focus\non what matters instead of finding out how to do something which should be trivial.</p><p>Wether it be killing services / processes, installing brew packages,\nfinding a glitch in my path or a feature set in caniuse, I can do it in fewer\nkeystrokes with more fine-grained control. I even use FZF as a standalone\nfilter sometimes when I have to find something in line-based command output,\nskipping (rip)grep all together :)</p><p>Hopefully you are also able to reduce some of the strain in your workflow with\nFZF using some of the tips above. If you are using FZF in another way, leave a\ncomment! I&#x27;d love to hear about it and learn what others are doing with these\ntwo fantastic tools.</p><p>Happy fuzzy finding :)</p><p>👋</p>","scope":{"title":"How FZF and ripgrep improved my workflow","description":"In my never ending quest for simplicity I recently discovered FZF and ripgrep. Two command-line tools that have the potential to make every dag programming tasks easier. In this post I will explain how I use these tools to do things in a matter of keystrokes rather than having to re-google that command you keep forgetting <strong>every. single. time.</strong>.","published":"2018-06-24T13:33:37Z","updated":"2019-07-10T21:10:00Z"}},"slug":"how-fzf-and-ripgrep-improved-my-workflow"},{"title":"The greatnesses and gotchas of YAML","description":"YAML is a great language for configuration files, it is a lot more flexible than JSON with comments and inheritance for example. While I was doing some research about YAML I found bits of information scattered all over the place so I attempted to piece the great things and the quirks together in a post!","published":"2017-12-23T07:25:59Z","readTimeInMinutes":13,"source":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Update 08\\u201311\\u20132018:\"), \" Thank you \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://medium.com/@abitrolly\",\n    \"title\": \"Visit Anatoli Babenia on Medium\"\n  }, \"Anatoli Babenia\"), \"\\nfor pointing to the base 60 parsing 'feature' in the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.docker.com/compose/compose-file/compose-file-v2/#ports\",\n    \"title\": \"Visit base 60 parsing section on docs.docker.com\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"docker-compose\")), \" documentation.\\nIt led to me finding another great resource and added it along with some new content\\nto this post.\"), mdx(Media, {\n    src: \"/media/posts/yaml-homepage.png\",\n    alt: \"yaml.org homepage\",\n    width: \"900\",\n    height: \"371\",\n    mdxType: \"Media\"\n  }), mdx(\"p\", null, \"In this post I want to talk about \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://yaml.org/\",\n    \"title\": \"Visit yaml.org\"\n  }, \"YAML\"), \".\\nLike the very popular \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://json.org/\",\n    \"title\": \"Visit json.org\"\n  }, \"JSON\"), \" format, it is a file format\\nthat allows you to store data in a structured way. Last week I had a\\ndiscussion with a colleague about an unexpected output value when parsing\\nYAML to a Ruby hash. The YAML data looks like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yaml\"\n  }, \"---\\nsome_key:\\n  some_other_key: nil\\n\")), mdx(\"p\", null, \"When parsed in Ruby, it looks like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ruby\"\n  }, \"{'some_key' => {'some_other_key' => 'nil'}}\\n\")), mdx(\"p\", null, \"And the equivalent Python output:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"{'some_key': {'some_other_key': 'nil'}}\\n\")), mdx(\"p\", null, \"The confusion was about the value of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"some_other_key\"), \" which we\\nboth thought would become \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nil\"), \" instead of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"'nil'\"), \". I mentioned to my\\ncolleague that if he wanted to get a nil value, he might as well\\nleave it completely empty:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yaml\"\n  }, \"---\\nsome_key:\\n  some_other_key:\\n\")), mdx(\"p\", null, \"Which indeed, leads to the expected result in Ruby:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ruby\"\n  }, \"{'some_key' => {'some_other_key' => nil}}\\n\")), mdx(\"p\", null, \"And of course, in Python too:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"{'some_key': {'some_other_key': None}}\\n\")), mdx(\"p\", null, \"At this point we became curious, I mean, there must be \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"some\"), \" kind of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nil\"), \" value,\\nright? So we ventured to Google and well, found an answer in no time at all :)\\nThere is a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nil\"), \" value in YAML, it's called \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://yaml.org/type/null.html\",\n    \"title\": \"Visit null type documentation on yaml.org\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"null\")), \"!\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yaml\"\n  }, \"---\\nsome_key:\\n  some_other_key: null\\n\")), mdx(\"p\", null, \"Also yields the expected result for both Ruby and Python.\"), mdx(\"h2\", null, \"And this was only the start...\"), mdx(\"p\", null, \"Since that moment I've been wondering what \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"more\"), \" is there to YAML.\\nI've written literally \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/SidOfc/browserino/tree/master/spec/files\",\n    \"title\": \"Visit SidOfc/browserino YAML test files directory\"\n  }, \"thousands of lines of YAML\"), \"\\ntest data for one of \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://github.com/sidofc/browserino\",\n    \"title\": \"Visit SidOfc/browserino github repository\"\n  }, \"my gems\"), \"\\nbut I've never really wondered what the language could really do.\"), mdx(\"p\", null, \"What I also noticed is that there aren't all that many YAML posts out there,\\nsome resources I used while gathering information for this post:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://learnxinyminutes.com/docs/yaml/\",\n    \"title\": \"Visit the learnxinyminutes.com YAML docs\"\n  }, \"https://learnxinyminutes.com/docs/yaml/\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://yaml.org/\",\n    \"title\": \"Visit yaml.org\"\n  }, \"https://yaml.org/\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://codebeautify.org/yaml-validator\",\n    \"title\": \"Visit the codebeautify YAML validator\"\n  }, \"https://codebeautify.org/yaml-validator\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.saltstack.com/en/latest/topics/yaml/\",\n    \"title\": \"visit the doc.saltstack.com YAML topic\"\n  }, \"https://docs.saltstack.com/en/latest/topics/yaml/\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.yaml.org/spec/1.2/spec.html\",\n    \"title\": \"Visit the YAML specification\"\n  }, \"https://www.yaml.org/spec/1.2/spec.html\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://stackoverflow.com/a/1729545/2224331\",\n    \"title\": \"Visit StackOverflow answer\"\n  }, \"https://stackoverflow.com/a/1729545/2224331\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://stackoverflow.com/a/16986339/2224331\",\n    \"title\": \"Visit StackOverflow answer\"\n  }, \"https://stackoverflow.com/a/16986339/2224331\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://json.org/\",\n    \"title\": \"Visit json.org\"\n  }, \"https://json.org/\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://pyyaml.org/wiki/PyYAMLDocumentation\",\n    \"title\": \"Visit pyyaml.org YAML documentation\"\n  }, \"https://pyyaml.org/wiki/PyYAMLDocumentation\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://blog.teamlazerbeez.com/2009/04/15/yaml-gotchas/\",\n    \"title\": \"Visit blog.teamlazerbeez.com YAML blog post\"\n  }, \"http://blog.teamlazerbeez.com/2009/04/15/yaml-gotchas/\")))), mdx(\"p\", null, \"So I would like to share some of the features of YAML that you might not know about and also,\\nshare some differences between YAML parsers (the Ruby and Python parsers).\"), mdx(\"h2\", null, \"Inheritance\"), mdx(\"p\", null, \"One cool feature, which I first saw when bootstrapping a sample Rails application was that you\\ncan define \\\"defaults\\\" using anchors. In Rails, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"config/database.yml\"), \" file contains the\\nfollowing content by default:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yaml\"\n  }, \"default: &default\\n  adapter: sqlite3\\n  pool: <%= ENV.fetch(\\\"RAILS_MAX_THREADS\\\") { 5 } %>\\n  timeout: 5000\\n\\ndevelopment:\\n  <<: *default\\n  database: db/development.sqlite3\\n\\ntest:\\n  <<: *default\\n  database: db/test.sqlite3\\n\\nproduction:\\n  <<: *default\\n  database: db/production.sqlite3\\n\")), mdx(\"p\", null, \"As you can see, there is a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"default\"), \" key followed by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"&default\"), \". The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"&default\"), \" keyword here represents\\nthe anchor. Then, in another YAML node, you can inherit properties from that anchor by adding a\\nspecial key \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<<\"), \" followed by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"*default\"), \" in this case. To overwrite a default value, simply add the key\\nyou want to overwrite with its new value below the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<<:* default\"), \" line.\"), mdx(\"h2\", null, \"Write JSON in your YAML\"), mdx(\"p\", null, \"Another handy thing to know is that you can write JSON inside YAML, this is pretty neat and to be\\nexpected as \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://stackoverflow.com/questions/1726802/what-is-the-difference-between-yaml-and-json-when-to-prefer-one-over-the-other/1729545#1729545\",\n    \"title\": \"Visit StackOverflow answer\"\n  }, \"YAML is a superset of JSON\"), \" (or well, since version 1.2 it is at least).\"), mdx(\"p\", null, \"The following YAML:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yaml\"\n  }, \"---\\nkey: {\\\"some\\\": \\\"json\\\"}\\nanother: [1, 2, 3]\\n\")), mdx(\"p\", null, \"Parsed in Ruby this results in:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ruby\"\n  }, \"{\\\"key\\\"=>{\\\"some\\\"=>\\\"json\\\"}, \\\"another\\\"=>[1, 2, 3]}\\n\")), mdx(\"h2\", null, \"YAML keys as Ruby symbols\"), mdx(\"p\", null, \"This one I looked for specifically when I started a major rewrite of one of my gems and decided\\nto migrate test data out of Ruby into YAML. I was curious to see if YAML could actually store\\nRuby \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Symbols\"), \" instead of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Strings\"), \". While I didn't have thousands of tests written in YAML at the\\ntime, I thought \\\"Why not?\\\". The answer was that indeed, the Ruby parser understands symbols written\\nin YAML, and treats them as such when parsing in Ruby.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yaml\"\n  }, \"---\\n:my_symbol_key: :or_value\\n\")), mdx(\"p\", null, \"In Ruby, evaluates to the following:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ruby\"\n  }, \"{:my_symbol_key=>:or_value}\\n\")), mdx(\"p\", null, \"Whereas the same YAML parsed in Python outputs:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"{':my_symbol_key': ':or_value'}\\n\")), mdx(\"p\", null, \"I only recently gave this some thought, if I were to port my gem to Python for whatever reason,\\nI couldn't \\\"conveniently\\\" use this YAML anymore and for anyone wanting to use the gem's YAML\\noutside of Ruby, it would contain useless \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \":\"), \" characters at the start of every \\\"symbol\\\".\\nSo yeah, while awesome, use with caution! I'm considering rewriting my gem's YAML to just\\nuse strings instead of symbols because of this \\\"exclusive\\\" Ruby feature :)\"), mdx(\"h2\", null, \"Multiline strings? YAML's got your back!\"), mdx(\"p\", null, \"Another topic often discussed in programming languages in general is how to handle multiline\\nstrings, various languages have different solutions to the same problem. YAML has it's own\\ntwo solutions. The pipe (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"|\"), \") character and the greater than (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \">\"), \") sign.\"), mdx(\"p\", null, \"The pipe notation, also referred to as \\\"literal block\\\":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yaml\"\n  }, \"literal: |\\n    This block of text will be the value of the 'literal' key,\\n    with line breaks being preserved.\\n\\n    It continues until de-dented, leading indentation is\\n    stripped.\\n\\n        Any lines that are 'more-indented' keep the rest\\n        of their indentation -\\n        these lines will be indented by 4 spaces.\\n\")), mdx(\"p\", null, \"The greater than sign notation, also referred to as \\\"folded block\\\":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yaml\"\n  }, \"folded: >\\n    This block of text will be the value of 'folded', but this\\n    time, all newlines will be replaced with a single space.\\n\\n    Blank lines, like above, are converted\\n    to a newline character.\\n\\n        'More-indented' lines keep their newlines, too -\\n        this text will appear over two lines.\\n\")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://learnxinyminutes.com/docs/yaml/\",\n    \"title\": \"Visit the learnxinyminutes.com YAML docs\"\n  }, \"Both snippets came from here.\"), \" This post also contains\\na lot of other great YAML examples you should definitely check out!\"), mdx(\"h2\", null, \"Quoted strings, begone!\"), mdx(\"p\", null, \"Unlike its friend JSON, YAML doesn't mind if you don't put your strings between quotes.\\nThe following will output exactly what you would expect:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yaml\"\n  }, \"some_key: with a string value\\n\")), mdx(\"p\", null, \"In Ruby and Python, the results are the same (output in Ruby):\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ruby\"\n  }, \"{\\\"some_key\\\"=>\\\"with a string value\\\"}\\n\")), mdx(\"p\", null, \"Keys don't have to be quoted either, so removing the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_\"), \" from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"some_key\"), \" results\\nin the following in both Ruby and Python (output in Ruby):\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ruby\"\n  }, \"{\\\"some key\\\"=>\\\"with a string value\\\"}\\n\")), mdx(\"p\", null, \"While this makes copying certain values easier YAML tries to be smart about some\\n(more than you might think) of them. When a key with a value of either \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"yes\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Yes\"), \",\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"YES\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"on\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"On\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ON\"), \" is present, the resulting value when parsing this YAML will be\\na boolean. The same is true for values \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"no\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"No\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"NO\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"off\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Off\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OFF\"), \".\"), mdx(\"p\", null, \"The following example shows Ruby syntax but Python 3.6 parsed it exactly the same.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ruby\"\n  }, \"# All the following equal true\\nYAML.load(\\\"key: Yes\\\")\\nYAML.load(\\\"key: yes\\\")\\nYAML.load(\\\"key: YES\\\")\\nYAML.load(\\\"key: on\\\")\\nYAML.load(\\\"key: On\\\")\\nYAML.load(\\\"key: ON\\\")\\n# => {\\\"key\\\"=>true}\\n\\n# All the following equal false\\nYAML.load(\\\"key: no\\\")\\nYAML.load(\\\"key: No\\\")\\nYAML.load(\\\"key: NO\\\")\\nYAML.load(\\\"key: off\\\")\\nYAML.load(\\\"key: Off\\\")\\nYAML.load(\\\"key: OFF\\\")\\n# => {\\\"key\\\"=>false}\\n\")), mdx(\"p\", null, \"If you expect your program to see these values as strings, the solution is to quote\\nthe string or to cast the value as we'll see in the next section.\"), mdx(\"h2\", null, \"Casting values\"), mdx(\"p\", null, \"If you want to ensure that a key has a value of a specific type, you can cast values\\nexplicitly: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"key: !!str 0.5\"), \" => \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"{\\\"key\\\" => \\\"0.5\\\"}\"), \" in both Ruby and Python. Likewise\\nkey: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"!!float '0.5'\"), \" => \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"{\\\"key\\\" => 0.5}\"), \" as well.\"), mdx(\"p\", null, \"Some parsers actually implement \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"language specific\"), \" tags. These can be used to create specific data structures for that given language:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yaml\"\n  }, \"---\\nkey: !!python/tuple [1, 2]\\n\")), mdx(\"p\", null, \"Results in the following in Python:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"{'key': (1, 2)}\\n\")), mdx(\"p\", null, \"What REALLY surprised me here was that the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Ruby parser turned it into an Array instead:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ruby\"\n  }, \"{\\\"key\\\" => [1, 2]}\\n\")), mdx(\"p\", null, \"So I thought to myself, \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"\\\"What if I change \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"!!python/tuple\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"!!ruby/array?\"), \"\\\".\"), \"\\nSo I went on ahead and updated the snippet:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yaml\"\n  }, \"---\\nkey: !!ruby/array [1, 2]\\n\")), mdx(\"p\", null, \"And as expected, Ruby returns the correct result:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ruby\"\n  }, \"{\\\"key\\\" => [1, 2]}\\n\")), mdx(\"p\", null, \"Our friend Python on the other hand, has some issues here:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-plain\"\n  }, \"...snipped...\\nyaml.constructor.ConstructorError: could not determine a\\nconstructor for the tag 'tag:yaml.org,2002:ruby/array'\\n  in \\\"<unicode string>\\\", line 1, column 6:\\n    key: !!ruby/array [1, 2]\\n\")), mdx(\"p\", null, \"In the above example we see that the Python parser throws an error because it can't find the\\ncorrect constructor for the tag. When Ruby finds a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"language specific\"), \" tag that it doesn't know\\nhow to use, it is simply ignored. I think both languages have a different point of view where\\nPython is more \\\"demanding\\\" about what kind of YAML you feed it and Ruby tries to \\\"cushion\\\" your\\nexperience whenever it can.\"), mdx(\"p\", null, \"So thank you Ruby (at least MRI Ruby) for supporting and treating\\nthese Pythonic types as if they were your own \\u2665\\uFE0F\"), mdx(\"h2\", null, \"Integer notation\"), mdx(\"p\", null, \"This is a small one, and part of multiple programming languages to improve readability of\\nlarge integers / binary numbers. YAML allows the usage of _ characters to \\\"group\\\" numbers,\\ne.g. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"1000000000\"), \" vs \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"1_000_000_000\"), \". I think the latter is many more times more readable and\\ntherefore think that YAML deserves a honorable mention for including this awesome feat! \\uD83D\\uDC4D\"), mdx(\"h2\", null, \"Sexagesimal numbers?\"), mdx(\"p\", null, \"We've already seen some weird behavior with some unquoted string values magically turning\\ninto booleans but there is more! YAML parses numbers in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ii:jj\"), \" format in base 60! For example, in Ruby:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ruby\"\n  }, \"YAML.load(\\\"key: 12:30:00\\\")\\n# => {\\\"key\\\"=>45000}\\n\")), mdx(\"p\", null, \"While the result is \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://yaml.org/type/float.html\",\n    \"title\": \"Visit float type documentation on yaml.org\"\n  }, \"following the spec\"), \", it is more often than\\nnot undesired. It becomes more interesting when the digit starts with a leading \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0\"), \". In Ruby:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ruby\"\n  }, \"YAML.load(\\\"key: 01:30:00\\\")\\n# => {\\\"key\\\"=>5400}\\n\")), mdx(\"p\", null, \"Whereas in Python:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"  yaml.safe_load(\\\"key: 01:30:00\\\")\\n  # => {'key': '01:30:00'}\\n\")), mdx(\"p\", null, \"Ruby seems to be trying to \\\"fix\\\" this by trimming the leading \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0\"), \" and parsing the rest in base 60 whereas\\nPython sees that this value is not valid \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ii:jj\"), \" format. I am not sure why this is but my guess is what\\nwe're going to talk about next.\"), mdx(\"h2\", null, \"Octal numbers\"), mdx(\"p\", null, \"If your YAML contains integer values that start with a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0\"), \" and do not contain digits greater than \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"7\"), \",\\nthey will be parsed as octal values. In Ruby:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ruby\"\n  }, \"# parsed as octal\\nYAML.load(\\\"key: 0123\\\")\\n# => {\\\"key\\\": 83}\\n\\n# parsed 'normally'\\nYAML.load(\\\"key: 01238\\\")\\n# => {\\\"key\\\": \\\"01238\\\"}\\n\")), mdx(\"p\", null, \"Python does exactly the same thing in this case. To get back to the previous example, I think Python\\nsees the value \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"01:30:00\"), \" as an invalid octal number and therefore chooses to parse it as a string.\"), mdx(\"h2\", null, \"Complex keys\"), mdx(\"p\", null, \"Aside from string keys, YAML won't complain if you want to use floats:\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"1.1: hello there\"), \" => \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"{1.1 => \\\"hello there\\\"}\"), \" but this is still a simple key.\\nIt \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"will\"), \" complain about using a list or hash as key: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[1, 2, 3]: hello there\"), \" => \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"error\"), \".\\nBoth the Ruby and Python parsers give an error when trying either.\"), mdx(\"p\", null, \"The solution is to use a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"language specific\"), \" tag. This can be used to create keys that are complex\\ndata types such as a Ruby Array or Python Tuple.\"), mdx(\"p\", null, \"A complex key is created by first inserting a question mark followed by a space, followed by the\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"language specific\"), \" tag and the final value of the key. Then, on a new line, the value is added as usual,\\nstarting with a colon followed by a space character and the value of the key:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yaml\"\n  }, \"  ---\\n  ? !!python/tuple [1, 2]\\n  : hello\\n\")), mdx(\"p\", null, \"In Python, this will result in:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"{(1, 2): 'hello'}\\n\")), mdx(\"p\", null, \"Ruby on the other hand, has no \\\"Tuple\\\" type (nor did I expect it to understand the python tags)\\nand uses the thing that most closely resembles it, an Array:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ruby\"\n  }, \"{[1, 2] => \\\"hello\\\"}\\n\")), mdx(\"p\", null, \"So while it is a bit awkward and not very portable, still something useful to know just in case :)\"), mdx(\"h2\", null, \"Comments\"), mdx(\"p\", null, \"We've already seen what kind of beast YAML actually is under the hood, I actually learned new things\\nmyself \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"while writing this post\"), \" since I ran every example through both the Python and Ruby REPL at the\\nsame time (Thank you tmux pane-synchronization \\u2665\\uFE0F) and it doesn't stop there! Another\\nseemingly-trivial-yet-missing-from-JSON feature would be the fact that you can add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"# comments\"), \".\"), mdx(\"p\", null, \"In JSON, comments aren't supported but of course, YAML has our back and lets us do pretty much\\nwhatever we want, a comment starts with a # sign:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yaml\"\n  }, \"---\\nsome: yaml\\n# oh noes! A comment\\nno: problem\\n\")), mdx(\"p\", null, \"Both Ruby and Python simply ignore the comment:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ruby\"\n  }, \"{\\\"key\\\"=>[1, 2], \\\"key2\\\"=>\\\"no problem\\\"}\\n\")), mdx(\"h2\", null, \"Summary\"), mdx(\"p\", null, \"In short, this post described the following features:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Inheritance / defaults\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Write JSON within YAML\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Ruby Symbols as keys\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Multiline strings\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Quoted strings\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Casting values\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Integer notation\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Sexagesimal numbers?\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Octal numbers\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Complex keys\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Comments\"))), mdx(\"p\", null, \"YAML is certainly a versatile marku...lang... yeah never mind that :) But seriously though, YAML is indeed very versatile, it can do lots of things as you have hopefully seen in the examples.\"), mdx(\"p\", null, \"The REPLS used for testing were \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/pry/pry\",\n    \"title\": \"Visit pry/pry repository\"\n  }, \"pry\"), \" for Ruby and Python's builtin REPL.\\nThe Ruby parser used was \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://ruby-doc.org/stdlib-2.4.2/libdoc/yaml/rdoc/YAML.html\",\n    \"title\": \"Visit ruby-doc.org YAML documentation\"\n  }, \"Yaml\"), \" on Ruby (MRI) 2.4.1 and for Python, \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://pyyaml.org/wiki/PyYAMLDocumentation\",\n    \"title\": \"Visit pyyaml.org YAML documentation\"\n  }, \"pyyaml\"), \" was used on Python 3.6.2.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Post update\"), \": During the process of updating this post, I used pry for Ruby (MRI) 2.5.1 and Python's (3.6.7) builtin REPL. The same libraries were used for testing.\"), mdx(\"h2\", null, \"Conclusion\"), mdx(\"p\", null, \"I think YAML is great! Every experience I've had so far with YAML has been a positive one, wether it includes writing thousands of lines or debugging an issue. Even writing this post was a pleasure, I just took my time, opened my favorite REPL's with pane-sync on to reduce typing and started compiling information and examples, sometimes with side-effects I didn't even anticipate which led to interesting results.\"), mdx(\"p\", null, \"I'm pretty sure I've missed some things considering what we've just witnessed earlier in the Casting Values section, there are probably lots more of these nuances between various other parsers.\"), mdx(\"p\", null, \"From this point on, I hope that your YAML experience will also be great, it is a powerful tool to be able to wield, and I also hope you learned something new.\"), mdx(\"p\", null, \"Cheers!\"), mdx(\"p\", null, \"\\uD83D\\uDC4B\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p><strong>Update 08–11–2018:</strong> Thank you <a href=\"https://medium.com/@abitrolly\" title=\"Visit Anatoli Babenia on Medium\">Anatoli Babenia</a>\nfor pointing to the base 60 parsing &#x27;feature&#x27; in the <a href=\"https://docs.docker.com/compose/compose-file/compose-file-v2/#ports\" title=\"Visit base 60 parsing section on docs.docker.com\"><code>docker-compose</code></a> documentation.\nIt led to me finding another great resource and added it along with some new content\nto this post.</p><figure class=\"media_figure__1BF98\"><div class=\"lazyload-wrapper \"><div style=\"padding-bottom:41.22222222222222%\"></div></div><figcaption class=\"media_alt__xSx7S\">yaml.org homepage</figcaption></figure><p>In this post I want to talk about <a href=\"http://yaml.org/\" title=\"Visit yaml.org\">YAML</a>.\nLike the very popular <a href=\"http://json.org/\" title=\"Visit json.org\">JSON</a> format, it is a file format\nthat allows you to store data in a structured way. Last week I had a\ndiscussion with a colleague about an unexpected output value when parsing\nYAML to a Ruby hash. The YAML data looks like this:</p><pre class=\"prism-code language-yaml\" style=\"background-color:#2a2734;color:#9a86fd\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token punctuation\" style=\"color:#6c6783\">---</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token key atrule\">some_key</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">  </span><span class=\"token key atrule\">some_other_key</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> nil</span></div></pre><p>When parsed in Ruby, it looks like this:</p><pre class=\"prism-code language-ruby\" style=\"background-color:#2a2734;color:#9a86fd\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token punctuation\" style=\"color:#6c6783\">{</span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;some_key&#x27;</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">{</span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;some_other_key&#x27;</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;nil&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">}</span><span class=\"token punctuation\" style=\"color:#6c6783\">}</span></div></pre><p>And the equivalent Python output:</p><pre class=\"prism-code language-python\" style=\"background-color:#2a2734;color:#9a86fd\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token punctuation\" style=\"color:#6c6783\">{</span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;some_key&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">{</span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;some_other_key&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;nil&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">}</span><span class=\"token punctuation\" style=\"color:#6c6783\">}</span></div></pre><p>The confusion was about the value of <code>some_other_key</code> which we\nboth thought would become <code>nil</code> instead of <code>&#x27;nil&#x27;</code>. I mentioned to my\ncolleague that if he wanted to get a nil value, he might as well\nleave it completely empty:</p><pre class=\"prism-code language-yaml\" style=\"background-color:#2a2734;color:#9a86fd\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token punctuation\" style=\"color:#6c6783\">---</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token key atrule\">some_key</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">  some_other_key</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span></div></pre><p>Which indeed, leads to the expected result in Ruby:</p><pre class=\"prism-code language-ruby\" style=\"background-color:#2a2734;color:#9a86fd\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token punctuation\" style=\"color:#6c6783\">{</span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;some_key&#x27;</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">{</span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;some_other_key&#x27;</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\"> </span><span class=\"token keyword\" style=\"color:#ffcc99\">nil</span><span class=\"token punctuation\" style=\"color:#6c6783\">}</span><span class=\"token punctuation\" style=\"color:#6c6783\">}</span></div></pre><p>And of course, in Python too:</p><pre class=\"prism-code language-python\" style=\"background-color:#2a2734;color:#9a86fd\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token punctuation\" style=\"color:#6c6783\">{</span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;some_key&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">{</span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;some_other_key&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> </span><span class=\"token boolean\" style=\"color:#ffcc99\">None</span><span class=\"token punctuation\" style=\"color:#6c6783\">}</span><span class=\"token punctuation\" style=\"color:#6c6783\">}</span></div></pre><p>At this point we became curious, I mean, there must be <em>some</em> kind of <code>nil</code> value,\nright? So we ventured to Google and well, found an answer in no time at all :)\nThere is a <code>nil</code> value in YAML, it&#x27;s called <a href=\"http://yaml.org/type/null.html\" title=\"Visit null type documentation on yaml.org\"><code>null</code></a>!</p><pre class=\"prism-code language-yaml\" style=\"background-color:#2a2734;color:#9a86fd\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token punctuation\" style=\"color:#6c6783\">---</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token key atrule\">some_key</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">  </span><span class=\"token key atrule\">some_other_key</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> </span><span class=\"token null important\" style=\"font-weight:bold;color:#c4b9fe\">null</span></div></pre><p>Also yields the expected result for both Ruby and Python.</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"and-this-was-only-the-start\"></a><a class=\"heading_link__1aoFY\" href=\"#and-this-was-only-the-start\">And this was only the start...</a></h2><p>Since that moment I&#x27;ve been wondering what <em>more</em> is there to YAML.\nI&#x27;ve written literally <a href=\"https://github.com/SidOfc/browserino/tree/master/spec/files\" title=\"Visit SidOfc/browserino YAML test files directory\">thousands of lines of YAML</a>\ntest data for one of <a href=\"http://github.com/sidofc/browserino\" title=\"Visit SidOfc/browserino github repository\">my gems</a>\nbut I&#x27;ve never really wondered what the language could really do.</p><p>What I also noticed is that there aren&#x27;t all that many YAML posts out there,\nsome resources I used while gathering information for this post:</p><ul><li><p><a href=\"https://learnxinyminutes.com/docs/yaml/\" title=\"Visit the learnxinyminutes.com YAML docs\">https://learnxinyminutes.com/docs/yaml/</a></p></li><li><p><a href=\"https://yaml.org/\" title=\"Visit yaml.org\">https://yaml.org/</a></p></li><li><p><a href=\"https://codebeautify.org/yaml-validator\" title=\"Visit the codebeautify YAML validator\">https://codebeautify.org/yaml-validator</a></p></li><li><p><a href=\"https://docs.saltstack.com/en/latest/topics/yaml/\" title=\"visit the doc.saltstack.com YAML topic\">https://docs.saltstack.com/en/latest/topics/yaml/</a></p></li><li><p><a href=\"https://www.yaml.org/spec/1.2/spec.html\" title=\"Visit the YAML specification\">https://www.yaml.org/spec/1.2/spec.html</a></p></li><li><p><a href=\"https://stackoverflow.com/a/1729545/2224331\" title=\"Visit StackOverflow answer\">https://stackoverflow.com/a/1729545/2224331</a></p></li><li><p><a href=\"https://stackoverflow.com/a/16986339/2224331\" title=\"Visit StackOverflow answer\">https://stackoverflow.com/a/16986339/2224331</a></p></li><li><p><a href=\"https://json.org/\" title=\"Visit json.org\">https://json.org/</a></p></li><li><p><a href=\"https://pyyaml.org/wiki/PyYAMLDocumentation\" title=\"Visit pyyaml.org YAML documentation\">https://pyyaml.org/wiki/PyYAMLDocumentation</a></p></li><li><p><a href=\"http://blog.teamlazerbeez.com/2009/04/15/yaml-gotchas/\" title=\"Visit blog.teamlazerbeez.com YAML blog post\">http://blog.teamlazerbeez.com/2009/04/15/yaml-gotchas/</a></p></li></ul><p>So I would like to share some of the features of YAML that you might not know about and also,\nshare some differences between YAML parsers (the Ruby and Python parsers).</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"inheritance\"></a><a class=\"heading_link__1aoFY\" href=\"#inheritance\">Inheritance</a></h2><p>One cool feature, which I first saw when bootstrapping a sample Rails application was that you\ncan define &quot;defaults&quot; using anchors. In Rails, the <code>config/database.yml</code> file contains the\nfollowing content by default:</p><pre class=\"prism-code language-yaml\" style=\"background-color:#2a2734;color:#9a86fd\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token key atrule\">default</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> </span><span class=\"token important\" style=\"font-weight:bold;color:#c4b9fe\">&amp;default</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">  </span><span class=\"token key atrule\">adapter</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> sqlite3</span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">  </span><span class=\"token key atrule\">pool</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> &lt;%= ENV.fetch(&quot;RAILS_MAX_THREADS&quot;) </span><span class=\"token punctuation\" style=\"color:#6c6783\">{</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#e09142\">5</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">}</span><span class=\"token plain\"> %</span><span class=\"token punctuation\" style=\"color:#6c6783\">&gt;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">  </span><span class=\"token key atrule\">timeout</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#e09142\">5000</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\" style=\"display:inline-block\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token key atrule\">development</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">  </span><span class=\"token key atrule\">&lt;&lt;</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> </span><span class=\"token important\" style=\"font-weight:bold;color:#c4b9fe\">*default</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">  </span><span class=\"token key atrule\">database</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> db/development.sqlite3</span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\" style=\"display:inline-block\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token key atrule\">test</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">  </span><span class=\"token key atrule\">&lt;&lt;</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> </span><span class=\"token important\" style=\"font-weight:bold;color:#c4b9fe\">*default</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">  </span><span class=\"token key atrule\">database</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> db/test.sqlite3</span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\" style=\"display:inline-block\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token key atrule\">production</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">  </span><span class=\"token key atrule\">&lt;&lt;</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> </span><span class=\"token important\" style=\"font-weight:bold;color:#c4b9fe\">*default</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">  </span><span class=\"token key atrule\">database</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> db/production.sqlite3</span></div></pre><p>As you can see, there is a <code>default</code> key followed by <code>&amp;default</code>. The <code>&amp;default</code> keyword here represents\nthe anchor. Then, in another YAML node, you can inherit properties from that anchor by adding a\nspecial key <code>&lt;&lt;</code> followed by <code>*default</code> in this case. To overwrite a default value, simply add the key\nyou want to overwrite with its new value below the <code>&lt;&lt;:* default</code> line.</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"write-json-in-your-yaml\"></a><a class=\"heading_link__1aoFY\" href=\"#write-json-in-your-yaml\">Write JSON in your YAML</a></h2><p>Another handy thing to know is that you can write JSON inside YAML, this is pretty neat and to be\nexpected as <a href=\"https://stackoverflow.com/questions/1726802/what-is-the-difference-between-yaml-and-json-when-to-prefer-one-over-the-other/1729545#1729545\" title=\"Visit StackOverflow answer\">YAML is a superset of JSON</a> (or well, since version 1.2 it is at least).</p><p>The following YAML:</p><pre class=\"prism-code language-yaml\" style=\"background-color:#2a2734;color:#9a86fd\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token punctuation\" style=\"color:#6c6783\">---</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token key atrule\">key</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">{</span><span class=\"token key atrule\">&quot;some&quot;</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&quot;json&quot;</span><span class=\"token punctuation\" style=\"color:#6c6783\">}</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token key atrule\">another</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token number\" style=\"color:#e09142\">1</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#e09142\">2</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#e09142\">3</span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span></div></pre><p>Parsed in Ruby this results in:</p><pre class=\"prism-code language-ruby\" style=\"background-color:#2a2734;color:#9a86fd\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token punctuation\" style=\"color:#6c6783\">{</span><span class=\"token string\" style=\"color:#ffcc99\">&quot;key&quot;</span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token punctuation\" style=\"color:#6c6783\">{</span><span class=\"token string\" style=\"color:#ffcc99\">&quot;some&quot;</span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token string\" style=\"color:#ffcc99\">&quot;json&quot;</span><span class=\"token punctuation\" style=\"color:#6c6783\">}</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&quot;another&quot;</span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token number\" style=\"color:#e09142\">1</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#e09142\">2</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#e09142\">3</span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token punctuation\" style=\"color:#6c6783\">}</span></div></pre><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"yaml-keys-as-ruby-symbols\"></a><a class=\"heading_link__1aoFY\" href=\"#yaml-keys-as-ruby-symbols\">YAML keys as Ruby symbols</a></h2><p>This one I looked for specifically when I started a major rewrite of one of my gems and decided\nto migrate test data out of Ruby into YAML. I was curious to see if YAML could actually store\nRuby <em>Symbols</em> instead of <em>Strings</em>. While I didn&#x27;t have thousands of tests written in YAML at the\ntime, I thought &quot;Why not?&quot;. The answer was that indeed, the Ruby parser understands symbols written\nin YAML, and treats them as such when parsing in Ruby.</p><pre class=\"prism-code language-yaml\" style=\"background-color:#2a2734;color:#9a86fd\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token punctuation\" style=\"color:#6c6783\">---</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token key atrule\">:my_symbol_key</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">or_value</span></div></pre><p>In Ruby, evaluates to the following:</p><pre class=\"prism-code language-ruby\" style=\"background-color:#2a2734;color:#9a86fd\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token punctuation\" style=\"color:#6c6783\">{</span><span class=\"token symbol\">:my_symbol_key</span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token symbol\">:or_value</span><span class=\"token punctuation\" style=\"color:#6c6783\">}</span></div></pre><p>Whereas the same YAML parsed in Python outputs:</p><pre class=\"prism-code language-python\" style=\"background-color:#2a2734;color:#9a86fd\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token punctuation\" style=\"color:#6c6783\">{</span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;:my_symbol_key&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;:or_value&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">}</span></div></pre><p>I only recently gave this some thought, if I were to port my gem to Python for whatever reason,\nI couldn&#x27;t &quot;conveniently&quot; use this YAML anymore and for anyone wanting to use the gem&#x27;s YAML\noutside of Ruby, it would contain useless <code>:</code> characters at the start of every &quot;symbol&quot;.\nSo yeah, while awesome, use with caution! I&#x27;m considering rewriting my gem&#x27;s YAML to just\nuse strings instead of symbols because of this &quot;exclusive&quot; Ruby feature :)</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"multiline-strings-yaml-s-got-your-back\"></a><a class=\"heading_link__1aoFY\" href=\"#multiline-strings-yaml-s-got-your-back\">Multiline strings? YAML&#x27;s got your back!</a></h2><p>Another topic often discussed in programming languages in general is how to handle multiline\nstrings, various languages have different solutions to the same problem. YAML has it&#x27;s own\ntwo solutions. The pipe (<code>|</code>) character and the greater than (<code>&gt;</code>) sign.</p><p>The pipe notation, also referred to as &quot;literal block&quot;:</p><pre class=\"prism-code language-yaml\" style=\"background-color:#2a2734;color:#9a86fd\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token key atrule\">literal</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">|</span><span class=\"token scalar string\" style=\"color:#ffcc99\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token scalar string\" style=\"color:#ffcc99\">    This block of text will be the value of the &#x27;literal&#x27; key,</span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token scalar string\" style=\"color:#ffcc99\">    with line breaks being preserved.</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\" style=\"display:inline-block\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">    It continues until de</span><span class=\"token punctuation\" style=\"color:#6c6783\">-</span><span class=\"token plain\">dented</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> leading indentation is</span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">    stripped.</span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\" style=\"display:inline-block\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">        Any lines that are &#x27;more</span><span class=\"token punctuation\" style=\"color:#6c6783\">-</span><span class=\"token plain\">indented&#x27; keep the rest</span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">        of their indentation </span><span class=\"token punctuation\" style=\"color:#6c6783\">-</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">        these lines will be indented by 4 spaces.</span></div></pre><p>The greater than sign notation, also referred to as &quot;folded block&quot;:</p><pre class=\"prism-code language-yaml\" style=\"background-color:#2a2734;color:#9a86fd\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token key atrule\">folded</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">&gt;</span><span class=\"token scalar string\" style=\"color:#ffcc99\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token scalar string\" style=\"color:#ffcc99\">    This block of text will be the value of &#x27;folded&#x27;, but this</span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token scalar string\" style=\"color:#ffcc99\">    time, all newlines will be replaced with a single space.</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\" style=\"display:inline-block\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">    Blank lines</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> like above</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> are converted</span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">    to a newline character.</span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\" style=\"display:inline-block\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">        &#x27;More</span><span class=\"token punctuation\" style=\"color:#6c6783\">-</span><span class=\"token plain\">indented&#x27; lines keep their newlines</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> too </span><span class=\"token punctuation\" style=\"color:#6c6783\">-</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">        this text will appear over two lines.</span></div></pre><p><a href=\"https://learnxinyminutes.com/docs/yaml/\" title=\"Visit the learnxinyminutes.com YAML docs\">Both snippets came from here.</a> This post also contains\na lot of other great YAML examples you should definitely check out!</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"quoted-strings-begone\"></a><a class=\"heading_link__1aoFY\" href=\"#quoted-strings-begone\">Quoted strings, begone!</a></h2><p>Unlike its friend JSON, YAML doesn&#x27;t mind if you don&#x27;t put your strings between quotes.\nThe following will output exactly what you would expect:</p><pre class=\"prism-code language-yaml\" style=\"background-color:#2a2734;color:#9a86fd\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token key atrule\">some_key</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> with a string value</span></div></pre><p>In Ruby and Python, the results are the same (output in Ruby):</p><pre class=\"prism-code language-ruby\" style=\"background-color:#2a2734;color:#9a86fd\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token punctuation\" style=\"color:#6c6783\">{</span><span class=\"token string\" style=\"color:#ffcc99\">&quot;some_key&quot;</span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token string\" style=\"color:#ffcc99\">&quot;with a string value&quot;</span><span class=\"token punctuation\" style=\"color:#6c6783\">}</span></div></pre><p>Keys don&#x27;t have to be quoted either, so removing the <code>_</code> from <code>some_key</code> results\nin the following in both Ruby and Python (output in Ruby):</p><pre class=\"prism-code language-ruby\" style=\"background-color:#2a2734;color:#9a86fd\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token punctuation\" style=\"color:#6c6783\">{</span><span class=\"token string\" style=\"color:#ffcc99\">&quot;some key&quot;</span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token string\" style=\"color:#ffcc99\">&quot;with a string value&quot;</span><span class=\"token punctuation\" style=\"color:#6c6783\">}</span></div></pre><p>While this makes copying certain values easier YAML tries to be smart about some\n(more than you might think) of them. When a key with a value of either <code>yes</code>, <code>Yes</code>,\n<code>YES</code>, <code>on</code>, <code>On</code> or <code>ON</code> is present, the resulting value when parsing this YAML will be\na boolean. The same is true for values <code>no</code>, <code>No</code>, <code>NO</code>, <code>off</code>, <code>Off</code> and <code>OFF</code>.</p><p>The following example shows Ruby syntax but Python 3.6 parsed it exactly the same.</p><pre class=\"prism-code language-ruby\" style=\"background-color:#2a2734;color:#9a86fd\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token comment\" style=\"color:#9390a1\"># All the following equal true</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token constant\">YAML</span><span class=\"token punctuation\" style=\"color:#6c6783\">.</span><span class=\"token plain\">load</span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token string\" style=\"color:#ffcc99\">&quot;key: Yes&quot;</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token constant\">YAML</span><span class=\"token punctuation\" style=\"color:#6c6783\">.</span><span class=\"token plain\">load</span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token string\" style=\"color:#ffcc99\">&quot;key: yes&quot;</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token constant\">YAML</span><span class=\"token punctuation\" style=\"color:#6c6783\">.</span><span class=\"token plain\">load</span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token string\" style=\"color:#ffcc99\">&quot;key: YES&quot;</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token constant\">YAML</span><span class=\"token punctuation\" style=\"color:#6c6783\">.</span><span class=\"token plain\">load</span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token string\" style=\"color:#ffcc99\">&quot;key: on&quot;</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token constant\">YAML</span><span class=\"token punctuation\" style=\"color:#6c6783\">.</span><span class=\"token plain\">load</span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token string\" style=\"color:#ffcc99\">&quot;key: On&quot;</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token constant\">YAML</span><span class=\"token punctuation\" style=\"color:#6c6783\">.</span><span class=\"token plain\">load</span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token string\" style=\"color:#ffcc99\">&quot;key: ON&quot;</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#9390a1\"># =&gt; {&quot;key&quot;=&gt;true}</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\" style=\"display:inline-block\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#9390a1\"># All the following equal false</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token constant\">YAML</span><span class=\"token punctuation\" style=\"color:#6c6783\">.</span><span class=\"token plain\">load</span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token string\" style=\"color:#ffcc99\">&quot;key: no&quot;</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token constant\">YAML</span><span class=\"token punctuation\" style=\"color:#6c6783\">.</span><span class=\"token plain\">load</span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token string\" style=\"color:#ffcc99\">&quot;key: No&quot;</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token constant\">YAML</span><span class=\"token punctuation\" style=\"color:#6c6783\">.</span><span class=\"token plain\">load</span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token string\" style=\"color:#ffcc99\">&quot;key: NO&quot;</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token constant\">YAML</span><span class=\"token punctuation\" style=\"color:#6c6783\">.</span><span class=\"token plain\">load</span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token string\" style=\"color:#ffcc99\">&quot;key: off&quot;</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token constant\">YAML</span><span class=\"token punctuation\" style=\"color:#6c6783\">.</span><span class=\"token plain\">load</span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token string\" style=\"color:#ffcc99\">&quot;key: Off&quot;</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token constant\">YAML</span><span class=\"token punctuation\" style=\"color:#6c6783\">.</span><span class=\"token plain\">load</span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token string\" style=\"color:#ffcc99\">&quot;key: OFF&quot;</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#9390a1\"># =&gt; {&quot;key&quot;=&gt;false}</span></div></pre><p>If you expect your program to see these values as strings, the solution is to quote\nthe string or to cast the value as we&#x27;ll see in the next section.</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"casting-values\"></a><a class=\"heading_link__1aoFY\" href=\"#casting-values\">Casting values</a></h2><p>If you want to ensure that a key has a value of a specific type, you can cast values\nexplicitly: <code>key: !!str 0.5</code> =&gt; <code>{&quot;key&quot; =&gt; &quot;0.5&quot;}</code> in both Ruby and Python. Likewise\nkey: <code>!!float &#x27;0.5&#x27;</code> =&gt; <code>{&quot;key&quot; =&gt; 0.5}</code> as well.</p><p>Some parsers actually implement <em>language specific</em> tags. These can be used to create specific data structures for that given language:</p><pre class=\"prism-code language-yaml\" style=\"background-color:#2a2734;color:#9a86fd\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token punctuation\" style=\"color:#6c6783\">---</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token key atrule\">key</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> </span><span class=\"token tag\" style=\"color:#e09142\">!!python/tuple</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token number\" style=\"color:#e09142\">1</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#e09142\">2</span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span></div></pre><p>Results in the following in Python:</p><pre class=\"prism-code language-python\" style=\"background-color:#2a2734;color:#9a86fd\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token punctuation\" style=\"color:#6c6783\">{</span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;key&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token number\" style=\"color:#e09142\">1</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#e09142\">2</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token punctuation\" style=\"color:#6c6783\">}</span></div></pre><p>What REALLY surprised me here was that the <em>Ruby parser turned it into an Array instead:</em></p><pre class=\"prism-code language-ruby\" style=\"background-color:#2a2734;color:#9a86fd\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token punctuation\" style=\"color:#6c6783\">{</span><span class=\"token string\" style=\"color:#ffcc99\">&quot;key&quot;</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token number\" style=\"color:#e09142\">1</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#e09142\">2</span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token punctuation\" style=\"color:#6c6783\">}</span></div></pre><p>So I thought to myself, <em>&quot;What if I change <code>!!python/tuple</code> to <code>!!ruby/array?</code>&quot;.</em>\nSo I went on ahead and updated the snippet:</p><pre class=\"prism-code language-yaml\" style=\"background-color:#2a2734;color:#9a86fd\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token punctuation\" style=\"color:#6c6783\">---</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token key atrule\">key</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> </span><span class=\"token tag\" style=\"color:#e09142\">!!ruby/array</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token number\" style=\"color:#e09142\">1</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#e09142\">2</span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span></div></pre><p>And as expected, Ruby returns the correct result:</p><pre class=\"prism-code language-ruby\" style=\"background-color:#2a2734;color:#9a86fd\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token punctuation\" style=\"color:#6c6783\">{</span><span class=\"token string\" style=\"color:#ffcc99\">&quot;key&quot;</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token number\" style=\"color:#e09142\">1</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#e09142\">2</span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token punctuation\" style=\"color:#6c6783\">}</span></div></pre><p>Our friend Python on the other hand, has some issues here:</p><pre class=\"prism-code language-plain\" style=\"background-color:#2a2734;color:#9a86fd\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">...snipped...</span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">yaml.constructor.ConstructorError: could not determine a</span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">constructor for the tag &#x27;tag:yaml.org,2002:ruby/array&#x27;</span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">  in &quot;&lt;unicode string&gt;&quot;, line 1, column 6:</span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">    key: !!ruby/array [1, 2]</span></div></pre><p>In the above example we see that the Python parser throws an error because it can&#x27;t find the\ncorrect constructor for the tag. When Ruby finds a <em>language specific</em> tag that it doesn&#x27;t know\nhow to use, it is simply ignored. I think both languages have a different point of view where\nPython is more &quot;demanding&quot; about what kind of YAML you feed it and Ruby tries to &quot;cushion&quot; your\nexperience whenever it can.</p><p>So thank you Ruby (at least MRI Ruby) for supporting and treating\nthese Pythonic types as if they were your own ♥️</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"integer-notation\"></a><a class=\"heading_link__1aoFY\" href=\"#integer-notation\">Integer notation</a></h2><p>This is a small one, and part of multiple programming languages to improve readability of\nlarge integers / binary numbers. YAML allows the usage of _ characters to &quot;group&quot; numbers,\ne.g. <code>1000000000</code> vs <code>1_000_000_000</code>. I think the latter is many more times more readable and\ntherefore think that YAML deserves a honorable mention for including this awesome feat! 👍</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"sexagesimal-numbers\"></a><a class=\"heading_link__1aoFY\" href=\"#sexagesimal-numbers\">Sexagesimal numbers?</a></h2><p>We&#x27;ve already seen some weird behavior with some unquoted string values magically turning\ninto booleans but there is more! YAML parses numbers in <code>ii:jj</code> format in base 60! For example, in Ruby:</p><pre class=\"prism-code language-ruby\" style=\"background-color:#2a2734;color:#9a86fd\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token constant\">YAML</span><span class=\"token punctuation\" style=\"color:#6c6783\">.</span><span class=\"token plain\">load</span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token string\" style=\"color:#ffcc99\">&quot;key: 12:30:00&quot;</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#9390a1\"># =&gt; {&quot;key&quot;=&gt;45000}</span></div></pre><p>While the result is <a href=\"http://yaml.org/type/float.html\" title=\"Visit float type documentation on yaml.org\">following the spec</a>, it is more often than\nnot undesired. It becomes more interesting when the digit starts with a leading <code>0</code>. In Ruby:</p><pre class=\"prism-code language-ruby\" style=\"background-color:#2a2734;color:#9a86fd\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token constant\">YAML</span><span class=\"token punctuation\" style=\"color:#6c6783\">.</span><span class=\"token plain\">load</span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token string\" style=\"color:#ffcc99\">&quot;key: 01:30:00&quot;</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#9390a1\"># =&gt; {&quot;key&quot;=&gt;5400}</span></div></pre><p>Whereas in Python:</p><pre class=\"prism-code language-python\" style=\"background-color:#2a2734;color:#9a86fd\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">yaml</span><span class=\"token punctuation\" style=\"color:#6c6783\">.</span><span class=\"token plain\">safe_load</span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token string\" style=\"color:#ffcc99\">&quot;key: 01:30:00&quot;</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">  </span><span class=\"token comment\" style=\"color:#9390a1\"># =&gt; {&#x27;key&#x27;: &#x27;01:30:00&#x27;}</span></div></pre><p>Ruby seems to be trying to &quot;fix&quot; this by trimming the leading <code>0</code> and parsing the rest in base 60 whereas\nPython sees that this value is not valid <code>ii:jj</code> format. I am not sure why this is but my guess is what\nwe&#x27;re going to talk about next.</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"octal-numbers\"></a><a class=\"heading_link__1aoFY\" href=\"#octal-numbers\">Octal numbers</a></h2><p>If your YAML contains integer values that start with a <code>0</code> and do not contain digits greater than <code>7</code>,\nthey will be parsed as octal values. In Ruby:</p><pre class=\"prism-code language-ruby\" style=\"background-color:#2a2734;color:#9a86fd\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token comment\" style=\"color:#9390a1\"># parsed as octal</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token constant\">YAML</span><span class=\"token punctuation\" style=\"color:#6c6783\">.</span><span class=\"token plain\">load</span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token string\" style=\"color:#ffcc99\">&quot;key: 0123&quot;</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#9390a1\"># =&gt; {&quot;key&quot;: 83}</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\" style=\"display:inline-block\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#9390a1\"># parsed &#x27;normally&#x27;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token constant\">YAML</span><span class=\"token punctuation\" style=\"color:#6c6783\">.</span><span class=\"token plain\">load</span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token string\" style=\"color:#ffcc99\">&quot;key: 01238&quot;</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#9390a1\"># =&gt; {&quot;key&quot;: &quot;01238&quot;}</span></div></pre><p>Python does exactly the same thing in this case. To get back to the previous example, I think Python\nsees the value <code>01:30:00</code> as an invalid octal number and therefore chooses to parse it as a string.</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"complex-keys\"></a><a class=\"heading_link__1aoFY\" href=\"#complex-keys\">Complex keys</a></h2><p>Aside from string keys, YAML won&#x27;t complain if you want to use floats:\n<code>1.1: hello there</code> =&gt; <code>{1.1 =&gt; &quot;hello there&quot;}</code> but this is still a simple key.\nIt <em>will</em> complain about using a list or hash as key: <code>[1, 2, 3]: hello there</code> =&gt; <code>error</code>.\nBoth the Ruby and Python parsers give an error when trying either.</p><p>The solution is to use a <em>language specific</em> tag. This can be used to create keys that are complex\ndata types such as a Ruby Array or Python Tuple.</p><p>A complex key is created by first inserting a question mark followed by a space, followed by the\n<em>language specific</em> tag and the final value of the key. Then, on a new line, the value is added as usual,\nstarting with a colon followed by a space character and the value of the key:</p><pre class=\"prism-code language-yaml\" style=\"background-color:#2a2734;color:#9a86fd\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token punctuation\" style=\"color:#6c6783\">---</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">  </span><span class=\"token punctuation\" style=\"color:#6c6783\">?</span><span class=\"token plain\"> </span><span class=\"token tag\" style=\"color:#e09142\">!!python/tuple</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token number\" style=\"color:#e09142\">1</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#e09142\">2</span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">  </span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> hello</span></div></pre><p>In Python, this will result in:</p><pre class=\"prism-code language-python\" style=\"background-color:#2a2734;color:#9a86fd\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token punctuation\" style=\"color:#6c6783\">{</span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token number\" style=\"color:#e09142\">1</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#e09142\">2</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;hello&#x27;</span><span class=\"token punctuation\" style=\"color:#6c6783\">}</span></div></pre><p>Ruby on the other hand, has no &quot;Tuple&quot; type (nor did I expect it to understand the python tags)\nand uses the thing that most closely resembles it, an Array:</p><pre class=\"prism-code language-ruby\" style=\"background-color:#2a2734;color:#9a86fd\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token punctuation\" style=\"color:#6c6783\">{</span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token number\" style=\"color:#e09142\">1</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#e09142\">2</span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&quot;hello&quot;</span><span class=\"token punctuation\" style=\"color:#6c6783\">}</span></div></pre><p>So while it is a bit awkward and not very portable, still something useful to know just in case :)</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"comments\"></a><a class=\"heading_link__1aoFY\" href=\"#comments\">Comments</a></h2><p>We&#x27;ve already seen what kind of beast YAML actually is under the hood, I actually learned new things\nmyself <em>while writing this post</em> since I ran every example through both the Python and Ruby REPL at the\nsame time (Thank you tmux pane-synchronization ♥️) and it doesn&#x27;t stop there! Another\nseemingly-trivial-yet-missing-from-JSON feature would be the fact that you can add <code># comments</code>.</p><p>In JSON, comments aren&#x27;t supported but of course, YAML has our back and lets us do pretty much\nwhatever we want, a comment starts with a # sign:</p><pre class=\"prism-code language-yaml\" style=\"background-color:#2a2734;color:#9a86fd\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token punctuation\" style=\"color:#6c6783\">---</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token key atrule\">some</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> yaml</span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#9390a1\"># oh noes! A comment</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token key atrule\">no</span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\"> problem</span></div></pre><p>Both Ruby and Python simply ignore the comment:</p><pre class=\"prism-code language-ruby\" style=\"background-color:#2a2734;color:#9a86fd\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token punctuation\" style=\"color:#6c6783\">{</span><span class=\"token string\" style=\"color:#ffcc99\">&quot;key&quot;</span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token number\" style=\"color:#e09142\">1</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#e09142\">2</span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token punctuation\" style=\"color:#6c6783\">,</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&quot;key2&quot;</span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token string\" style=\"color:#ffcc99\">&quot;no problem&quot;</span><span class=\"token punctuation\" style=\"color:#6c6783\">}</span></div></pre><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"summary\"></a><a class=\"heading_link__1aoFY\" href=\"#summary\">Summary</a></h2><p>In short, this post described the following features:</p><ul><li><p>Inheritance / defaults</p></li><li><p>Write JSON within YAML</p></li><li><p>Ruby Symbols as keys</p></li><li><p>Multiline strings</p></li><li><p>Quoted strings</p></li><li><p>Casting values</p></li><li><p>Integer notation</p></li><li><p>Sexagesimal numbers?</p></li><li><p>Octal numbers</p></li><li><p>Complex keys</p></li><li><p>Comments</p></li></ul><p>YAML is certainly a versatile marku...lang... yeah never mind that :) But seriously though, YAML is indeed very versatile, it can do lots of things as you have hopefully seen in the examples.</p><p>The REPLS used for testing were <a href=\"https://github.com/pry/pry\" title=\"Visit pry/pry repository\">pry</a> for Ruby and Python&#x27;s builtin REPL.\nThe Ruby parser used was <a href=\"https://ruby-doc.org/stdlib-2.4.2/libdoc/yaml/rdoc/YAML.html\" title=\"Visit ruby-doc.org YAML documentation\">Yaml</a> on Ruby (MRI) 2.4.1 and for Python, <a href=\"https://pyyaml.org/wiki/PyYAMLDocumentation\" title=\"Visit pyyaml.org YAML documentation\">pyyaml</a> was used on Python 3.6.2.</p><p><strong>Post update</strong>: During the process of updating this post, I used pry for Ruby (MRI) 2.5.1 and Python&#x27;s (3.6.7) builtin REPL. The same libraries were used for testing.</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"conclusion\"></a><a class=\"heading_link__1aoFY\" href=\"#conclusion\">Conclusion</a></h2><p>I think YAML is great! Every experience I&#x27;ve had so far with YAML has been a positive one, wether it includes writing thousands of lines or debugging an issue. Even writing this post was a pleasure, I just took my time, opened my favorite REPL&#x27;s with pane-sync on to reduce typing and started compiling information and examples, sometimes with side-effects I didn&#x27;t even anticipate which led to interesting results.</p><p>I&#x27;m pretty sure I&#x27;ve missed some things considering what we&#x27;ve just witnessed earlier in the Casting Values section, there are probably lots more of these nuances between various other parsers.</p><p>From this point on, I hope that your YAML experience will also be great, it is a powerful tool to be able to wield, and I also hope you learned something new.</p><p>Cheers!</p><p>👋</p>","scope":{"title":"The greatnesses and gotchas of YAML","description":"YAML is a great language for configuration files, it is a lot more flexible than JSON with comments and inheritance for example. While I was doing some research about YAML I found bits of information scattered all over the place so I attempted to piece the great things and the quirks together in a post!","published":"2017-12-23T07:25:59Z"}},"slug":"the-greatnesses-and-gotchas-of-yaml"},{"title":"A collection of Vim key binds","description":"In my never ending quest for an optimal Vim setup I am always looking for ways to improve. I've used Vim for about two months now and I'm still learning a lot. In this post I'm going to take you through a part of my .vimrc that describes my non-plugin key binds.","published":"2017-09-16T13:11:03Z","readTimeInMinutes":7,"source":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Media, {\n    src: \"/media/posts/vimrc-movement-key-binds.png\",\n    alt: \"A screenshot of my vimrc movement key bindings\",\n    width: \"900\",\n    height: \"315\",\n    \"class\": \"wide\",\n    mdxType: \"Media\"\n  }), mdx(\"p\", null, \"Vim is installed on almost every unix system known to man,\\ntherefore knowing how it works will allow you to work pretty much anywhere.\\nWhy would you create customized mappings that only work on your machine?\"), mdx(\"h2\", null, \"Ease of use\"), mdx(\"p\", null, \"Key binds in Vim are not always the most intuitive to use.\\nTake for instance, moving up or down a paragraph which are bound to \", mdx(\"kbd\", null, \"{\"), \" and \", mdx(\"kbd\", null, \"}\"), \" respectively.\\nI find these binds quite awkward, but like \", mdx(\"kbd\", null, \"w\"), \", they allow you to move a lot faster\\nthan using line wise \", mdx(\"kbd\", null, \"j\"), \" or \", mdx(\"kbd\", null, \"k\"), \". For that reason, I rebound them to \", mdx(\"kbd\", null, \"J\"), \" and \", mdx(\"kbd\", null, \"K\"), \" instead (note their case).\\nSince they apply no useful action in normal mode and they are more easily combined with the \", mdx(\"kbd\", null, \"shift\"), \"\\nkey than \", mdx(\"kbd\", null, \"{\"), \" and \", mdx(\"kbd\", null, \"}\"), \" it made sense to me to map them to something easier to reach.\"), mdx(\"h2\", null, \"Consistency\"), mdx(\"p\", null, \"Some of the key binds are actually inconsistent. Given that there is \", mdx(\"kbd\", null, \"D\"), \" for deleting from cursor to\\nend of line and \", mdx(\"kbd\", null, \"C\"), \" to change from cursor to end of line, but for some reason, \", mdx(\"kbd\", null, \"Y\"), \" does not share the\\n\\\"from cursor to end of line\\\" behavior. We can fix this by overwriting the map and binding \", mdx(\"kbd\", null, \"Y\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"y$\"), \"\\ninstead (visit \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \":h Y\"), \" in Vim), which \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"will\"), \" make it copy from cursor to end of line.\"), mdx(\"h2\", null, \"End bad habits\"), mdx(\"p\", null, \"Vim will definitely put an end to at least \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"most\"), \" of your bad habits. Using the arrow keys to\\nmove around is generally considered a bad thing in my opinion since you have to move your hand\\naway from the home row of your keyboard. Therefore you can unbind them by setting them do do nothing.\\nThe next time you press such key, it will simply... \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"do nothing\"), \" and your brain will rewire itself\\nbased on the negative impulse :)\"), mdx(\"h2\", null, \"My key binds\"), mdx(\"p\", null, \"So without further ado, here are my non-plugin key binds.\"), mdx(\"h3\", null, \"Pairing braces\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-viml\"\n  }, \"inoremap <> <><Left>\\ninoremap () ()<Left>\\ninoremap {} {}<Left>\\ninoremap [] []<Left>\\ninoremap \\\"\\\" \\\"\\\"<Left>\\ninoremap '' ''<Left>\\ninoremap `` ``<Left>\\n\")), mdx(\"p\", null, \"The way I type braces might be weird, but I like it. Basically, whenever I type an opening brace or quote,\\nI close it off and move my cursor between them. This ensures that I always have matching braces and I don't\\nactually have to go back and add them later (especially useful in nesting situations).\"), mdx(\"p\", null, \"What this does is when you type \", mdx(\"kbd\", null, \"<\"), \" followed by \", mdx(\"kbd\", null, \">\"), \" for example, vim will replace it with the same characters,\\nbut it will also \\\"insert\\\" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Left>\"), \" or rather, insert an arrow keypress left which leaves you in this position:\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<|>\"), \" where the bar represents the cursor. You can now type away without having to worry about that closing brace!\"), mdx(\"h3\", null, \"Navigational keys\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-viml\"\n  }, \"nmap <Up>    <Nop>\\nnmap <Down>  <Nop>\\nnmap <Left>  <Nop>\\nnmap <Right> <Nop>\\n\\nmap $ <Nop>\\nmap ^ <Nop>\\nmap { <Nop>\\nmap } <Nop>\\n\\nnoremap K     {\\nnoremap J     }\\nnoremap H     ^\\nnoremap L     $\\nnoremap <C-x> :bp<Bar>bd #<Cr>\\n\")), mdx(\"p\", null, \"I've already discussed the keys \", mdx(\"kbd\", null, \"J\"), \" and \", mdx(\"kbd\", null, \"K\"), \" which are used for moving up and down by paragraph.\\nLikewise \", mdx(\"kbd\", null, \"H\"), \" maps to \", mdx(\"kbd\", null, \"^\"), \" which takes you to the first \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"non-whitespace\"), \" character of the current line\\nand \", mdx(\"kbd\", null, \"L\"), \" maps to \", mdx(\"kbd\", null, \"$\"), \" which takes you to the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"end\"), \" of the current line.\\nI like to think of these mappings as stronger versions of the regular \", mdx(\"kbd\", null, \"h\"), \", \", mdx(\"kbd\", null, \"j\"), \", \", mdx(\"kbd\", null, \"k\"), \", \", mdx(\"kbd\", null, \"l\"), \" motions in Vim.\"), mdx(\"p\", null, \"The last mapping to discuss here is \", mdx(\"kbd\", null, \"ctrl\"), \"+\", mdx(\"kbd\", null, \"x\"), \". What this does is open the previous buffer in the current\\npane and close the buffer visible before that. This means that if I open \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"filea.txt\"), \" and then open\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fileb.txt\"), \" in the same pane, pressing \", mdx(\"kbd\", null, \"ctrl\"), \"+\", mdx(\"kbd\", null, \"x\"), \" will show me filea.txt and close the buffer containing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fileb.txt\"), \".\\nI like this because I work with split panes a lot and I don't always want my split to disappear when\\nI'm done working with a file. Now it will show me the file I had open before that.\"), mdx(\"h3\", null, \"Insert mode navigational keys\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-viml\"\n  }, \"imap <Up>    <Nop>\\nimap <Down>  <Nop>\\nimap <Left>  <Nop>\\nimap <Right> <Nop>\\n\\ninoremap <C-k> <Up>\\ninoremap <C-j> <Down>\\ninoremap <C-h> <Left>\\ninoremap <C-l> <Right>\\n\")), mdx(\"p\", null, \"These ones are very new to me and I have only added them recently. I'm still thinking that when I\\ndid this about a month ago, I was completely and utterly disoriented without the arrow keys in insert mode.\\nI simply didn't understand how to move out of some situations in insert mode and I hadn't discovered \", mdx(\"kbd\", null, \"ctrl\"), \"+\", mdx(\"kbd\", null, \"o\"), \" yet either.\\nI ended up using the hjkl combo I knew for moving around and prefixing it with control,\\nso in insert mode, \", mdx(\"kbd\", null, \"ctrl\"), \"+\", mdx(\"kbd\", null, \"l\"), \" moves me one character to the right, as \", mdx(\"kbd\", null, \"l\"), \" would do in normal mode.\"), mdx(\"p\", null, \"Insert mode is not really the mode you want to be in most of the time, unless you are actually writing code that is.\\nBut it is annoying to have to switch out of insert mode \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"just\"), \" to use a normal mode command to move to the right place.\\nI found that using \", mdx(\"kbd\", null, \"ctrl\"), \"+\", mdx(\"kbd\", null, \"o\"), \" followed by a command used too many keypresses for the same operation and thus I\\nended up with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<C-[direction]>\"), \" keys for movement in insert mode.\"), mdx(\"h3\", null, mdx(\"kbd\", null, \"tab\"), \" and \", mdx(\"kbd\", null, \"shift\"), \"+\", mdx(\"kbd\", null, \"tab\"), \" to indent and de-indent\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-viml\"\n  }, \"nmap >> <Nop>\\nnmap << <Nop>\\nvmap >> <Nop>\\nvmap << <Nop>\\n\\nnnoremap <Tab>   >>\\nnnoremap <S-Tab> <<\\nvnoremap <Tab>   >><Esc>gv\\nvnoremap <S-Tab> <<<Esc>gv\\n\")), mdx(\"p\", null, \"Yet another pair of inconvenient binds are used for indenting and de-indenting code, \", mdx(\"kbd\", null, \">>\"), \" and \", mdx(\"kbd\", null, \"<<\"), \" respectively.\\nLike with the default paragraph binds I think these can be better by just using the bindings I already know and use: \", mdx(\"kbd\", null, \"tab\"), \"\\nand \", mdx(\"kbd\", null, \"shift\"), \"+\", mdx(\"kbd\", null, \"tab\"), \". These binds are to be used in normal or visual mode as we have a special purpose for \", mdx(\"kbd\", null, \"shift\"), \"+\", mdx(\"kbd\", null, \"tab\"), \" in insert mode.\"), mdx(\"h3\", null, \"Avoiding the \", mdx(\"kbd\", null, \"esc\"), \" key\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-viml\"\n  }, \"inoremap <S-Tab> <Esc>\\nonoremap <S-Tab> <Esc>\\n\")), mdx(\"p\", null, \"While there is no such real thing like completely avoiding the escape key, I can manage pretty\\nwell without it with these simple binds. The first one will take you out of insert mode when\\nyou hit \", mdx(\"kbd\", null, \"shift\"), \"+\", mdx(\"kbd\", null, \"tab\"), \". Since it does nothing useful, it might as well save one of my fingers some serious wear.\\nThe second map is used in operator pending mode, which is when you type \", mdx(\"kbd\", null, \"d\"), mdx(\"kbd\", null, \"3\"), \",\\nthe next thing that follows is the operator to finish the command. This means that if I press \", mdx(\"kbd\", null, \"d\"), mdx(\"kbd\", null, \"3\"), mdx(\"kbd\", null, \"shift\"), \"+\", mdx(\"kbd\", null, \"tab\"), \"\\nI will no longer be in operator pending mode, handy for when you accidentally typed \", mdx(\"kbd\", null, \"4\"), \" instead of \", mdx(\"kbd\", null, \"3\"), \"\\n(while you don't \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"see\"), \" this, you just \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"feel\"), \" it).\"), mdx(\"h3\", null, \"Run macro's with \", mdx(\"kbd\", null, \"Q\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-viml\"\n  }, \"nnoremap Q @q\\n\")), mdx(\"p\", null, \"This one is a bit different, I'm not unbinding \", mdx(\"kbd\", null, \"@\"), mdx(\"kbd\", null, \"q\"), \" here as I simply \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"don't have to\"), \". The clumsiness of this\\nbind leads me to never accidentally press it anyway. To explain, for recording a macro use \", mdx(\"kbd\", null, \"qq\"), \",\\nto stop recording use \", mdx(\"kbd\", null, \"q\"), \" and to play it, simply use \", mdx(\"kbd\", null, \"Q\"), \" \", \"\\u2014\", \" much better than pressing \", mdx(\"kbd\", null, \"@\"), mdx(\"kbd\", null, \"q\"), \".\\nNote that this might not be handy if you use a lot of macros and registers.\\nI mostly remember and use one macro at a time for the moment so this bind fits my needs.\"), mdx(\"h3\", null, \"Consistent \", mdx(\"kbd\", null, \"Y\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-viml\"\n  }, \"nnoremap Y y$\\n\")), mdx(\"p\", null, \"So unlike our friends \", mdx(\"kbd\", null, \"C\"), \" and \", mdx(\"kbd\", null, \"D\"), \" which change and delete \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"from cursor to end of line\"), \" respectively, \", mdx(\"kbd\", null, \"Y\"), \"\\nseems to have some issues, it basically does a \", mdx(\"kbd\", null, \"y\"), mdx(\"kbd\", null, \"y\"), \" which we already have... \", mdx(\"kbd\", null, \"y\"), mdx(\"kbd\", null, \"y\"), \" for. So to make it consistent with its bro's,\\nI remapped it to \", mdx(\"kbd\", null, \"y\"), mdx(\"kbd\", null, \"$\"), \". Additional explanation can be found in the help section: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \":h Y\"), \".\"), mdx(\"h2\", null, \"Wrapping up\"), mdx(\"p\", null, \"I hope you found some useful binds in between, or a useful context with which you can create such mappings yourself.\\nThese are my vanilla key binds so they should work in your .vimrc too, no plugins required.\\nVim is a blast to work in and it is \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"by far\"), \" the most flexible text editor I've used. It allows me to spend my days in\\na terminal with joy and helps me work faster than I could with any conventional text editor.\\nCustom key binds were not my first goal but as I started to get more comfortable I found some things to be awkward.\\nIt is the process of finding and removing these awkward binds and turning them into something useful that will\\ntransform you into a text editing machine.\"), mdx(\"p\", null, \"Happy Vimming :)\"), mdx(\"p\", null, \"\\uD83D\\uDC4B\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<figure class=\"media_figure__1BF98\"><div class=\"lazyload-wrapper \"><div style=\"padding-bottom:35%\"></div></div><figcaption class=\"media_alt__xSx7S\">A screenshot of my vimrc movement key bindings</figcaption></figure><p>Vim is installed on almost every unix system known to man,\ntherefore knowing how it works will allow you to work pretty much anywhere.\nWhy would you create customized mappings that only work on your machine?</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"ease-of-use\"></a><a class=\"heading_link__1aoFY\" href=\"#ease-of-use\">Ease of use</a></h2><p>Key binds in Vim are not always the most intuitive to use.\nTake for instance, moving up or down a paragraph which are bound to <kbd>{</kbd> and <kbd>}</kbd> respectively.\nI find these binds quite awkward, but like <kbd>w</kbd>, they allow you to move a lot faster\nthan using line wise <kbd>j</kbd> or <kbd>k</kbd>. For that reason, I rebound them to <kbd>J</kbd> and <kbd>K</kbd> instead (note their case).\nSince they apply no useful action in normal mode and they are more easily combined with the <kbd>shift</kbd>\nkey than <kbd>{</kbd> and <kbd>}</kbd> it made sense to me to map them to something easier to reach.</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"consistency\"></a><a class=\"heading_link__1aoFY\" href=\"#consistency\">Consistency</a></h2><p>Some of the key binds are actually inconsistent. Given that there is <kbd>D</kbd> for deleting from cursor to\nend of line and <kbd>C</kbd> to change from cursor to end of line, but for some reason, <kbd>Y</kbd> does not share the\n&quot;from cursor to end of line&quot; behavior. We can fix this by overwriting the map and binding <kbd>Y</kbd> to <code>y$</code>\ninstead (visit <code>:h Y</code> in Vim), which <em>will</em> make it copy from cursor to end of line.</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"end-bad-habits\"></a><a class=\"heading_link__1aoFY\" href=\"#end-bad-habits\">End bad habits</a></h2><p>Vim will definitely put an end to at least <em>most</em> of your bad habits. Using the arrow keys to\nmove around is generally considered a bad thing in my opinion since you have to move your hand\naway from the home row of your keyboard. Therefore you can unbind them by setting them do do nothing.\nThe next time you press such key, it will simply... <em>do nothing</em> and your brain will rewire itself\nbased on the negative impulse :)</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"my-key-binds\"></a><a class=\"heading_link__1aoFY\" href=\"#my-key-binds\">My key binds</a></h2><p>So without further ado, here are my non-plugin key binds.</p><h3 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"pairing-braces\"></a><a class=\"heading_link__1aoFY\" href=\"#pairing-braces\">Pairing braces</a></h3><pre class=\"prism-code language-viml\" style=\"background-color:#2a2734;color:#9a86fd\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">inoremap </span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">Left</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">inoremap </span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">Left</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">inoremap </span><span class=\"token punctuation\" style=\"color:#6c6783\">{</span><span class=\"token punctuation\" style=\"color:#6c6783\">}</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">{</span><span class=\"token punctuation\" style=\"color:#6c6783\">}</span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">Left</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">inoremap </span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">Left</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">inoremap </span><span class=\"token string\" style=\"color:#ffcc99\">&quot;&quot;</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&quot;&quot;</span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">Left</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">inoremap </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;&#x27;</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#ffcc99\">&#x27;&#x27;</span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">Left</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">inoremap `` ``</span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">Left</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span></div></pre><p>The way I type braces might be weird, but I like it. Basically, whenever I type an opening brace or quote,\nI close it off and move my cursor between them. This ensures that I always have matching braces and I don&#x27;t\nactually have to go back and add them later (especially useful in nesting situations).</p><p>What this does is when you type <kbd>&lt;</kbd> followed by <kbd>&gt;</kbd> for example, vim will replace it with the same characters,\nbut it will also &quot;insert&quot; <code>&lt;Left&gt;</code> or rather, insert an arrow keypress left which leaves you in this position:\n<code>&lt;|&gt;</code> where the bar represents the cursor. You can now type away without having to worry about that closing brace!</p><h3 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"navigational-keys\"></a><a class=\"heading_link__1aoFY\" href=\"#navigational-keys\">Navigational keys</a></h3><pre class=\"prism-code language-viml\" style=\"background-color:#2a2734;color:#9a86fd\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">nmap </span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">Up</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\">    </span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">Nop</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">nmap </span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">Down</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\">  </span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">Nop</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">nmap </span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">Left</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\">  </span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">Nop</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">nmap </span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">Right</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">Nop</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\" style=\"display:inline-block\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">map $ </span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">Nop</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">map ^ </span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">Nop</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">map </span><span class=\"token punctuation\" style=\"color:#6c6783\">{</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">Nop</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">map </span><span class=\"token punctuation\" style=\"color:#6c6783\">}</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">Nop</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\" style=\"display:inline-block\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token builtin\">noremap</span><span class=\"token plain\"> K     </span><span class=\"token punctuation\" style=\"color:#6c6783\">{</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token builtin\">noremap</span><span class=\"token plain\"> J     </span><span class=\"token punctuation\" style=\"color:#6c6783\">}</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token builtin\">noremap</span><span class=\"token plain\"> H     ^</span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token builtin\">noremap</span><span class=\"token plain\"> L     $</span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token builtin\">noremap</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">C</span><span class=\"token operator\" style=\"color:#e09142\">-</span><span class=\"token keyword\" style=\"color:#ffcc99\">x</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">:</span><span class=\"token plain\">bp</span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">Bar</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token keyword\" style=\"color:#ffcc99\">bd</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">#</span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">Cr</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span></div></pre><p>I&#x27;ve already discussed the keys <kbd>J</kbd> and <kbd>K</kbd> which are used for moving up and down by paragraph.\nLikewise <kbd>H</kbd> maps to <kbd>^</kbd> which takes you to the first <em>non-whitespace</em> character of the current line\nand <kbd>L</kbd> maps to <kbd>$</kbd> which takes you to the <em>end</em> of the current line.\nI like to think of these mappings as stronger versions of the regular <kbd>h</kbd>, <kbd>j</kbd>, <kbd>k</kbd>, <kbd>l</kbd> motions in Vim.</p><p>The last mapping to discuss here is <kbd>ctrl</kbd>+<kbd>x</kbd>. What this does is open the previous buffer in the current\npane and close the buffer visible before that. This means that if I open <code>filea.txt</code> and then open\n<code>fileb.txt</code> in the same pane, pressing <kbd>ctrl</kbd>+<kbd>x</kbd> will show me filea.txt and close the buffer containing <code>fileb.txt</code>.\nI like this because I work with split panes a lot and I don&#x27;t always want my split to disappear when\nI&#x27;m done working with a file. Now it will show me the file I had open before that.</p><h3 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"insert-mode-navigational-keys\"></a><a class=\"heading_link__1aoFY\" href=\"#insert-mode-navigational-keys\">Insert mode navigational keys</a></h3><pre class=\"prism-code language-viml\" style=\"background-color:#2a2734;color:#9a86fd\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">imap </span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">Up</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\">    </span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">Nop</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">imap </span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">Down</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\">  </span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">Nop</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">imap </span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">Left</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\">  </span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">Nop</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">imap </span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">Right</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">Nop</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\" style=\"display:inline-block\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">inoremap </span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">C</span><span class=\"token operator\" style=\"color:#e09142\">-</span><span class=\"token keyword\" style=\"color:#ffcc99\">k</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">Up</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">inoremap </span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">C</span><span class=\"token operator\" style=\"color:#e09142\">-</span><span class=\"token keyword\" style=\"color:#ffcc99\">j</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">Down</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">inoremap </span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">C</span><span class=\"token operator\" style=\"color:#e09142\">-</span><span class=\"token keyword\" style=\"color:#ffcc99\">h</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">Left</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">inoremap </span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">C</span><span class=\"token operator\" style=\"color:#e09142\">-</span><span class=\"token keyword\" style=\"color:#ffcc99\">l</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">Right</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span></div></pre><p>These ones are very new to me and I have only added them recently. I&#x27;m still thinking that when I\ndid this about a month ago, I was completely and utterly disoriented without the arrow keys in insert mode.\nI simply didn&#x27;t understand how to move out of some situations in insert mode and I hadn&#x27;t discovered <kbd>ctrl</kbd>+<kbd>o</kbd> yet either.\nI ended up using the hjkl combo I knew for moving around and prefixing it with control,\nso in insert mode, <kbd>ctrl</kbd>+<kbd>l</kbd> moves me one character to the right, as <kbd>l</kbd> would do in normal mode.</p><p>Insert mode is not really the mode you want to be in most of the time, unless you are actually writing code that is.\nBut it is annoying to have to switch out of insert mode <em>just</em> to use a normal mode command to move to the right place.\nI found that using <kbd>ctrl</kbd>+<kbd>o</kbd> followed by a command used too many keypresses for the same operation and thus I\nended up with the <code>&lt;C-[direction]&gt;</code> keys for movement in insert mode.</p><h3 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"tab-and-shift-tab-to-indent-and-de-indent\"></a><a class=\"heading_link__1aoFY\" href=\"#tab-and-shift-tab-to-indent-and-de-indent\"><kbd>tab</kbd> and <kbd>shift</kbd>+<kbd>tab</kbd> to indent and de-indent</a></h3><pre class=\"prism-code language-viml\" style=\"background-color:#2a2734;color:#9a86fd\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">nmap </span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">Nop</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">nmap </span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">Nop</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">vmap </span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">Nop</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">vmap </span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">Nop</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\" style=\"display:inline-block\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">nnoremap </span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">Tab</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\">   </span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">nnoremap </span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">S</span><span class=\"token operator\" style=\"color:#e09142\">-</span><span class=\"token plain\">Tab</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">vnoremap </span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">Tab</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\">   </span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">Esc</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\">gv</span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">vnoremap </span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">S</span><span class=\"token operator\" style=\"color:#e09142\">-</span><span class=\"token plain\">Tab</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">Esc</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\">gv</span></div></pre><p>Yet another pair of inconvenient binds are used for indenting and de-indenting code, <kbd>&gt;&gt;</kbd> and <kbd>&lt;&lt;</kbd> respectively.\nLike with the default paragraph binds I think these can be better by just using the bindings I already know and use: <kbd>tab</kbd>\nand <kbd>shift</kbd>+<kbd>tab</kbd>. These binds are to be used in normal or visual mode as we have a special purpose for <kbd>shift</kbd>+<kbd>tab</kbd> in insert mode.</p><h3 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"avoiding-the-esc-key\"></a><a class=\"heading_link__1aoFY\" href=\"#avoiding-the-esc-key\">Avoiding the <kbd>esc</kbd> key</a></h3><pre class=\"prism-code language-viml\" style=\"background-color:#2a2734;color:#9a86fd\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">inoremap </span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">S</span><span class=\"token operator\" style=\"color:#e09142\">-</span><span class=\"token plain\">Tab</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">Esc</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">onoremap </span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">S</span><span class=\"token operator\" style=\"color:#e09142\">-</span><span class=\"token plain\">Tab</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#e09142\">&lt;</span><span class=\"token plain\">Esc</span><span class=\"token operator\" style=\"color:#e09142\">&gt;</span></div></pre><p>While there is no such real thing like completely avoiding the escape key, I can manage pretty\nwell without it with these simple binds. The first one will take you out of insert mode when\nyou hit <kbd>shift</kbd>+<kbd>tab</kbd>. Since it does nothing useful, it might as well save one of my fingers some serious wear.\nThe second map is used in operator pending mode, which is when you type <kbd>d</kbd><kbd>3</kbd>,\nthe next thing that follows is the operator to finish the command. This means that if I press <kbd>d</kbd><kbd>3</kbd><kbd>shift</kbd>+<kbd>tab</kbd>\nI will no longer be in operator pending mode, handy for when you accidentally typed <kbd>4</kbd> instead of <kbd>3</kbd>\n(while you don&#x27;t <em>see</em> this, you just <em>feel</em> it).</p><h3 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"run-macro-s-with-q\"></a><a class=\"heading_link__1aoFY\" href=\"#run-macro-s-with-q\">Run macro&#x27;s with <kbd>Q</kbd></a></h3><pre class=\"prism-code language-viml\" style=\"background-color:#2a2734;color:#9a86fd\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">nnoremap Q @</span><span class=\"token keyword\" style=\"color:#ffcc99\">q</span></div></pre><p>This one is a bit different, I&#x27;m not unbinding <kbd>@</kbd><kbd>q</kbd> here as I simply <em>don&#x27;t have to</em>. The clumsiness of this\nbind leads me to never accidentally press it anyway. To explain, for recording a macro use <kbd>qq</kbd>,\nto stop recording use <kbd>q</kbd> and to play it, simply use <kbd>Q</kbd> <!-- -->—<!-- --> much better than pressing <kbd>@</kbd><kbd>q</kbd>.\nNote that this might not be handy if you use a lot of macros and registers.\nI mostly remember and use one macro at a time for the moment so this bind fits my needs.</p><h3 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"consistent-y\"></a><a class=\"heading_link__1aoFY\" href=\"#consistent-y\">Consistent <kbd>Y</kbd></a></h3><pre class=\"prism-code language-viml\" style=\"background-color:#2a2734;color:#9a86fd\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">nnoremap Y </span><span class=\"token keyword\" style=\"color:#ffcc99\">y</span><span class=\"token plain\">$</span></div></pre><p>So unlike our friends <kbd>C</kbd> and <kbd>D</kbd> which change and delete <em>from cursor to end of line</em> respectively, <kbd>Y</kbd>\nseems to have some issues, it basically does a <kbd>y</kbd><kbd>y</kbd> which we already have... <kbd>y</kbd><kbd>y</kbd> for. So to make it consistent with its bro&#x27;s,\nI remapped it to <kbd>y</kbd><kbd>$</kbd>. Additional explanation can be found in the help section: <code>:h Y</code>.</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"wrapping-up\"></a><a class=\"heading_link__1aoFY\" href=\"#wrapping-up\">Wrapping up</a></h2><p>I hope you found some useful binds in between, or a useful context with which you can create such mappings yourself.\nThese are my vanilla key binds so they should work in your .vimrc too, no plugins required.\nVim is a blast to work in and it is <em>by far</em> the most flexible text editor I&#x27;ve used. It allows me to spend my days in\na terminal with joy and helps me work faster than I could with any conventional text editor.\nCustom key binds were not my first goal but as I started to get more comfortable I found some things to be awkward.\nIt is the process of finding and removing these awkward binds and turning them into something useful that will\ntransform you into a text editing machine.</p><p>Happy Vimming :)</p><p>👋</p>","scope":{"title":"A collection of Vim key binds","description":"In my never ending quest for an optimal Vim setup I am always looking for ways to improve. I've used Vim for about two months now and I'm still learning a lot. In this post I'm going to take you through a part of my .vimrc that describes my non-plugin key binds.","published":"2017-09-16T13:11:03Z"}},"slug":"a-collection-of-vim-key-binds"},{"title":"Combining Caniuse with FZF","description":"There is caniuse.com which you can use to search online, but what if you're a lazy dev like me that likes to keep his stuff in the terminal? Well, for this reason I wrote a small wrapper using some of my all time favorite tools: Ruby and FZF!","published":"2017-09-03T11:47:27Z","readTimeInMinutes":6,"source":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Do you love \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://caniuse.com/\",\n    \"title\": \"Visit caniuse.com\"\n  }, \"Caniuse\"), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/junegunn/fzf\",\n    \"title\": \"Visit junegunn/fzf on github\"\n  }, \"FZF\"), \"? I do! As a front end developer,\\nevery now and then I need to check the support of some feature across major browsers.\\nFor this I used to go to caniuse.com, search for the feature and make a decision based on that.\"), mdx(\"p\", null, \"The part where FZF comes in is the \\\"search for the feature\\\" part. Having to go to their website\\nto find a feature isn't bad or slow per se but I am a very lazy developer and I like to keep\\nthings where I spend most of my time \", \"\\u2014\", \" inside a terminal.\"), mdx(\"h2\", null, \"caniuse-cmd\"), mdx(\"p\", null, \"My first attempt at trying to get my results in the terminal was of course by googling\\nfor a package which I could use. That package was \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/sgentle/caniuse-cmd\",\n    \"title\": \"Visit sgentle/caniuse-cmd on github\"\n  }, \"caniuse-cmd\"), \"\\nwhich adds a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"caniuse\"), \" command and displays results based on the feature you're looking for.\"), mdx(\"p\", null, \"It works really well for doing a single query of a feature, but I thought I could make this\\nbetter by showing a list of features using FZF and then and running the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"caniuse\"), \" command on the selected result(s).\"), mdx(\"p\", null, \"This is possible because the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"caniuse\"), \" command returns all features when run without arguments.\\nI tried to format this output into something more \\\"FZF friendly\\\"\\n(which I would define as being text-search-friendly) but this proved more cumbersome than I thought.\"), mdx(\"h2\", null, \"A more neutral data source\"), mdx(\"p\", null, \"Since I was using a package to fetch the results, I was bound to the way the package worked.\\nIt means I had a dependency to serve a single purpose \", \"\\u2014\", \" fetching results (and in this case,\\nalso display additional information afterwards of course). If the package changed their format,\\nit could screw up my formatting script and I would have to adjust it every time as well.\"), mdx(\"p\", null, \"So I decided not to use the dependency and instead, find a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://raw.githubusercontent.com/Fyrd/caniuse/master/data.json\",\n    \"title\": \"View Fyrd/caniuse data.json\"\n  }, \"raw source of data\"), \"\\n(~1.5MB JSON) and create a wrapper that would essentially:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"check to see if \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"~/caniuse-db.txt\"), \" exists\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"update \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"~/caniuse-db.txt\"), \" if it exists and is older than one day\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"download, format and save the data in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"~/caniuse-db.txt\"), \" otherwise\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"print data\"))), mdx(\"p\", null, \"With this functionality, I can pipe the output of my script into FZF to search through all the features on caniuse,\\nand the file will be no older than a day at worst. For brevity I did not include the ~60 line\\nRuby script but it can be \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/SidOfc/dotfiles/blob/653c0331b3bd8a3b6fb5fbff0531f038e7eb5b12/bin/ciu\",\n    \"title\": \"View ciu shell script\"\n  }, \"found here\"), \" in my \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/SidOfc/dotfiles\",\n    \"title\": \"Visit SidOfc/dotfiles on github\"\n  }, \"dotfiles repo\"), \".\\nCombining it with FZF yielded the following result:\"), mdx(Media, {\n    src: \"/media/posts/caniuse-fzf-ie-last-version-features.png\",\n    alt: \"Caniuse fzf: IE features supported since last version\",\n    width: \"900\",\n    height: \"348\",\n    mdxType: \"Media\"\n  }), mdx(\"p\", null, \"The above display might seem a bit intimidating at first, but the output isn't hard to understand\\nif you know what each column indicates. In the leftmost column, we have a 2 letter W3C status, e.g.\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[wd]\"), \" for \\\"Working Draft\\\". Followed by a percentage of global support which is followed by the title of the feature.\"), mdx(\"p\", null, \"On the right side we see the browsers listed with a bunch of plus, minus and tilde signs.\\nThis indicates wether or not a feature is supported (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"+\"), \"), partially supported (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"~\"), \") or not supported (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-\"), \").\\nIt shows the support for the last 2 versions (first sign is previous, last is current) which is why there are 2.\\nThe idea being that, I can look for features which are only supported in the latest version of a\\nbrowser and see which ones they are so I can look for them in any project and patch them if needed.\"), mdx(\"p\", null, \"As seen in the image, my search pattern is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"'-+ie\"), \" and it finds all the features that aren't supported\\nin the previous version but are in the current version. The quote mark is required for FZF\\nto search for this as a single word rather than 4 single characters.\"), mdx(\"p\", null, \"I can also search for all the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[wd]\"), \" features, like this:\"), mdx(Media, {\n    src: \"/media/posts/caniuse-search-wd-feature.png\",\n    alt: \"Searching for working draft CSS features\",\n    width: \"900\",\n    height: \"140\",\n    mdxType: \"Media\"\n  }), mdx(\"p\", null, \"Any text you see on the screenshots can be used to search and you get some free bonuses of seeing how many\\nfeatures there are in caniuse (426) and how many of them matched your query (86 are WD apparently).\"), mdx(\"h2\", null, \"Combine with \\\"caniuse\\\" command\"), mdx(\"p\", null, \"Aside from being able to search on steroids, and as mentioned above, the end result of this should allow\\nus to select one or multiple results and run them through \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"caniuse\"), \" so that we can see any additional details.\"), mdx(\"p\", null, \"To do this, I created a ZSH function (which depends on my script for listing the features):\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"# caniuse for quick access to global support list\\ncani() {\\n  local feats=$(~/dotfiles/bin/ciu | sort -rn | fzf -m | sed -e 's/^.*%\\\\ *//g' | sed -e 's/   .*//g')\\n\\n  if [[ $feats ]]; then\\n    for feat in $(echo $feats)\\n    do caniuse $feat\\n    done\\n  fi\\n}\\n\")), mdx(\"p\", null, \"This will take your selected features from FZF:\"), mdx(Media, {\n    src: \"/media/posts/caniuse-select-multiple-features.png\",\n    alt: \"Selecting multiple feature entries\",\n    width: \"900\",\n    height: \"279\",\n    mdxType: \"Media\"\n  }), mdx(\"p\", null, \"then it tries to select the title and run each selected feature title through the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"caniuse\"), \" command:\"), mdx(Media, {\n    src: \"/media/posts/caniuse-cmd-output.png\",\n    alt: \"Output entry results using caniuse-cmd package\",\n    width: \"900\",\n    height: \"666\",\n    mdxType: \"Media\"\n  }), mdx(\"p\", null, \"There! All the details I can muster now combined in a single command with support for outputting multiple features at the same time.\"), mdx(\"h2\", null, \"Conclusion\"), mdx(\"p\", null, \"Only after I started searching through my output with FZF did I realize what more I could now do.\\nEven compared to the website, I could \\\"group\\\" things by search pattern, then limit the results\\nfurther with additional terms. I can filter by W3C status, global support,\\nname or any combination of browser support.\"), mdx(\"p\", null, \"In addition to that, looping the output from FZF to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"caniuse\"), \" allowed me to also read the\\nnotes in the terminal as well as get some extra and confirming information about the\\nfeature(s) which is really nice in my opinion.\"), mdx(\"p\", null, \"And last, maybe I will port the \\\"fetching and formatting\\\" script to a gem,\\nor port it to another language I want to learn and distribute it as a package there,\\neither way it will probably become a package :)\"), mdx(\"h2\", null, \"Update 08\\u201307\\u20132018\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cani\"), \" command is now packaged as a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/sidofc/cani\",\n    \"title\": \"Visit SidOfc/cani on github\"\n  }, \"RubyGem\"), \" with some additional commands and features :)\"), mdx(\"p\", null, \"Cheers!\"), mdx(\"p\", null, \"\\uD83D\\uDC4B\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>Do you love <a href=\"http://caniuse.com/\" title=\"Visit caniuse.com\">Caniuse</a> and <a href=\"https://github.com/junegunn/fzf\" title=\"Visit junegunn/fzf on github\">FZF</a>? I do! As a front end developer,\nevery now and then I need to check the support of some feature across major browsers.\nFor this I used to go to caniuse.com, search for the feature and make a decision based on that.</p><p>The part where FZF comes in is the &quot;search for the feature&quot; part. Having to go to their website\nto find a feature isn&#x27;t bad or slow per se but I am a very lazy developer and I like to keep\nthings where I spend most of my time <!-- -->—<!-- --> inside a terminal.</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"caniuse-cmd\"></a><a class=\"heading_link__1aoFY\" href=\"#caniuse-cmd\">caniuse-cmd</a></h2><p>My first attempt at trying to get my results in the terminal was of course by googling\nfor a package which I could use. That package was <a href=\"https://github.com/sgentle/caniuse-cmd\" title=\"Visit sgentle/caniuse-cmd on github\">caniuse-cmd</a>\nwhich adds a <code>caniuse</code> command and displays results based on the feature you&#x27;re looking for.</p><p>It works really well for doing a single query of a feature, but I thought I could make this\nbetter by showing a list of features using FZF and then and running the <code>caniuse</code> command on the selected result(s).</p><p>This is possible because the <code>caniuse</code> command returns all features when run without arguments.\nI tried to format this output into something more &quot;FZF friendly&quot;\n(which I would define as being text-search-friendly) but this proved more cumbersome than I thought.</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"a-more-neutral-data-source\"></a><a class=\"heading_link__1aoFY\" href=\"#a-more-neutral-data-source\">A more neutral data source</a></h2><p>Since I was using a package to fetch the results, I was bound to the way the package worked.\nIt means I had a dependency to serve a single purpose <!-- -->—<!-- --> fetching results (and in this case,\nalso display additional information afterwards of course). If the package changed their format,\nit could screw up my formatting script and I would have to adjust it every time as well.</p><p>So I decided not to use the dependency and instead, find a <a href=\"https://raw.githubusercontent.com/Fyrd/caniuse/master/data.json\" title=\"View Fyrd/caniuse data.json\">raw source of data</a>\n(~1.5MB JSON) and create a wrapper that would essentially:</p><ul><li><p>check to see if <code>~/caniuse-db.txt</code> exists</p></li><li><p>update <code>~/caniuse-db.txt</code> if it exists and is older than one day</p></li><li><p>download, format and save the data in <code>~/caniuse-db.txt</code> otherwise</p></li><li><p>print data</p></li></ul><p>With this functionality, I can pipe the output of my script into FZF to search through all the features on caniuse,\nand the file will be no older than a day at worst. For brevity I did not include the ~60 line\nRuby script but it can be <a href=\"https://github.com/SidOfc/dotfiles/blob/653c0331b3bd8a3b6fb5fbff0531f038e7eb5b12/bin/ciu\" title=\"View ciu shell script\">found here</a> in my <a href=\"https://github.com/SidOfc/dotfiles\" title=\"Visit SidOfc/dotfiles on github\">dotfiles repo</a>.\nCombining it with FZF yielded the following result:</p><figure class=\"media_figure__1BF98\"><div class=\"lazyload-wrapper \"><div style=\"padding-bottom:38.666666666666664%\"></div></div><figcaption class=\"media_alt__xSx7S\">Caniuse fzf: IE features supported since last version</figcaption></figure><p>The above display might seem a bit intimidating at first, but the output isn&#x27;t hard to understand\nif you know what each column indicates. In the leftmost column, we have a 2 letter W3C status, e.g.\n<code>[wd]</code> for &quot;Working Draft&quot;. Followed by a percentage of global support which is followed by the title of the feature.</p><p>On the right side we see the browsers listed with a bunch of plus, minus and tilde signs.\nThis indicates wether or not a feature is supported (<code>+</code>), partially supported (<code>~</code>) or not supported (<code>-</code>).\nIt shows the support for the last 2 versions (first sign is previous, last is current) which is why there are 2.\nThe idea being that, I can look for features which are only supported in the latest version of a\nbrowser and see which ones they are so I can look for them in any project and patch them if needed.</p><p>As seen in the image, my search pattern is <code>&#x27;-+ie</code> and it finds all the features that aren&#x27;t supported\nin the previous version but are in the current version. The quote mark is required for FZF\nto search for this as a single word rather than 4 single characters.</p><p>I can also search for all the <code>[wd]</code> features, like this:</p><figure class=\"media_figure__1BF98\"><div class=\"lazyload-wrapper \"><div style=\"padding-bottom:15.555555555555555%\"></div></div><figcaption class=\"media_alt__xSx7S\">Searching for working draft CSS features</figcaption></figure><p>Any text you see on the screenshots can be used to search and you get some free bonuses of seeing how many\nfeatures there are in caniuse (426) and how many of them matched your query (86 are WD apparently).</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"combine-with-caniuse-command\"></a><a class=\"heading_link__1aoFY\" href=\"#combine-with-caniuse-command\">Combine with &quot;caniuse&quot; command</a></h2><p>Aside from being able to search on steroids, and as mentioned above, the end result of this should allow\nus to select one or multiple results and run them through <code>caniuse</code> so that we can see any additional details.</p><p>To do this, I created a ZSH function (which depends on my script for listing the features):</p><pre class=\"prism-code language-shell\" style=\"background-color:#2a2734;color:#9a86fd\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token comment\" style=\"color:#9390a1\"># caniuse for quick access to global support list</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token function-name function\" style=\"color:#fa60c3\">cani</span><span class=\"token punctuation\" style=\"color:#6c6783\">(</span><span class=\"token punctuation\" style=\"color:#6c6783\">)</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">{</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">  </span><span class=\"token builtin class-name\">local</span><span class=\"token plain\"> </span><span class=\"token assign-left variable\" style=\"color:#ffcc99\">feats</span><span class=\"token operator\" style=\"color:#e09142\">=</span><span class=\"token variable\" style=\"color:#ffcc99\">$(</span><span class=\"token variable\" style=\"color:#ffcc99\">~/dotfiles/bin/ciu </span><span class=\"token variable operator\" style=\"color:#e09142\">|</span><span class=\"token variable\" style=\"color:#ffcc99\"> </span><span class=\"token variable function\" style=\"color:#fa60c3\">sort</span><span class=\"token variable\" style=\"color:#ffcc99\"> -rn </span><span class=\"token variable operator\" style=\"color:#e09142\">|</span><span class=\"token variable\" style=\"color:#ffcc99\"> fzf -m </span><span class=\"token variable operator\" style=\"color:#e09142\">|</span><span class=\"token variable\" style=\"color:#ffcc99\"> </span><span class=\"token variable function\" style=\"color:#fa60c3\">sed</span><span class=\"token variable\" style=\"color:#ffcc99\"> -e </span><span class=\"token variable string\" style=\"color:#ffcc99\">&#x27;s/^.*%\\ *//g&#x27;</span><span class=\"token variable\" style=\"color:#ffcc99\"> </span><span class=\"token variable operator\" style=\"color:#e09142\">|</span><span class=\"token variable\" style=\"color:#ffcc99\"> </span><span class=\"token variable function\" style=\"color:#fa60c3\">sed</span><span class=\"token variable\" style=\"color:#ffcc99\"> -e </span><span class=\"token variable string\" style=\"color:#ffcc99\">&#x27;s/   .*//g&#x27;</span><span class=\"token variable\" style=\"color:#ffcc99\">)</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\" style=\"display:inline-block\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">  </span><span class=\"token keyword\" style=\"color:#ffcc99\">if</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token punctuation\" style=\"color:#6c6783\">[</span><span class=\"token plain\"> </span><span class=\"token variable\" style=\"color:#ffcc99\">$feats</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token punctuation\" style=\"color:#6c6783\">]</span><span class=\"token punctuation\" style=\"color:#6c6783\">;</span><span class=\"token plain\"> </span><span class=\"token keyword\" style=\"color:#ffcc99\">then</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#ffcc99\">for</span><span class=\"token plain\"> </span><span class=\"token for-or-select variable\" style=\"color:#ffcc99\">feat</span><span class=\"token plain\"> </span><span class=\"token keyword\" style=\"color:#ffcc99\">in</span><span class=\"token plain\"> </span><span class=\"token variable\" style=\"color:#ffcc99\">$(</span><span class=\"token variable builtin class-name\" style=\"color:#ffcc99\">echo</span><span class=\"token variable\" style=\"color:#ffcc99\"> $feats</span><span class=\"token variable\" style=\"color:#ffcc99\">)</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#ffcc99\">do</span><span class=\"token plain\"> caniuse </span><span class=\"token variable\" style=\"color:#ffcc99\">$feat</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#ffcc99\">done</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">  </span><span class=\"token keyword\" style=\"color:#ffcc99\">fi</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#6c6783\">}</span></div></pre><p>This will take your selected features from FZF:</p><figure class=\"media_figure__1BF98\"><div class=\"lazyload-wrapper \"><div style=\"padding-bottom:31%\"></div></div><figcaption class=\"media_alt__xSx7S\">Selecting multiple feature entries</figcaption></figure><p>then it tries to select the title and run each selected feature title through the <code>caniuse</code> command:</p><figure class=\"media_figure__1BF98\"><div class=\"lazyload-wrapper \"><div style=\"padding-bottom:74%\"></div></div><figcaption class=\"media_alt__xSx7S\">Output entry results using caniuse-cmd package</figcaption></figure><p>There! All the details I can muster now combined in a single command with support for outputting multiple features at the same time.</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"conclusion\"></a><a class=\"heading_link__1aoFY\" href=\"#conclusion\">Conclusion</a></h2><p>Only after I started searching through my output with FZF did I realize what more I could now do.\nEven compared to the website, I could &quot;group&quot; things by search pattern, then limit the results\nfurther with additional terms. I can filter by W3C status, global support,\nname or any combination of browser support.</p><p>In addition to that, looping the output from FZF to <code>caniuse</code> allowed me to also read the\nnotes in the terminal as well as get some extra and confirming information about the\nfeature(s) which is really nice in my opinion.</p><p>And last, maybe I will port the &quot;fetching and formatting&quot; script to a gem,\nor port it to another language I want to learn and distribute it as a package there,\neither way it will probably become a package :)</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"update-08-07-2018\"></a><a class=\"heading_link__1aoFY\" href=\"#update-08-07-2018\">Update 08–07–2018</a></h2><p>The <code>cani</code> command is now packaged as a <a href=\"https://github.com/sidofc/cani\" title=\"Visit SidOfc/cani on github\">RubyGem</a> with some additional commands and features :)</p><p>Cheers!</p><p>👋</p>","scope":{"title":"Combining Caniuse with FZF","description":"There is caniuse.com which you can use to search online, but what if you're a lazy dev like me that likes to keep his stuff in the terminal? Well, for this reason I wrote a small wrapper using some of my all time favorite tools: Ruby and FZF!","published":"2017-09-03T11:47:27Z"}},"slug":"combining-caniuse-with-fzf"},{"title":"Switching to ASDF version manager","description":"Depending on how many languages you program in, getting all their version managers installed, added to <code>$PATH</code>, configured etc... becomes quite a pain when setting up a new system, or even figuring out how this one works because you've used something else for a while.","published":"2017-08-15T21:04:44Z","readTimeInMinutes":5,"source":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Media, {\n    src: \"/media/posts/asdfmovie-banner.svg\",\n    alt: \"asdfmovie quote from youtube\",\n    width: \"356\",\n    height: \"200\",\n    mdxType: \"Media\"\n  }), mdx(\"p\", null, \"Version management tools for programming languages are a common thing in (web-)developer land.\\nI started to wonder if there was an all-in-one version management tool.\\nI want this because as I learn more and do more, I will need more version managers that all\\nslow down my shell. So lets prevent that shall we!\"), mdx(\"p\", null, \"I've always used \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://rvm.io\",\n    \"title\": \"Visit rvm.io\"\n  }, \"RVM\"), \" in the past without problem, the shell took about half a\\nsecond to load and that was acceptable. I mean, you can't have it all right :)\"), mdx(\"p\", null, \"Aside from sourcing good old RVM, recently I also added \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/creationix/nvm\",\n    \"title\": \"Visit creationix/nvm on github\"\n  }, \"NVM\"), \" to the stack.\\nNo problem I thought! Until I resourced my shell and had to wait for two seconds... Yeah,\\nthis goes beyond the \\\"you can't have it all\\\" criteria. I often open a shell for a quick ssh session,\\nrunning tests, git commands, etc... There has to be a better way!\"), mdx(\"h2\", null, \"A universal version manager\"), mdx(\"p\", null, \"Enter \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/asdf-vm/asdf\",\n    \"title\": \"Visit asdf-vm/asdf on github\"\n  }, \"ASDF\"), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/asdf-vm/asdf-plugins\",\n    \"title\": \"Visit asdf-vm/asdf-plugins on github\"\n  }, \"friends\"), \".\\nASDF is a universal and extensible version management tool for many \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/asdf-vm/asdf-plugins\",\n    \"title\": \"Visit asdf-vm/asdf-plugins on github\"\n  }, \"programming languages\"), \".\\nIt provides the version management tooling and allows you to choose which plugins you would like to install.\\nLike Node.js, Ruby or Python for instance.\"), mdx(\"p\", null, \"To get started, go to their \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/asdf-vm/asdf\",\n    \"title\": \"Visit asdf-vm/asdf on github\"\n  }, \"github page\"), \" and install ASDF.\"), mdx(\"p\", null, \"After installing, you'll only have the core of ASDF.\\nWe'll need to extend it by adding plugins to it and using those to install versions\\nof the language we want to use.\"), mdx(\"p\", null, \"The list of plugins you'll install will differ from what I use.\\nI am a front end developer that works with Ruby / Rails as well as React.\\nFrom time to time I also muck around in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://crystal-lang.org/\",\n    \"title\": \"Visit crystal-lang.org\"\n  }, \"Crystal\"), \" or \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.rust-lang.org/en-US/\",\n    \"title\": \"Visit rust-lang.org\"\n  }, \"Rust\"), \"\\n(both of which are awesome \", \"\\u2014\", \" check them out!). So I would head to the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/asdf-vm/asdf-plugins\",\n    \"title\": \"Visit asdf-vm plugins page\"\n  }, \"plugins page\"), \"\\nand look for plugins for those programming languages. The following is what I use:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/asdf-vm/asdf-ruby\",\n    \"title\": \"Visit asdf-vm-asdf-ruby\"\n  }, \"asdf-vm/asdf-ruby\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/asdf-vm/asdf-nodejs\",\n    \"title\": \"Visit asdf-vm/asdf-nodejs on github\"\n  }, \"asdf-vm/asdf-nodejs\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/code-lever/asdf-rust\",\n    \"title\": \"Visit code-lever/asdf-rust on github\"\n  }, \"code-lever/asdf-rust\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/asdf-community/asdf-crystal\",\n    \"title\": \"Visit asdf-community/asdf-crystal on github\"\n  }, \"asdf-community/asdf-crystal\")))), mdx(\"p\", null, \"There are installation instructions on every plugin repo. Sometimes, steps\\nfor migrating from your old version manager are also included.\\nFor Ruby using RVM, the migration is as easy as moving \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"~/.rvm/rubies\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"~/.asdf/installs/ruby.\")), mdx(\"h2\", null, \"Sounds smooth, any bumps along the way?\"), mdx(\"p\", null, \"It could be that gems and even Ruby versions will not work. If you run into this issue,\\nrun \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"asdf reshim [language]\"), \" and restart your shell to fix any broken paths.\"), mdx(\"p\", null, \"If the problem persists, you can run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"asdf current [language]\"), \" to find the current version.\\nIt will also print the path to the version file that defined it.\\nThis is much simpler than running a mixture of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ls\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"grep\"), \" to find out where that version comes from.\"), mdx(\"p\", null, \"If you see the following after running \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"asdf current [language]\"), \":\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"No version set for \", \"[language]\")), mdx(\"p\", null, \"It means that you haven't set or installed any versions for that language.\\nIf you haven't installed a version, run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"asdf list-all [language]\"), \".\\nThis will list all the available versions that ASDF can install. Choose a version and run\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"asdf install [language] [version]\"), \" to install it.\"), mdx(\"p\", null, \"If the plugin still doesn't work, run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"asdf global [language] [version]\"), \" which will create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"~/.tool-versions\"), \" file.\\nThe language and version info will be stored and ASDF will attempt to load that version.\"), mdx(\"p\", null, \"To set a specific version in a directory, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cd\"), \" to it and run\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"asdf local [language] [version]\"), \". ASDF will use a local version over a global version.\"), mdx(\"p\", null, \"After migrating from RVM, I had to rename my rubies.\\nRVM stored them in the format of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ruby-[major]-[minor]-[patch]-p[ruby-patch]\"), \".\\nThis caused ASDF not to switch after running \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"asdf local ruby 2.4.1\"), \" because the folder\\nname differed from the version input. Which meant I had to run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"asdf local ruby ruby-2.4.1\"), \".\\nIf a language is already specified, I'd rather not bother typing it again.\\nRemoving the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ruby-\"), \" prefix from the directory names in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"~/.asdf/installs/ruby\"), \" fixed it.\\nRunning \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"asdf local ruby 2.4.1\"), \" switched perfect afterwards.\"), mdx(\"h2\", null, \"Extra's\"), mdx(\"p\", null, \"A feature of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"asdf-ruby\"), \" plugin is that it can install a set of \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/asdf-vm/asdf-ruby#default-gems\",\n    \"title\": \"Visit asdf-vm/asdf-ruby section on default gems\"\n  }, \"default gems\"), \"\\nspecified in a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"~/.default-gems file\"), \". I love this one as I'll never have to run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gem install pry\"), \" again!\"), mdx(\"p\", null, \"What RVM additionally offers that I have not seen in ASDF is the option to create a gemset.\\nThis was and still is a useful feature if you're doing Ruby projects involving lots of different\\ngems or even testing with specific gems. I rarely felt the need to create a gemset myself.\\nThus not having this feature did not have a lot of impact on my workflow (yet).\\nI'm not sure if NVM adds any extra functionality, either way I think ASDF will fill the\\ngaps because of how it was designed and how it can be extended.\"), mdx(\"p\", null, \"Finally, I added a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"~/.asdfrc\"), \" file containing: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"legacy_version_file = yes\"), \".\\nThis enables ASDF read all version files we know and love.\"), mdx(\"h2\", null, \"Conclusion\"), mdx(\"p\", null, \"As for my shell time, it's back where it was with only RVM. But nothing messes with my \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cd\"), \" command anymore.\\nI also don't have to keep adding these noisy \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"source\"), \" lines to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/sidofc/dotfiles\",\n    \"title\": \"Visit SidOfc/dotfiles on github\"\n  }, \"my dotfiles\"), \".\"), mdx(\"p\", null, \"ASDF is still quite new and at the time of writing, there are few integrations.\\nThis means that if you use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"capistrano\"), \" to deploy using RVM for example, you won't be able to do that using ASDF just yet.\\nBut as mentioned above, someone somewhere will fix that gap or you could give it a shot yourself!\"), mdx(\"p\", null, \"I hope you've learned something from this post and also that you will choose to switch to ASDF.\\nNot because it's better per-se but because it's universal and extensible and you now no longer have\\nto worry about version managers! Install a plugin and you're done! A plugin system and a management system,\\nbundled in 3 simple commands with a common interface. ASDF and I will be friends for a long time :)\"), mdx(\"p\", null, \"Cheers!\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Many thanks to \", mdx(\"a\", {\n    parentName: \"em\",\n    \"href\": \"https://medium.com/@vvangemert\",\n    \"title\": \"Visit Vincent van Gemert on Medium\"\n  }, \"@vvgemert\"), \" for proofreading!\")), mdx(\"p\", null, \"\\uD83D\\uDC4B\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<figure class=\"media_figure__1BF98\"><div class=\"lazyload-wrapper \"><div style=\"padding-bottom:56.17977528089888%\"></div></div><figcaption class=\"media_alt__xSx7S\">asdfmovie quote from youtube</figcaption></figure><p>Version management tools for programming languages are a common thing in (web-)developer land.\nI started to wonder if there was an all-in-one version management tool.\nI want this because as I learn more and do more, I will need more version managers that all\nslow down my shell. So lets prevent that shall we!</p><p>I&#x27;ve always used <a href=\"https://rvm.io\" title=\"Visit rvm.io\">RVM</a> in the past without problem, the shell took about half a\nsecond to load and that was acceptable. I mean, you can&#x27;t have it all right :)</p><p>Aside from sourcing good old RVM, recently I also added <a href=\"https://github.com/creationix/nvm\" title=\"Visit creationix/nvm on github\">NVM</a> to the stack.\nNo problem I thought! Until I resourced my shell and had to wait for two seconds... Yeah,\nthis goes beyond the &quot;you can&#x27;t have it all&quot; criteria. I often open a shell for a quick ssh session,\nrunning tests, git commands, etc... There has to be a better way!</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"a-universal-version-manager\"></a><a class=\"heading_link__1aoFY\" href=\"#a-universal-version-manager\">A universal version manager</a></h2><p>Enter <a href=\"https://github.com/asdf-vm/asdf\" title=\"Visit asdf-vm/asdf on github\">ASDF</a> and <a href=\"https://github.com/asdf-vm/asdf-plugins\" title=\"Visit asdf-vm/asdf-plugins on github\">friends</a>.\nASDF is a universal and extensible version management tool for many <a href=\"https://github.com/asdf-vm/asdf-plugins\" title=\"Visit asdf-vm/asdf-plugins on github\">programming languages</a>.\nIt provides the version management tooling and allows you to choose which plugins you would like to install.\nLike Node.js, Ruby or Python for instance.</p><p>To get started, go to their <a href=\"https://github.com/asdf-vm/asdf\" title=\"Visit asdf-vm/asdf on github\">github page</a> and install ASDF.</p><p>After installing, you&#x27;ll only have the core of ASDF.\nWe&#x27;ll need to extend it by adding plugins to it and using those to install versions\nof the language we want to use.</p><p>The list of plugins you&#x27;ll install will differ from what I use.\nI am a front end developer that works with Ruby / Rails as well as React.\nFrom time to time I also muck around in <a href=\"https://crystal-lang.org/\" title=\"Visit crystal-lang.org\">Crystal</a> or <a href=\"https://www.rust-lang.org/en-US/\" title=\"Visit rust-lang.org\">Rust</a>\n(both of which are awesome <!-- -->—<!-- --> check them out!). So I would head to the <a href=\"https://github.com/asdf-vm/asdf-plugins\" title=\"Visit asdf-vm plugins page\">plugins page</a>\nand look for plugins for those programming languages. The following is what I use:</p><ul><li><p><a href=\"https://github.com/asdf-vm/asdf-ruby\" title=\"Visit asdf-vm-asdf-ruby\">asdf-vm/asdf-ruby</a></p></li><li><p><a href=\"https://github.com/asdf-vm/asdf-nodejs\" title=\"Visit asdf-vm/asdf-nodejs on github\">asdf-vm/asdf-nodejs</a></p></li><li><p><a href=\"https://github.com/code-lever/asdf-rust\" title=\"Visit code-lever/asdf-rust on github\">code-lever/asdf-rust</a></p></li><li><p><a href=\"https://github.com/asdf-community/asdf-crystal\" title=\"Visit asdf-community/asdf-crystal on github\">asdf-community/asdf-crystal</a></p></li></ul><p>There are installation instructions on every plugin repo. Sometimes, steps\nfor migrating from your old version manager are also included.\nFor Ruby using RVM, the migration is as easy as moving <code>~/.rvm/rubies</code> to <code>~/.asdf/installs/ruby.</code></p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"sounds-smooth-any-bumps-along-the-way\"></a><a class=\"heading_link__1aoFY\" href=\"#sounds-smooth-any-bumps-along-the-way\">Sounds smooth, any bumps along the way?</a></h2><p>It could be that gems and even Ruby versions will not work. If you run into this issue,\nrun <code>asdf reshim [language]</code> and restart your shell to fix any broken paths.</p><p>If the problem persists, you can run <code>asdf current [language]</code> to find the current version.\nIt will also print the path to the version file that defined it.\nThis is much simpler than running a mixture of <code>ls</code> and <code>grep</code> to find out where that version comes from.</p><p>If you see the following after running <code>asdf current [language]</code>:</p><blockquote><p>No version set for <!-- -->[language]</p></blockquote><p>It means that you haven&#x27;t set or installed any versions for that language.\nIf you haven&#x27;t installed a version, run <code>asdf list-all [language]</code>.\nThis will list all the available versions that ASDF can install. Choose a version and run\n<code>asdf install [language] [version]</code> to install it.</p><p>If the plugin still doesn&#x27;t work, run <code>asdf global [language] [version]</code> which will create a <code>~/.tool-versions</code> file.\nThe language and version info will be stored and ASDF will attempt to load that version.</p><p>To set a specific version in a directory, <code>cd</code> to it and run\n<code>asdf local [language] [version]</code>. ASDF will use a local version over a global version.</p><p>After migrating from RVM, I had to rename my rubies.\nRVM stored them in the format of <code>ruby-[major]-[minor]-[patch]-p[ruby-patch]</code>.\nThis caused ASDF not to switch after running <code>asdf local ruby 2.4.1</code> because the folder\nname differed from the version input. Which meant I had to run <code>asdf local ruby ruby-2.4.1</code>.\nIf a language is already specified, I&#x27;d rather not bother typing it again.\nRemoving the <code>ruby-</code> prefix from the directory names in <code>~/.asdf/installs/ruby</code> fixed it.\nRunning <code>asdf local ruby 2.4.1</code> switched perfect afterwards.</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"extra-s\"></a><a class=\"heading_link__1aoFY\" href=\"#extra-s\">Extra&#x27;s</a></h2><p>A feature of the <code>asdf-ruby</code> plugin is that it can install a set of <a href=\"https://github.com/asdf-vm/asdf-ruby#default-gems\" title=\"Visit asdf-vm/asdf-ruby section on default gems\">default gems</a>\nspecified in a <code>~/.default-gems file</code>. I love this one as I&#x27;ll never have to run <code>gem install pry</code> again!</p><p>What RVM additionally offers that I have not seen in ASDF is the option to create a gemset.\nThis was and still is a useful feature if you&#x27;re doing Ruby projects involving lots of different\ngems or even testing with specific gems. I rarely felt the need to create a gemset myself.\nThus not having this feature did not have a lot of impact on my workflow (yet).\nI&#x27;m not sure if NVM adds any extra functionality, either way I think ASDF will fill the\ngaps because of how it was designed and how it can be extended.</p><p>Finally, I added a <code>~/.asdfrc</code> file containing: <code>legacy_version_file = yes</code>.\nThis enables ASDF read all version files we know and love.</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"conclusion\"></a><a class=\"heading_link__1aoFY\" href=\"#conclusion\">Conclusion</a></h2><p>As for my shell time, it&#x27;s back where it was with only RVM. But nothing messes with my <code>cd</code> command anymore.\nI also don&#x27;t have to keep adding these noisy <code>source</code> lines to <a href=\"https://github.com/sidofc/dotfiles\" title=\"Visit SidOfc/dotfiles on github\">my dotfiles</a>.</p><p>ASDF is still quite new and at the time of writing, there are few integrations.\nThis means that if you use <code>capistrano</code> to deploy using RVM for example, you won&#x27;t be able to do that using ASDF just yet.\nBut as mentioned above, someone somewhere will fix that gap or you could give it a shot yourself!</p><p>I hope you&#x27;ve learned something from this post and also that you will choose to switch to ASDF.\nNot because it&#x27;s better per-se but because it&#x27;s universal and extensible and you now no longer have\nto worry about version managers! Install a plugin and you&#x27;re done! A plugin system and a management system,\nbundled in 3 simple commands with a common interface. ASDF and I will be friends for a long time :)</p><p>Cheers!</p><p><em>Many thanks to <a href=\"https://medium.com/@vvangemert\" title=\"Visit Vincent van Gemert on Medium\">@vvgemert</a> for proofreading!</em></p><p>👋</p>","scope":{"title":"Switching to ASDF version manager","description":"Depending on how many languages you program in, getting all their version managers installed, added to <code>$PATH</code>, configured etc... becomes quite a pain when setting up a new system, or even figuring out how this one works because you've used something else for a while.","published":"2017-08-15T21:04:44Z"}},"slug":"switching-to-asdf-version-manager"}]},"__N_SSG":true}