{"pageProps":{"title":"Converting .gif to web-safe video formats using ffmpeg","description":"This post shows how to convert .gif images to web-safe video formats using ffmpeg cli. These formats produce smaller files which means less data to load!","published":"2021-02-14T18:30:00Z","readTimeInMinutes":3,"source":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"When recording animated content for my blog posts I use a gif recorder. However,\\nusing \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://caniuse.com/?search=webm\",\n    \"title\": \"View caniuse.com webm support\"\n  }, \".webm\"), \" or \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://caniuse.com/?search=mp4\",\n    \"title\": \"View caniuse.com mp4 support\"\n  }, \".mp4\"), \"\\nfiles is usually more efficient and works in pretty much every major browser today.\"), mdx(\"h2\", null, \"Convert .gif to .webm\"), mdx(\"p\", null, \"To convert a .gif file to .webm, use the following command:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"ffmpeg -i file.gif -c vp9 -b:v 0 -crf 40 file.webm\\n\")), mdx(\"p\", null, \"This will output a .webm file that works in most browsers, but what are these options\\ndoing exactly? Let's dive in:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"-i\"), \": Specifies the \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"input file\"), \", in this case \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"file.gif\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"-c\"), \": Specifies the \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"codec\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"vp9\"), \" works in most browsers.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"-b:v\"), \": Specifies the \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"video bitrate\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"0\"), \" allows us to specify the quality via the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"-crf\"), \" option.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"-crf\"), \": Specifies the \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"quality\"), \", ranges between 0-63, lower means better quality.\")), mdx(\"p\", null, \"More detailed explanations about the options can be found \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://trac.ffmpeg.org/wiki/Encode/VP9\",\n    \"title\": \"Visit ffmpeg VP9 encode page\"\n  }, \"here\"), \".\"), mdx(\"p\", null, \"These .webm files will suffer a little bit of quality loss, but if more quality is\\nneeded the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-crf\"), \" flag can be set to a lower value easily. With these settings\\nthe .webm file is (on average) \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"60%\"), \" smaller than the .gif file.\"), mdx(\"p\", null, \"When we check caniuse, \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://caniuse.com/?search=webm\",\n    \"title\": \"View caniuse.com webm support\"\n  }, \".webm support\"), \" looks good too, mostly.\\nIndeed the only real reason today to use .mp4 on the web is to support Internet Explorer.\"), mdx(\"h2\", null, \"Convert .gif to .mp4\"), mdx(\"p\", null, \"To convert a .gif file to a web-safe .mp4, use the following command:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"ffmpeg -i file.gif -movflags +faststart -pix_fmt yuv420p \\\\\\n       -vf \\\"scale=trunc(iw/2)*2:trunc(ih/2)*2\\\" file.mp4\\n\")), mdx(\"p\", null, \"This will output a .mp4 file that is \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://caniuse.com/?search=mp4\",\n    \"title\": \"View caniuse.com mp4 support\"\n  }, \"widely supported\"), \"\\nin all browsers except Opera Mini. Let's also cover the options for this one:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"-i\"), \": Specifies the \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"input file\"), \", in this case \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"file.gif\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"-movflags\"), \": For web video we can specify \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"+faststart\"), \" to allow the video to start playing before the download is complete.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"-pix_fmt\"), \": The default \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"yuv444p\"), \" can't be played by some mobile browsers so we set it to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"yuv420p\"), \" instead.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"-vf\"), \": This flag is allows us to set \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\\"scale=trunc(iw/2)*2:trunc(ih/2)*2\\\"\"), \" to ensure the video width and height are divisible by 2 which would otherwise cause an error when using \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"yuv420p\"), \".\")), mdx(\"p\", null, \"More detailed expoanations about the options can be found \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://trac.ffmpeg.org/wiki/Encode/H.264\",\n    \"title\": \"Visit ffmpeg H.264 encode page\"\n  }, \"here\"), \".\\nAdditionally, \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/manateelazycat/deepin-screen-recorder/commit/a49612faed28fc70a98aa117839cc67d96b99761\",\n    \"title\": \"Read details about pix_fmt and vf flags command line flags\"\n  }, \"this commit\"), \"\\nprovides some additional context about \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-pix_fmt\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-vf\"), \".\"), mdx(\"p\", null, \"The .mp4 file is (on average) \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"50%\"), \" smaller than the .gif file. While less efficient\\nthan .webm, it is still much better than using .gif.\"), mdx(\"h2\", null, \"Conclusion\"), mdx(\"p\", null, \"Hopefully this post made it a little bit easier to understand how to convert\\n.gif files to .webm or .mp4 using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ffmpeg\"), \". It a powerful tool that can help us\\noptimize our usage of animated media on the web. It is definitely worth looking\\ninto if you run a website that displays lots of gifs.\"), mdx(\"p\", null, \"Until next time :)\"), mdx(\"p\", null, \"\\uD83D\\uDC4B\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>When recording animated content for my blog posts I use a gif recorder. However,\nusing <a href=\"https://caniuse.com/?search=webm\" title=\"View caniuse.com webm support\">.webm</a> or <a href=\"https://caniuse.com/?search=mp4\" title=\"View caniuse.com mp4 support\">.mp4</a>\nfiles is usually more efficient and works in pretty much every major browser today.</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"convert-gif-to\"></a><a class=\"heading_link__1aoFY\" href=\"#convert-gif-to\">Convert .gif to .webm</a></h2><p>To convert a .gif file to .webm, use the following command:</p><pre class=\"prism-code language-shell\" style=\"background-color:#2a2734;color:#9a86fd\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">ffmpeg -i file.gif -c vp9 -b:v </span><span class=\"token number\" style=\"color:#e09142\">0</span><span class=\"token plain\"> -crf </span><span class=\"token number\" style=\"color:#e09142\">40</span><span class=\"token plain\"> file.webm</span></div></pre><p>This will output a .webm file that works in most browsers, but what are these options\ndoing exactly? Let&#x27;s dive in:</p><ul><li><code>-i</code>: Specifies the <em>input file</em>, in this case <code>file.gif</code>.</li><li><code>-c</code>: Specifies the <em>codec</em>, <code>vp9</code> works in most browsers.</li><li><code>-b:v</code>: Specifies the <em>video bitrate</em>, <code>0</code> allows us to specify the quality via the <code>-crf</code> option.</li><li><code>-crf</code>: Specifies the <em>quality</em>, ranges between 0-63, lower means better quality.</li></ul><p>More detailed explanations about the options can be found <a href=\"https://trac.ffmpeg.org/wiki/Encode/VP9\" title=\"Visit ffmpeg VP9 encode page\">here</a>.</p><p>These .webm files will suffer a little bit of quality loss, but if more quality is\nneeded the <code>-crf</code> flag can be set to a lower value easily. With these settings\nthe .webm file is (on average) <strong>60%</strong> smaller than the .gif file.</p><p>When we check caniuse, <a href=\"https://caniuse.com/?search=webm\" title=\"View caniuse.com webm support\">.webm support</a> looks good too, mostly.\nIndeed the only real reason today to use .mp4 on the web is to support Internet Explorer.</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"convert-gif-to\"></a><a class=\"heading_link__1aoFY\" href=\"#convert-gif-to\">Convert .gif to .mp4</a></h2><p>To convert a .gif file to a web-safe .mp4, use the following command:</p><pre class=\"prism-code language-shell\" style=\"background-color:#2a2734;color:#9a86fd\"><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">ffmpeg -i file.gif -movflags +faststart -pix_fmt yuv420p </span><span class=\"token punctuation\" style=\"color:#6c6783\">\\</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9a86fd\"><span class=\"token plain\">       -vf </span><span class=\"token string\" style=\"color:#ffcc99\">&quot;scale=trunc(iw/2)*2:trunc(ih/2)*2&quot;</span><span class=\"token plain\"> file.mp4</span></div></pre><p>This will output a .mp4 file that is <a href=\"https://caniuse.com/?search=mp4\" title=\"View caniuse.com mp4 support\">widely supported</a>\nin all browsers except Opera Mini. Let&#x27;s also cover the options for this one:</p><ul><li><code>-i</code>: Specifies the <em>input file</em>, in this case <code>file.gif</code>.</li><li><code>-movflags</code>: For web video we can specify <code>+faststart</code> to allow the video to start playing before the download is complete.</li><li><code>-pix_fmt</code>: The default <code>yuv444p</code> can&#x27;t be played by some mobile browsers so we set it to <code>yuv420p</code> instead.</li><li><code>-vf</code>: This flag is allows us to set <code>&quot;scale=trunc(iw/2)*2:trunc(ih/2)*2&quot;</code> to ensure the video width and height are divisible by 2 which would otherwise cause an error when using <code>yuv420p</code>.</li></ul><p>More detailed expoanations about the options can be found <a href=\"https://trac.ffmpeg.org/wiki/Encode/H.264\" title=\"Visit ffmpeg H.264 encode page\">here</a>.\nAdditionally, <a href=\"https://github.com/manateelazycat/deepin-screen-recorder/commit/a49612faed28fc70a98aa117839cc67d96b99761\" title=\"Read details about pix_fmt and vf flags command line flags\">this commit</a>\nprovides some additional context about <code>-pix_fmt</code> and <code>-vf</code>.</p><p>The .mp4 file is (on average) <strong>50%</strong> smaller than the .gif file. While less efficient\nthan .webm, it is still much better than using .gif.</p><h2 class=\"heading_container__2UElk\"><a class=\"heading_anchor__PWj4r\" id=\"conclusion\"></a><a class=\"heading_link__1aoFY\" href=\"#conclusion\">Conclusion</a></h2><p>Hopefully this post made it a little bit easier to understand how to convert\n.gif files to .webm or .mp4 using <code>ffmpeg</code>. It a powerful tool that can help us\noptimize our usage of animated media on the web. It is definitely worth looking\ninto if you run a website that displays lots of gifs.</p><p>Until next time :)</p><p>👋</p>","scope":{"title":"Converting .gif to web-safe video formats using ffmpeg","description":"This post shows how to convert .gif images to web-safe video formats using ffmpeg cli. These formats produce smaller files which means less data to load!","published":"2021-02-14T18:30:00Z"}},"slug":"converting-gif-to-web-safe-video-formats-using-ffmpeg"},"__N_SSG":true}