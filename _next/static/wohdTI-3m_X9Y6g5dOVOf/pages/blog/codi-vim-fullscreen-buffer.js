(window.webpackJsonp=window.webpackJsonp||[]).push([["7d85"],{Vehr:function(e,t,i){"use strict";i.r(t),i.d(t,"meta",function(){return c}),i.d(t,"default",function(){return h});var n=i("kOwS"),a=i("qNsG"),o=(i("q1tI"),i("E/Ix")),s=i("dBck"),r=i("SEsP"),c={title:"Codi.vim + fullscreen buffer",author:"Sidney Liebrand",date:"27-08-2018 07:55:24",excerpt:"Learn how to set up Codi.vim to create a fullscreen scratch buffer that also works with Vim splits. We will take a look at wrapping the <code>Codi</code> command and improving the buffer name(s) as seen in <code>:ls</code>.",words:860},l={meta:c},b="wrapper";function h(e){var t=e.components,i=Object(a.a)(e,["components"]);return Object(o.b)(b,Object(n.a)({},l,i,{components:t,mdxType:"MDXLayout"}),Object(o.b)(s.b,Object(n.a)({},c,{mdxType:"Title"})),Object(o.b)(r.h,{wide:!0,mdxType:"CodiBanner"}),Object(o.b)("p",null,"Recently I discovered ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/metakirby5/codi.vim"}),"codi.vim")," on ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://vimawesome.com/?q=cat%3Aother"}),"vimawesome.com"),'.\nIt sells itself as an "interactive scratchpad for hackers".\nAfter playing around with it for 5 minutes I was completely sold.'),Object(o.b)("p",null,"I pair program on a weekly basis using various different languages.\nI used to turn to a REPL for help but this quickly becomes annoying when trying to write multi-line expressions.\nMaking a typo in the middle of a ",Object(o.b)("inlineCode",{parentName:"p"},"do ... end")," block in Ruby is quite costly:"),Object(o.b)(r.r,{mdxType:"PryMultilineTypo"}),Object(o.b)("p",null,"Another thing to note here is that code and results are printed sequentially.\nThis means that any code you write goes off-screen at least twice as fast because the result is printed below it."),Object(o.b)("p",null,"In case of errors and stack traces it can become a lot worse as well.\nCodi solves all of this by allowing you to type in one pane and it prints the results in a separate pane side-by-side:"),Object(o.b)(r.v,{mdxType:"RubyDemo"}),Object(o.b)("p",null,"This feature, and the fact that I can toggle this buffer for ",Object(o.b)("em",{parentName:"p"},"multiple programming languages")," using a single mapping blew my mind but as with anything,\nit requires some more battle testing to see if it works in common scenario's."),Object(o.b)("h2",null,"Battle testing"),Object(o.b)("p",null,"This is where I found out that when used with a split, it will not be fullscreen but rather split the current buffer:"),Object(o.b)(r.w,{mdxType:"SplitBehavior"}),Object(o.b)("p",null,"At this point I started experimenting with a small ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://gist.github.com/SidOfc/5218a7a9f12ed2105a9b052ca8e6707e"}),"vimscript snippet")," in my .vimrc.\nExcluding comments and blanks it is 10 LoC.\nIt wraps the default ",Object(o.b)("inlineCode",{parentName:"p"},"Codi")," command in a function which creates an empty buffer in a new tab with the right filetype set before finally running ",Object(o.b)("inlineCode",{parentName:"p"},"Codi")," itself.\nThis creates the fullscreen split that I wanted:"),Object(o.b)(r.z,{mdxType:"WrappedSplitBehavior"}),Object(o.b)("h2",null,"Problem solved, or maybe not?"),Object(o.b)("p",null,"All good so far, but upon closing the buffer, the contents of the buffer are deleted.\nWhile automatically clearing the scratchpad is nice, sometimes I want to go back and forth between the code and the scratchpad to add additional code or compare the existing code with the scratchpad code."),Object(o.b)("p",null,"This required a ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://gist.github.com/SidOfc/3f94244a8b08406710b6669052f66d62"}),"second iteration")," of the original vimscript snippet.\nThis time I did not want to delete the buffer but hide it instead, keeping the code that was already written in it.\nAfter hiding the buffer, its ",Object(o.b)("inlineCode",{parentName:"p"},"tabpagenr()")," is stored in a dictionary keyed by the filetype of the buffer."),Object(o.b)("p",null,"Then, when toggling codi for a filetype that is stored, switch to that tab instead of opening a new one (there is even a check if that tab actually exists):"),Object(o.b)(r.A,{mdxType:"WrappedSplitBehavior2"}),Object(o.b)("p",null,"And there we go! Aside from the fact that the buffer now remains, the name is also ",Object(o.b)("inlineCode",{parentName:"p"},"scratch::ruby"),".\nThis is a bit more descriptive than having just ",Object(o.b)("inlineCode",{parentName:"p"},"[Scratch]")," in ",Object(o.b)("inlineCode",{parentName:"p"},":ls")," output when multiple codi buffers of a different filetype are active."),Object(o.b)("h2",null,"Let's wrap it in an issue"),Object(o.b)("p",null,"It was a fun experience tweaking this plugin to my liking.\nI thought this feature would be so awesome that I even proposed it in an ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/metakirby5/codi.vim/issues/9://github.com/metakirby5/codi.vim/issues/94"}),"issue"),".\nUnfortunately it didn't make it since it was too workflow specific."),Object(o.b)("p",null,"As you may have been able to see in the issue though, the code in that snippet is ",Object(o.b)("em",{parentName:"p"},"slighty")," different from the example gist linked in this post.\nThe main difference is this line which resizes codi to 50% of the buffer width whenever a new instance is spawned:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-vim"}),"\" since it is fullscreen, I'd like a 50/50 split\nlet g:codi#width = winwidth(winnr()) / 2\n")),Object(o.b)("p",null,"The author thought it would be a nice addition to have percentage width support and for the snippets to live elsewhere for others to use in their .vimrc.\nSo I went ahead and ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/metakirby5/codi.vim/pull/95"}),"wrote a PR")," for that instead, this is why you see\n",Object(o.b)("inlineCode",{parentName:"p"},"let g:codi#width = 50.0")," in the gists :)"),Object(o.b)("h2",null,"Conclusion"),Object(o.b)("p",null,"All in all it was a great experience discovering this plugin.\nIt is like one of those rare cases with a song where after a few seconds ",Object(o.b)("strong",{parentName:"p"},"you just know")," ",Object(o.b)("em",{parentName:"p"},'"this song is awesome"'),".\nI believe I'll be using it for a long time to come for quickly testing and showing some code."),Object(o.b)("p",null,"This also gave me the chance to write my first non-organization bound PR for a project which I like and now also use.\nSomething which I wanted to do for a long time but couldn't really find the right project to contribute to.\nI want to thank ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://medium.com/@metakirby5"}),"Ethan Chan")," for his awesome plugin and for being a kind and friendly maintainer!"),Object(o.b)("p",null,"That's it! If you want a fullscreen workflow with codi.vim, you have it.\nIf you want to persist the code in the buffer, you have it.\nIf you have a great idea, comment on this post!"),Object(o.b)("p",null,"Until next time."),Object(o.b)("p",null,"ðŸ‘‹"))}h.isMDXComponent=!0},lO46:function(e,t,i){(window.__NEXT_P=window.__NEXT_P||[]).push(["/blog/codi-vim-fullscreen-buffer",function(){var e=i("Vehr");return{page:e.default||e}}])}},[["lO46","5d41","9da1"]]]);