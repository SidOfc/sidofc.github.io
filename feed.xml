<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>Sidney Liebrand's blog</title>
        <description>The official https://sidneyliebrand.io RSS feed!</description>
        <link>https://sidneyliebrand.io</link>
        <lastBuildDate>Fri, 31 Aug 2018 20:41:19 GMT</lastBuildDate>
        <copyright>Copyright https://sidneyliebrand.io 2019</copyright>
        <category term="technology" />
        <item><title>Recruiters who call during working hours</title><description>Any kind of cold-call from some random recruiter or sales rep is annoying enough as is. Imagine my frustration when I got a call from a recruiter who called on the company phone in the middle of a working day!</description><link>https://sidneyliebrand.io/blog/recruiters-who-call-during-working-hours</link><guid isPermalink="true">https://sidneyliebrand.io/blog/recruiters-who-call-during-working-hours</guid><pubDate>Fri, 31 Aug 2018 20:41:19 GMT</pubDate></item><item><title>Codi.vim + fullscreen buffer</title><description>Learn how to set up Codi.vim to create a fullscreen scratch buffer that also works with Vim splits. We will take a look at wrapping the Codi command and improving the buffer name(s) as seen in :ls.</description><link>https://sidneyliebrand.io/blog/codi-vim-fullscreen-buffer</link><guid isPermalink="true">https://sidneyliebrand.io/blog/codi-vim-fullscreen-buffer</guid><pubDate>Mon, 27 Aug 2018 05:55:24 GMT</pubDate></item><item><title>Vim tip: persistent undo</title><description>Usually, when you open a file in your editor, make some changes, save and close, you lose the ability to ctrl+Z. Vim has a built in mechanism to persist changes made to files on disk. This may not sound that exciting, but what if your editor crashes while you have a set of changes you may want to revert stored?</description><link>https://sidneyliebrand.io/blog/vim-tip-persistent-undo</link><guid isPermalink="true">https://sidneyliebrand.io/blog/vim-tip-persistent-undo</guid><pubDate>Sat, 04 Aug 2018 18:17:52 GMT</pubDate></item><item><title>How FZF and ripgrep improved my workflow</title><description>In my never ending quest for simplicity I recently discovered FZF and ripgrep. Two command-line tools that have the potential to make every dag programming tasks easier. In this post I will explain how I use these tools to do things in a matter of keystrokes rather than having to re-google that command you keep forgetting every. single. time..</description><link>https://sidneyliebrand.io/blog/how-fzf-and-ripgrep-improved-my-workflow</link><guid isPermalink="true">https://sidneyliebrand.io/blog/how-fzf-and-ripgrep-improved-my-workflow</guid><pubDate>Sat, 23 Jun 2018 22:00:00 GMT</pubDate></item><item><title>The greatnesses and gotchas of YAML</title><description>YAML is a great language for configuration files, it is a lot more flexible than JSON with comments and inheritance for example. While I was doing some research about YAML I found bits of information scattered all over the place so I attempted to piece the great things and the quirks together in a post!</description><link>https://sidneyliebrand.io/blog/the-greatnesses-and-gotchas-of-yaml</link><guid isPermalink="true">https://sidneyliebrand.io/blog/the-greatnesses-and-gotchas-of-yaml</guid><pubDate>Sat, 23 Dec 2017 06:25:59 GMT</pubDate></item><item><title>A collection of Vim key binds</title><description>In my never ending quest for an optimal Vim setup I am always looking for ways to improve. I've used Vim for about two months now and I'm still learning a lot. In this post I'm going to take you through a part of my .vimrc that describes my non-plugin key binds.</description><link>https://sidneyliebrand.io/blog/a-collection-of-vim-key-binds</link><guid isPermalink="true">https://sidneyliebrand.io/blog/a-collection-of-vim-key-binds</guid><pubDate>Sat, 16 Sep 2017 11:11:03 GMT</pubDate></item><item><title>Combining Caniuse with FZF</title><description>There is caniuse.com which you can use to search online, but what if you're a lazy dev like me that likes to keep his stuff in the terminal? Well, for this reason I wrote a small wrapper using some of my all time favorite tools: Ruby and FZF!</description><link>https://sidneyliebrand.io/blog/combining-caniuse-with-fzf</link><guid isPermalink="true">https://sidneyliebrand.io/blog/combining-caniuse-with-fzf</guid><pubDate>Sun, 03 Sep 2017 09:47:27 GMT</pubDate></item><item><title>Switching to ASDF version manager</title><description>Depending on how many languages you program in, getting all their version managers installed, added to $PATH, configured etc... becomes quite a pain when setting up a new system, or even figuring out how this one works because you've used something else for a while.</description><link>https://sidneyliebrand.io/blog/switching-to-asdf-version-manager</link><guid isPermalink="true">https://sidneyliebrand.io/blog/switching-to-asdf-version-manager</guid><pubDate>Tue, 15 Aug 2017 19:04:44 GMT</pubDate></item>
    </channel>
</rss>
