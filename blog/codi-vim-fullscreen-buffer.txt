3:I[9275,[],""]
5:I[1343,[],""]
8:I[231,["231","static/chunks/231-0826ad95ffafa567.js","308","static/chunks/app/blog/%5Bslug%5D/page-359136fc0f974fa1.js"],""]
4:["slug","codi-vim-fullscreen-buffer","d"]
7:Ta6a,html.light { --prism-plain-backgroundColor: #f6f8fa;--prism-plain-color: #393A34;--prism-comment-color: #999988;--prism-comment-fontStyle: italic;--prism-prolog-color: #999988;--prism-prolog-fontStyle: italic;--prism-cdata-color: #999988;--prism-cdata-fontStyle: italic;--prism-doctype-color: #999988;--prism-doctype-fontStyle: italic;--prism-punctuation-color: #393A34;--prism-entity-color: #36acaa;--prism-attr-name-color: #00a4db;--prism-boolean-color: #36acaa;--prism-constant-color: #36acaa;--prism-number-color: #36acaa;--prism-atrule-color: #00a4db;--prism-keyword-color: #00009f;--prism-property-color: #36acaa;--prism-tag-color: #00009f;--prism-symbol-color: #36acaa;--prism-deleted-color: #d73a49;--prism-selector-color: #00009f;--prism-string-color: #e3116c;--prism-inserted-color: #36acaa;--prism-regex-color: #36acaa;--prism-attr-value-color: #e3116c;--prism-variable-color: #36acaa;--prism-operator-color: #393A34;--prism-function-color: #d73a49;--prism-url-color: #36acaa;--prism-namespace-opacity: 0.7;--prism-function-variable-color: #6f42c1; }
html.dark { --prism-plain-backgroundColor: hsl(220, 13%, 18%);--prism-plain-color: hsl(220, 14%, 71%);--prism-plain-textShadow: 0 1px rgba(0, 0, 0, 0.3);--prism-comment-color: hsl(220, 10%, 40%);--prism-prolog-color: hsl(220, 10%, 40%);--prism-cdata-color: hsl(220, 10%, 40%);--prism-doctype-color: hsl(220, 14%, 71%);--prism-punctuation-color: hsl(220, 14%, 71%);--prism-entity-color: hsl(220, 14%, 71%);--prism-attr-name-color: hsl(29, 54%, 61%);--prism-class-name-color: hsl(29, 54%, 61%);--prism-maybe-class-name-color: hsl(29, 54%, 61%);--prism-boolean-color: hsl(29, 54%, 61%);--prism-constant-color: hsl(29, 54%, 61%);--prism-number-color: hsl(29, 54%, 61%);--prism-atrule-color: hsl(29, 54%, 61%);--prism-keyword-color: hsl(286, 60%, 67%);--prism-property-color: hsl(355, 65%, 65%);--prism-tag-color: hsl(355, 65%, 65%);--prism-symbol-color: hsl(355, 65%, 65%);--prism-deleted-color: hsl(355, 65%, 65%);--prism-deleted-textDecorationLine: line-through;--prism-important-color: hsl(220, 14%, 71%);--prism-important-fontWeight: bold;--prism-selector-color: hsl(95, 38%, 62%);--prism-string-color: hsl(95, 38%, 62%);--prism-char-color: hsl(95, 38%, 62%);--prism-builtin-color: hsl(95, 38%, 62%);--prism-inserted-color: hsl(95, 38%, 62%);--prism-inserted-textDecorationLine: underline;--prism-regex-color: hsl(95, 38%, 62%);--prism-attr-value-color: hsl(95, 38%, 62%);--prism-variable-color: hsl(207, 82%, 66%);--prism-operator-color: hsl(207, 82%, 66%);--prism-function-color: hsl(207, 82%, 66%);--prism-url-color: hsl(187, 47%, 55%);--prism-italic-fontStyle: italic;--prism-bold-fontWeight: bold; }0:["Brk8wIdLlP_oqfu_0NZfP",[[["",{"children":["blog",{"children":[["slug","codi-vim-fullscreen-buffer","d"],{"children":["__PAGE__?{\"slug\":\"codi-vim-fullscreen-buffer\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","codi-vim-fullscreen-buffer","d"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/8450b0a56c34517c.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/31a1d14605fe1cd4.css","precedence":"next","crossOrigin":"$undefined"}]]}],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"suppressHydrationWarning":true,"lang":"en","children":[["$","head",null,{"children":["$L6",["$","style",null,{"children":"$7"}]]}],["$","body",null,{"children":["$","div",null,{"className":"layout_application__n0Q7V __className_68e9d9","children":[["$","header",null,{"className":"layout_header__3jMk9","children":["$","div",null,{"className":"layout_headerFixed__rx0vE","children":["$","div",null,{"className":"layout_headerContent__9T0DC","children":[["$","$L8",null,{"href":"/","className":"layout_logo__i3hhL","title":"View home page","children":[["$","span",null,{"className":"layout_logoTopLeft__mQsLC"}],["$","span",null,{"className":"layout_logoBottomLeft__yzF8i"}],["$","span",null,{"className":"layout_logoTopRight__k_p_8"}],["$","span",null,{"className":"layout_logoBottomRight__vRnMa"}]]}],["$","nav",null,{"className":"layout_navigation__RQQL0","children":[["$","$L8",null,{"href":"/cv","title":"View curriculum vitae","children":"C.V."}],["$","$L8",null,{"className":"layout_githubWrapper__HkSRx","href":"https://github.com/SidOfc","title":"Visit Sidney Liebrand's GitHub page","children":["$","figure",null,{"onClick":"$undefined","className":"layout_github__hYJcX media_figure__wgz58 media_invertDark__O69xZ","children":[["$","div",null,{"className":"media_relative__Oqy8s","style":{"paddingBottom":"100%"},"children":["$","img",null,{"loading":"lazy","className":"media_media__dB51W","src":"/media/github.svg","alt":"Sidney Liebrand's GitHub page"}]}],false]}]}],["$","div",null,{"tabIndex":0,"title":"Toggle dark theme","className":"dark-mode-toggle_wrapper__0g8vi","children":[["$","svg",null,{"fill":"#000000","data-theme":"light","className":"dark-mode-toggle_toggle__NLlV2","xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 24 24","children":[["$","path",null,{"d":"M0 0h24v24H0z","fill":"none"}],["$","path",null,{"d":"M6.76 4.84l-1.8-1.79-1.41 1.41 1.79 1.79 1.42-1.41zM4 10.5H1v2h3v-2zm9-9.95h-2V3.5h2V.55zm7.45 3.91l-1.41-1.41-1.79 1.79 1.41 1.41 1.79-1.79zm-3.21 13.7l1.79 1.8 1.41-1.41-1.8-1.79-1.4 1.4zM20 10.5v2h3v-2h-3zm-8-5c-3.31 0-6 2.69-6 6s2.69 6 6 6 6-2.69 6-6-2.69-6-6-6zm-1 16.95h2V19.5h-2v2.95zm-7.45-3.91l1.41 1.41 1.79-1.8-1.41-1.41-1.79 1.8z"}]]}],["$","svg",null,{"fill":"#000000","data-theme":"dark","className":"dark-mode-toggle_toggle__NLlV2","xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 24 24","children":[["$","path",null,{"d":"M0 0h24v24H0z","fill":"none"}],["$","path",null,{"d":"M9.5,2c-1.82,0-3.53,0.5-5,1.35c2.99,1.73,5,4.95,5,8.65s-2.01,6.92-5,8.65C5.97,21.5,7.68,22,9.5,22c5.52,0,10-4.48,10-10 S15.02,2,9.5,2z"}]]}]]}]]}]]}]}]}],["$","main",null,{"className":"layout_content___6Lgz","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","section",null,{"className":"not-found_page__ovuIG","children":[["$","figure",null,{"onClick":"$undefined","className":"not-found_jackieChanWhat__CXIf9 media_figure__wgz58 media_invertDark__O69xZ","children":[["$","div",null,{"className":"media_relative__Oqy8s","style":{"paddingBottom":"61.29032258064516%"},"children":["$","img",null,{"loading":"lazy","className":"media_media__dB51W","src":"/media/jackie-chan-what.svg","alt":"$undefined"}]}],"$undefined"]}],["$","h1",null,{"className":"not-found_pageHeading__GYmz1","children":"Page not found, what?!"}],["$","$L8",null,{"href":"/","children":["$","button",null,{"tabIndex":0,"className":"button_button__zuVOf","onClick":"$undefined","children":"View homepage"}]}]]}],"notFoundStyles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/31a1d14605fe1cd4.css","precedence":"next","crossOrigin":"$undefined"}]],"styles":null}]}],["$","footer",null,{"className":"layout_footer__CuyOY","children":[["$","strong",null,{"children":"©"}]," sidneyliebrand.io"," ",2024,["$","span",null,{"className":"bullet_bullet__vDh0G bullet_wide__Vv6L1","children":"•"}],["$","$L8",null,{"prefetch":false,"href":"/feed.xml","title":"View RSS feed","children":"RSS"}],["$","span",null,{"className":"bullet_bullet__vDh0G bullet_wide__Vv6L1","children":"•"}],["$","$L8",null,{"prefetch":false,"href":"/atom.xml","title":"View Atom feed","children":"Atom"}]]}]]}]}]]}],null],null],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/a2f2281afa63742b.css","precedence":"next","crossOrigin":"$undefined"}]],"$L9"]]]]
6:["$","script",null,{"dangerouslySetInnerHTML":{"__html":"!function(e=[]){let t,a=document.querySelector(\"html\"),r=(t,r)=>{for(let t of e)a.classList.remove(t);if(t&&a.classList.add(t),r)try{t?localStorage.setItem(\"theme\",t):localStorage.removeItem(\"theme\")}catch(e){}};try{t||=localStorage.getItem(\"theme\")}catch(e){t||=\"light\"}if(a.classList.remove(\"no-js\"),window.addEventListener(\"click\",(e=>{let t=e.target.getAttribute(\"data-theme\");t&&r(t,!0)})),window.addEventListener(\"storage\",(e=>{\"theme\"===e.key&&r(e.newValue)})),window.matchMedia){var c=window.matchMedia(\"(prefers-color-scheme: dark)\");!t&&c.matches&&(t=\"dark\"),c.addEventListener(\"change\",(e=>{try{localStorage.getItem(\"theme\")||r(e.matches?\"dark\":\"light\")}catch(e){}}))}r(t)}([\"light\",\"dark\"]);"}}]
a:I[9426,["231","static/chunks/231-0826ad95ffafa567.js","308","static/chunks/app/blog/%5Bslug%5D/page-359136fc0f974fa1.js"],"default"]
2:["$","article",null,{"className":"post_post__V86NT","children":[["$","$La",null,{"link":"/blog/codi-vim-fullscreen-buffer","children":"Codi.vim + fullscreen buffer"}],["$","span",null,{"children":["By Sidney Liebrand on"," ","Aug 27, 2018",["$","span",null,{"className":"bullet_bullet__vDh0G","children":"•"}],5," min read"],"className":"post_postData__5nBDA text_page-accent-fg__r7Sxg"}],["$","section",null,{"children":"$Lb"}],["$","$L8",null,{"href":"/","children":["$","button",null,{"tabIndex":0,"className":"button_button__zuVOf","onClick":"$undefined","children":"Back"}]}]]}]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"name":"theme-color","content":"#ffffff"}],["$","meta","2",{"charSet":"utf-8"}],["$","title","3",{"children":"Sidney Liebrand's blog - Codi.vim + fullscreen buffer"}],["$","meta","4",{"name":"description","content":"Learn how to set up Codi.vim to create a fullscreen scratch buffer that also works with Vim splits. We will take a look at wrapping the <code>Codi</code> command and improving the buffer name(s) as seen in <code>:ls</code>."}],["$","link","5",{"rel":"author","href":"https://sidneyliebrand.io"}],["$","meta","6",{"name":"author","content":"Sidney Liebrand"}],["$","link","7",{"rel":"manifest","href":"/site.webmanifest","crossOrigin":"use-credentials"}],["$","meta","8",{"name":"creator","content":"Sidney Liebrand"}],["$","meta","9",{"name":"publisher","content":"Sidney Liebrand"}],["$","meta","10",{"name":"robots","content":"index, follow"}],["$","meta","11",{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","link","12",{"rel":"canonical","href":"https://sidneyliebrand.io/blog/codi-vim-fullscreen-buffer"}],["$","link","13",{"rel":"alternate","type":"application/rss+xml","href":"https://sidneyliebrand.io/feed.xml"}],["$","link","14",{"rel":"alternate","type":"application/atom+xml","href":"https://sidneyliebrand.io/atom.xml"}],["$","meta","15",{"property":"og:title","content":"Sidney Liebrand's blog - Codi.vim + fullscreen buffer"}],["$","meta","16",{"property":"og:description","content":"Learn how to set up Codi.vim to create a fullscreen scratch buffer that also works with Vim splits. We will take a look at wrapping the <code>Codi</code> command and improving the buffer name(s) as seen in <code>:ls</code>."}],["$","meta","17",{"property":"og:url","content":"https://sidneyliebrand.io/blog/codi-vim-fullscreen-buffer"}],["$","meta","18",{"property":"og:site_name","content":"Sidney Liebrand's blog"}],["$","meta","19",{"property":"og:type","content":"article"}],["$","meta","20",{"property":"article:published_time","content":"2018-08-27T07:55:24Z"}],["$","meta","21",{"name":"twitter:card","content":"summary"}],["$","meta","22",{"name":"twitter:title","content":"Sidney Liebrand's blog - Codi.vim + fullscreen buffer"}],["$","meta","23",{"name":"twitter:description","content":"Learn how to set up Codi.vim to create a fullscreen scratch buffer that also works with Vim splits. We will take a look at wrapping the <code>Codi</code> command and improving the buffer name(s) as seen in <code>:ls</code>."}],["$","link","24",{"rel":"icon","href":"/favicon.ico","sizes":"48x48"}],["$","link","25",{"rel":"icon","href":"/favicon-16x16.png","sizes":"16x16"}],["$","link","26",{"rel":"icon","href":"/favicon-32x32.png","sizes":"32x32"}],["$","link","27",{"rel":"apple-touch-icon","href":"/apple-icon.png","sizes":"180x180"}],["$","link","28",{"rel":"mask-icon","href":"/safari-pinned-tab.svg","color":"#a676ff"}],["$","meta","29",{"name":"next-size-adjust"}]]
1:null
b:[["$","figure",null,{"onClick":"$undefined","className":"media_figure__wgz58","children":[["$","div",null,{"className":"media_relative__Oqy8s","style":{"paddingBottom":"58.133971291866025%"},"children":["$","img",null,{"loading":"lazy","className":"media_media__dB51W","src":"/media/posts/codi-banner.png","alt":"A Codi.vim fullscreen buffer"}]}],["$","figcaption",null,{"className":"media_alt__6tx_o","children":"A Codi.vim fullscreen buffer"}]]}],"\n",["$","p",null,{"children":["Recently I discovered ",["$","a",null,{"href":"https://github.com/metakirby5/codi.vim","title":"Visit metakirby5/codi.vim on GitHub","children":"codi.vim"}]," on ",["$","a",null,{"href":"https://vimawesome.com/?q=cat%3Aother","title":"Visit vimawesome.com 'Other' category plugin","children":"vimawesome.com"}],".\nIt sells itself as an \"interactive scratchpad for hackers\".\nAfter playing around with it for 5 minutes I was completely sold."]}],"\n",["$","p",null,{"children":["I pair program on a weekly basis using various different languages.\nI used to turn to a REPL for help but this quickly becomes annoying when trying to write multi-line expressions.\nMaking a typo in the middle of a ",["$","code",null,{"children":"do ... end"}]," block in Ruby is quite costly:"]}],"\n",["$","figure",null,{"onClick":"$undefined","className":"media_figure__wgz58","children":[["$","div",null,{"className":"media_relative__Oqy8s","style":{"paddingBottom":"24.20135527589545%"},"children":["$","video",null,{"className":"media_media__dB51W","autoPlay":true,"loop":true,"muted":true,"playsInline":true,"children":[["$","source","webm",{"src":"/media/posts/pry-multiline-typo.webm","type":"video/webm"}],["$","source","mp4",{"src":"/media/posts/pry-multiline-typo.mp4","type":"video/mp4"}]]}]}],["$","figcaption",null,{"className":"media_alt__6tx_o","children":"Multiline expression typo in Pry"}]]}],"\n",["$","p",null,{"children":"Another thing to note here is that code and results are printed sequentially.\nThis means that any code you write goes off-screen at least twice as fast because the result is printed below it."}],"\n",["$","p",null,{"children":"In case of errors and stack traces it can become a lot worse as well.\nCodi solves all of this by allowing you to type in one pane and it prints the results in a separate pane side-by-side:"}],"\n",["$","figure",null,{"onClick":"$undefined","className":"media_figure__wgz58","children":[["$","div",null,{"className":"media_relative__Oqy8s","style":{"paddingBottom":"13.649564375605033%"},"children":["$","video",null,{"className":"media_media__dB51W","autoPlay":true,"loop":true,"muted":true,"playsInline":true,"children":[["$","source","webm",{"src":"/media/posts/ruby-demo.webm","type":"video/webm"}],["$","source","mp4",{"src":"/media/posts/ruby-demo.mp4","type":"video/mp4"}]]}]}],["$","figcaption",null,{"className":"media_alt__6tx_o","children":"Demo of Ruby in Codi.vim"}]]}],"\n",["$","p",null,{"children":["This feature, and the fact that I can toggle this buffer for ",["$","em",null,{"children":"multiple programming languages"}]," using a single mapping blew my mind but as with anything,\nit requires some more battle testing to see if it works in common scenario's."]}],"\n",["$","$La",null,{"children":"Battle testing","as":"h2"}],"\n",["$","p",null,{"children":"This is where I found out that when used with a split, it will not be fullscreen but rather split the current buffer:"}],"\n",["$","figure",null,{"onClick":"$undefined","className":"media_figure__wgz58","children":[["$","div",null,{"className":"media_relative__Oqy8s","style":{"paddingBottom":"48.01548886737657%"},"children":["$","video",null,{"className":"media_media__dB51W","autoPlay":true,"loop":true,"muted":true,"playsInline":true,"children":[["$","source","webm",{"src":"/media/posts/split-behavior.webm","type":"video/webm"}],["$","source","mp4",{"src":"/media/posts/split-behavior.mp4","type":"video/mp4"}]]}]}],["$","figcaption",null,{"className":"media_alt__6tx_o","children":"Default split behavior"}]]}],"\n",["$","p",null,{"children":["At this point I started experimenting with a small ",["$","a",null,{"href":"https://gist.github.com/SidOfc/5218a7a9f12ed2105a9b052ca8e6707e","title":"Visit codi.vim snippet github gist","children":"vimscript snippet"}]," in my .vimrc.\nExcluding comments and blanks it is 10 LoC.\nIt wraps the default ",["$","code",null,{"children":"Codi"}]," command in a function which creates an empty buffer in a new tab with the right filetype set before finally running ",["$","code",null,{"children":"Codi"}]," itself.\nThis creates the fullscreen split that I wanted:"]}],"\n",["$","figure",null,{"onClick":"$undefined","className":"media_figure__wgz58","children":[["$","div",null,{"className":"media_relative__Oqy8s","style":{"paddingBottom":"48.01548886737657%"},"children":["$","video",null,{"className":"media_media__dB51W","autoPlay":true,"loop":true,"muted":true,"playsInline":true,"children":[["$","source","webm",{"src":"/media/posts/wrapped-split-behavior.webm","type":"video/webm"}],["$","source","mp4",{"src":"/media/posts/wrapped-split-behavior.mp4","type":"video/mp4"}]]}]}],["$","figcaption",null,{"className":"media_alt__6tx_o","children":"Enhanced split behavior"}]]}],"\n",["$","$La",null,{"children":"Problem solved, or maybe not?","as":"h2"}],"\n",["$","p",null,{"children":"All good so far, but upon closing the buffer, the contents of the buffer are deleted.\nWhile automatically clearing the scratchpad is nice, sometimes I want to go back and forth between the code and the scratchpad to add additional code or compare the existing code with the scratchpad code."}],"\n",["$","p",null,{"children":["This required a ",["$","a",null,{"href":"https://gist.github.com/SidOfc/3f94244a8b08406710b6669052f66d62","title":"Visit second codi.vim snippet github gist","children":"second iteration"}]," of the original vimscript snippet.\nThis time I did not want to delete the buffer but hide it instead, keeping the code that was already written in it.\nAfter hiding the buffer, its ",["$","code",null,{"children":"tabpagenr()"}]," is stored in a dictionary keyed by the filetype of the buffer."]}],"\n",["$","p",null,{"children":"Then, when toggling codi for a filetype that is stored, switch to that tab instead of opening a new one (there is even a check if that tab actually exists):"}],"\n",["$","figure",null,{"onClick":"$undefined","className":"media_figure__wgz58","children":[["$","div",null,{"className":"media_relative__Oqy8s","style":{"paddingBottom":"48.01548886737657%"},"children":["$","video",null,{"className":"media_media__dB51W","autoPlay":true,"loop":true,"muted":true,"playsInline":true,"children":[["$","source","webm",{"src":"/media/posts/wrapped-split-behavior-2.webm","type":"video/webm"}],["$","source","mp4",{"src":"/media/posts/wrapped-split-behavior-2.mp4","type":"video/mp4"}]]}]}],["$","figcaption",null,{"className":"media_alt__6tx_o","children":"Enhanced split behavior version 2"}]]}],"\n",["$","p",null,{"children":["And there we go! Aside from the fact that the buffer now remains, the name is also ",["$","code",null,{"children":"scratch::ruby"}],".\nThis is a bit more descriptive than having just ",["$","code",null,{"children":"[Scratch]"}]," in ",["$","code",null,{"children":":ls"}]," output when multiple codi buffers of a different filetype are active."]}],"\n",["$","$La",null,{"children":"Let's wrap it in an issue","as":"h2"}],"\n",["$","p",null,{"children":["It was a fun experience tweaking this plugin to my liking.\nI thought this feature would be so awesome that I even proposed it in an ",["$","a",null,{"href":"https://github.com/metakirby5/codi.vim/issues/94","title":"View metakirby5/codi.vim issue #94","children":"issue"}],".\nUnfortunately it didn't make it since it was too workflow specific."]}],"\n",["$","p",null,{"children":["As you may have been able to see in the issue though, the code in that snippet is ",["$","em",null,{"children":"slighty"}]," different from the example gist linked in this post.\nThe main difference is this line which resizes codi to 50% of the buffer width whenever a new instance is spawned:"]}],"\n",["$","pre",null,{"style":{"backgroundColor":"var(--prism-plain-backgroundColor)","color":"var(--prism-plain-color)","textShadow":"var(--prism-plain-textShadow)"},"children":[["$","span","0",{"style":{"display":"block"},"children":[["$","span","0",{"style":{"color":"var(--prism-comment-color)","fontStyle":"var(--prism-comment-fontStyle)"},"children":"\" since it is fullscreen, I'd like a 50/50 split"}],["$","span","1",{"style":{"backgroundColor":"var(--prism-plain-backgroundColor)","color":"var(--prism-plain-color)","textShadow":"var(--prism-plain-textShadow)"},"children":""}]]}],["$","span","1",{"style":{"display":"block"},"children":[["$","span","0",{"style":{"backgroundColor":"var(--prism-plain-backgroundColor)","color":"var(--prism-plain-color)","textShadow":"var(--prism-plain-textShadow)"},"children":""}],["$","span","1",{"style":{"color":"var(--prism-keyword-color)"},"children":"let"}],["$","span","2",{"style":{"backgroundColor":"var(--prism-plain-backgroundColor)","color":"var(--prism-plain-color)","textShadow":"var(--prism-plain-textShadow)"},"children":" g"}],["$","span","3",{"style":{"color":"var(--prism-punctuation-color)"},"children":":"}],["$","span","4",{"style":{"backgroundColor":"var(--prism-plain-backgroundColor)","color":"var(--prism-plain-color)","textShadow":"var(--prism-plain-textShadow)"},"children":"codi#width "}],["$","span","5",{"style":{"color":"var(--prism-operator-color)"},"children":"="}],["$","span","6",{"style":{"backgroundColor":"var(--prism-plain-backgroundColor)","color":"var(--prism-plain-color)","textShadow":"var(--prism-plain-textShadow)"},"children":" "}],["$","span","7",{"style":{"color":"var(--prism-function-color)"},"children":"winwidth"}],["$","span","8",{"style":{"color":"var(--prism-punctuation-color)"},"children":"("}],["$","span","9",{"style":{"color":"var(--prism-function-color)"},"children":"winnr"}],["$","span","10",{"style":{"color":"var(--prism-punctuation-color)"},"children":"("}],["$","span","11",{"style":{"color":"var(--prism-punctuation-color)"},"children":")"}],["$","span","12",{"style":{"color":"var(--prism-punctuation-color)"},"children":")"}],["$","span","13",{"style":{"backgroundColor":"var(--prism-plain-backgroundColor)","color":"var(--prism-plain-color)","textShadow":"var(--prism-plain-textShadow)"},"children":" "}],["$","span","14",{"style":{"color":"var(--prism-operator-color)"},"children":"/"}],["$","span","15",{"style":{"backgroundColor":"var(--prism-plain-backgroundColor)","color":"var(--prism-plain-color)","textShadow":"var(--prism-plain-textShadow)"},"children":" "}],["$","span","16",{"style":{"color":"var(--prism-number-color)"},"children":"2"}]]}]]}],"\n",["$","p",null,{"children":["The author thought it would be a nice addition to have percentage width support and for the snippets to live elsewhere for others to use in their .vimrc.\nSo I went ahead and ",["$","a",null,{"href":"https://github.com/metakirby5/codi.vim/pull/95","title":"View metakirby5/codi.vim pull request #95","children":"wrote a PR"}]," for that instead, this is why you see\n",["$","code",null,{"children":"let g:codi#width = 50.0"}]," in the gists :)"]}],"\n",["$","$La",null,{"children":"Conclusion","as":"h2"}],"\n",["$","p",null,{"children":["All in all it was a great experience discovering this plugin.\nIt is like one of those rare cases with a song where after a few seconds ",["$","strong",null,{"children":"you just know"}]," ",["$","em",null,{"children":"\"this song is awesome\""}],".\nI believe I'll be using it for a long time to come for quickly testing and showing some code."]}],"\n",["$","p",null,{"children":["This also gave me the chance to write my first non-organization bound PR for a project which I like and now also use.\nSomething which I wanted to do for a long time but couldn't really find the right project to contribute to.\nI want to thank ",["$","a",null,{"href":"https://medium.com/@metakirby5","title":"View @metakirby5 on Medium","children":"Ethan Chan"}]," for his awesome plugin and for being a kind and friendly maintainer!"]}],"\n",["$","p",null,{"children":"That's it! If you want a fullscreen workflow with codi.vim, you have it.\nIf you want to persist the code in the buffer, you have it.\nIf you have a great idea, comment on this post!"}],"\n",["$","p",null,{"children":"Until next time."}],"\n",["$","p",null,{"children":"👋"}]]
